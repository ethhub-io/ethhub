{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to EthHub The goal of EthHub is to provide a single source for essential Ethereum information. We attempt to accomplish this goal through three main areas: Learn - Open source, easy to understand documentation Listen - Into the Ether podcast Read - EthHub Weekly newsletter The Learn section, where you are now, is the core of EthHub. This documentation is open source and hosted on GitHub which means that anyone has the ability to contribute. The goal is to make sure the information is available, clear, concise, and up to date. Contribution Guidelines In the interest of keeping the content on EthHub looking uniform, we have set up a template that you can use when adding your own pages to the github repo. You can find the template here . There are also some basic guidelines that need to be followed when contributing to EthHub: All pages should have links to supporting sources/documentation and additional resources No marketing or sponsored posts No promotion of ICOs/token sales No inappropriate content Join the discussion on our Discord server: https://discord.gg/VDMBe4c Donations: 0xa19fcdad77c1f0fd184689aca88babcf68010347 DISCLAIMER: EthHub is a completely independent and open-source initiative founded by Ethereum community members. Nothing contained in this Github repository should be considered financial or investment advice - it is for informational purposes only.","title":"Home"},{"location":"#welcome-to-ethhub","text":"The goal of EthHub is to provide a single source for essential Ethereum information. We attempt to accomplish this goal through three main areas: Learn - Open source, easy to understand documentation Listen - Into the Ether podcast Read - EthHub Weekly newsletter The Learn section, where you are now, is the core of EthHub. This documentation is open source and hosted on GitHub which means that anyone has the ability to contribute. The goal is to make sure the information is available, clear, concise, and up to date.","title":"Welcome to EthHub"},{"location":"#contribution-guidelines","text":"In the interest of keeping the content on EthHub looking uniform, we have set up a template that you can use when adding your own pages to the github repo. You can find the template here . There are also some basic guidelines that need to be followed when contributing to EthHub: All pages should have links to supporting sources/documentation and additional resources No marketing or sponsored posts No promotion of ICOs/token sales No inappropriate content Join the discussion on our Discord server: https://discord.gg/VDMBe4c Donations: 0xa19fcdad77c1f0fd184689aca88babcf68010347 DISCLAIMER: EthHub is a completely independent and open-source initiative founded by Ethereum community members. Nothing contained in this Github repository should be considered financial or investment advice - it is for informational purposes only.","title":"Contribution Guidelines"},{"location":"license/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"License"},{"location":"template/","text":"Please use this template as a guide when creating pages for EthHub. All pages use Markdown (cheat sheet here ) so be sure to use .md as the extension when creating the page file. Click here for an example of what a fully-fledged page looks like. [Template Begin] Page Heading [H1] Summary [H2] A summary of what the page is about. Features [H2] Main features. Sub-feature 1 [H3] Content for sub-feature 1. Sub-feature 2 [H3] Content for sub-feature 2. Resources [H2] Relevant resources like website, github link, blog posts etc go here [Template End]","title":"Template"},{"location":"template/#please-use-this-template-as-a-guide-when-creating-pages-for-ethhub-all-pages-use-markdown-cheat-sheet-here-so-be-sure-to-use-md-as-the-extension-when-creating-the-page-file","text":"","title":"Please use this template as a guide when creating pages for EthHub. All pages use Markdown (cheat sheet here) so be sure to use .md as the extension when creating the page file."},{"location":"template/#click-here-for-an-example-of-what-a-fully-fledged-page-looks-like","text":"","title":"Click here for an example of what a fully-fledged page looks like."},{"location":"template/#template-begin","text":"","title":"[Template Begin]"},{"location":"template/#page-heading-h1","text":"","title":"Page Heading [H1]"},{"location":"template/#summary-h2","text":"A summary of what the page is about.","title":"Summary [H2]"},{"location":"template/#features-h2","text":"Main features.","title":"Features [H2]"},{"location":"template/#sub-feature-1-h3","text":"Content for sub-feature 1.","title":"Sub-feature 1 [H3]"},{"location":"template/#sub-feature-2-h3","text":"Content for sub-feature 2.","title":"Sub-feature 2 [H3]"},{"location":"template/#resources-h2","text":"Relevant resources like website, github link, blog posts etc go here","title":"Resources [H2]"},{"location":"template/#template-end","text":"","title":"[Template End]"},{"location":"built-on-ethereum/collectables/cryptopunks/","text":"CryptoPunks CryptoPunks are 10,000 unique collectible characters with proof of ownership stored on the Ethereum blockchain. No two are exactly alike, and each one of them can be officially owned by a single person on the Ethereum blockchain. The CryptoPunks are 24x24 pixel art images, generated algorithmically. Most are punky-looking guys and girls, but there are a few rarer types mixed in: Apes, Zombies and even the odd Alien. Every punk has their own profile page that shows their attributes as well as their ownership/for-sale status. Resources: Website","title":"CryptoPunks"},{"location":"built-on-ethereum/collectables/cryptopunks/#cryptopunks","text":"CryptoPunks are 10,000 unique collectible characters with proof of ownership stored on the Ethereum blockchain. No two are exactly alike, and each one of them can be officially owned by a single person on the Ethereum blockchain. The CryptoPunks are 24x24 pixel art images, generated algorithmically. Most are punky-looking guys and girls, but there are a few rarer types mixed in: Apes, Zombies and even the odd Alien. Every punk has their own profile page that shows their attributes as well as their ownership/for-sale status.","title":"CryptoPunks"},{"location":"built-on-ethereum/collectables/cryptopunks/#resources","text":"Website","title":"Resources:"},{"location":"built-on-ethereum/collectables/decentraland/","text":"Decentraland Description Decentraland is an open virtual world that players can modify and interact with. Decentraland is a marketplace for buying and selling digital assets representing pieces of land in the virtual world. Initially, the land is distributed via an auction and the winning bidder receives the ownership of a land. They can then trade it on a secondary market. Each land has a 'scene' where an owner can put 3D objects and code their interactions. Therefore, it\u2019s possible to create games and attractions within Decentraland. The world will be accessible via a VR browser on multiple platforms. Important links Website","title":"Decentraland"},{"location":"built-on-ethereum/collectables/decentraland/#decentraland","text":"","title":"Decentraland"},{"location":"built-on-ethereum/collectables/decentraland/#description","text":"Decentraland is an open virtual world that players can modify and interact with. Decentraland is a marketplace for buying and selling digital assets representing pieces of land in the virtual world. Initially, the land is distributed via an auction and the winning bidder receives the ownership of a land. They can then trade it on a secondary market. Each land has a 'scene' where an owner can put 3D objects and code their interactions. Therefore, it\u2019s possible to create games and attractions within Decentraland. The world will be accessible via a VR browser on multiple platforms.","title":"Description"},{"location":"built-on-ethereum/collectables/decentraland/#important-links","text":"Website","title":"Important links"},{"location":"built-on-ethereum/collectables/mlb-crypto-baseball/","text":"MLB Crypto Baseball MLB Crypto Baseball is a blockchain-based sports game that anyone can play using their very own crypto figures. Every game of MLB Crypto Baseball is tied to a live MLB game in real time. Your figures will earn stats based on how well they perform in each MLB game. The better your teams and players perform in a live MLB game, the more your figures will improve. Resources: Website","title":"MLB Crypto Baseball"},{"location":"built-on-ethereum/collectables/mlb-crypto-baseball/#mlb-crypto-baseball","text":"MLB Crypto Baseball is a blockchain-based sports game that anyone can play using their very own crypto figures. Every game of MLB Crypto Baseball is tied to a live MLB game in real time. Your figures will earn stats based on how well they perform in each MLB game. The better your teams and players perform in a live MLB game, the more your figures will improve.","title":"MLB Crypto Baseball"},{"location":"built-on-ethereum/collectables/mlb-crypto-baseball/#resources","text":"Website","title":"Resources:"},{"location":"built-on-ethereum/decentralized-exchanges/what-are-decentralized-exchanges/","text":"Decentralized Exchanges Summary Decentralized Exchanges (sometimes referred to as 'non-custodial exchanges') allow for the trading of crypto assets without the need for a trusted central authority. This cuts down on the risk of exchange hacks and many other risks. There are many types of decentralized exchanges and it's important to understand the differences. Different types of DEXs: Off-chain order book Peer-to-peer Pool-based Side-chain order book Resources: List of all DEXs Messari DEX Resources Circle DEX Report","title":"What are Decentralized Exchanges?"},{"location":"built-on-ethereum/decentralized-exchanges/what-are-decentralized-exchanges/#decentralized-exchanges","text":"","title":"Decentralized Exchanges"},{"location":"built-on-ethereum/decentralized-exchanges/what-are-decentralized-exchanges/#summary","text":"Decentralized Exchanges (sometimes referred to as 'non-custodial exchanges') allow for the trading of crypto assets without the need for a trusted central authority. This cuts down on the risk of exchange hacks and many other risks. There are many types of decentralized exchanges and it's important to understand the differences.","title":"Summary"},{"location":"built-on-ethereum/decentralized-exchanges/what-are-decentralized-exchanges/#different-types-of-dexs","text":"Off-chain order book Peer-to-peer Pool-based Side-chain order book","title":"Different types of DEXs:"},{"location":"built-on-ethereum/decentralized-exchanges/what-are-decentralized-exchanges/#resources","text":"List of all DEXs Messari DEX Resources Circle DEX Report","title":"Resources:"},{"location":"built-on-ethereum/decentralized-exchanges/aggregators/totle/","text":"Totle Description Totle is creating an intuitive non-custodial platform for managing digital assets. Totle's interface allows users to view asset performance and allocation as well as trade directly from the platform. A unique characteristic of Totle is the aggregation of decentralized exchange orderbooks, allowing for enhanced decentralized trading liquidity. Important Links Website: https://www.totle.com Medium: https://medium.com/totle Telegram: https://t.me/totleinc Twitter: https://twitter.com/TotleCrypto","title":"Totle"},{"location":"built-on-ethereum/decentralized-exchanges/aggregators/totle/#totle","text":"","title":"Totle"},{"location":"built-on-ethereum/decentralized-exchanges/aggregators/totle/#description","text":"Totle is creating an intuitive non-custodial platform for managing digital assets. Totle's interface allows users to view asset performance and allocation as well as trade directly from the platform. A unique characteristic of Totle is the aggregation of decentralized exchange orderbooks, allowing for enhanced decentralized trading liquidity.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/aggregators/totle/#important-links","text":"Website: https://www.totle.com Medium: https://medium.com/totle Telegram: https://t.me/totleinc Twitter: https://twitter.com/TotleCrypto","title":"Important Links"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-instant/","text":"0x Instant Summary 0x Instant is a new product from the 0x core team that offers a convenient way for people to get access to a wide variety of tokens and other crypto-assets in just a few taps. Developers can integrate the free, open source library into their applications or websites in order to both offer seamless access to crypto-assets, as well as gain a new source of revenue, with just a few lines of code. Affliate Fees As an end host of 0x Instant, you can charge users a fee on all trades made through Instant with the affiliateFee option. Simply specify an ethereum address and feePercentage (up to 5%), and a percentage of each transaction will be deposited into the specified address (denominated in ETH). Example: 3% of transaction volume (in ETH) will de deposited into 0x50ff5828a216170cf224389f1c5b0301a5d0a230 head ... script src= https://instant.0xproject.com/instant.js /script ... /head zeroExInstant.render( { orderSource: 'https://api.relayer.com/sra/v2/', affiliateInfo: { feeRecipient: '0x50ff5828a216170cf224389f1c5b0301a5d0a230', feePercentage: 0.03, }, }, 'body', ); Important Links Website Getting Started","title":"0x-Instant"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-instant/#0x-instant","text":"","title":"0x Instant"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-instant/#summary","text":"0x Instant is a new product from the 0x core team that offers a convenient way for people to get access to a wide variety of tokens and other crypto-assets in just a few taps. Developers can integrate the free, open source library into their applications or websites in order to both offer seamless access to crypto-assets, as well as gain a new source of revenue, with just a few lines of code.","title":"Summary"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-instant/#affliate-fees","text":"As an end host of 0x Instant, you can charge users a fee on all trades made through Instant with the affiliateFee option. Simply specify an ethereum address and feePercentage (up to 5%), and a percentage of each transaction will be deposited into the specified address (denominated in ETH). Example: 3% of transaction volume (in ETH) will de deposited into 0x50ff5828a216170cf224389f1c5b0301a5d0a230 head ... script src= https://instant.0xproject.com/instant.js /script ... /head zeroExInstant.render( { orderSource: 'https://api.relayer.com/sra/v2/', affiliateInfo: { feeRecipient: '0x50ff5828a216170cf224389f1c5b0301a5d0a230', feePercentage: 0.03, }, }, 'body', );","title":"Affliate Fees"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-instant/#important-links","text":"Website Getting Started","title":"Important Links"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-relayers/","text":"0x Relayers Relayer Link Radar Relay https://app.radarrelay.com StarBitEx https://www.starbitex.com/Trade DDEX https://ddex.io/trade Paradex https://paradex.io/ ERC dEX https://app.ercdex.com The Ocean https://app.theocean.trade/ Token Jar https://tokenjar.io/","title":"0x-Relayers"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-relayers/#0x-relayers","text":"Relayer Link Radar Relay https://app.radarrelay.com StarBitEx https://www.starbitex.com/Trade DDEX https://ddex.io/trade Paradex https://paradex.io/ ERC dEX https://app.ercdex.com The Ocean https://app.theocean.trade/ Token Jar https://tokenjar.io/","title":"0x Relayers"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/etherdelta/","text":"EtherDelta Description EtherDelta is a decentralized exchange. It processes both orders and trade settlements on chain. Interface Resources Website Twitter Github","title":"EtherDelta"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/etherdelta/#etherdelta","text":"","title":"EtherDelta"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/etherdelta/#description","text":"EtherDelta is a decentralized exchange. It processes both orders and trade settlements on chain.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/etherdelta/#interface","text":"","title":"Interface"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/etherdelta/#resources","text":"Website Twitter Github","title":"Resources"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/hydro/","text":"Hydro Description The DDEX team forked 0x and called their new protocol Hydro. They iterating different parts of the 0x protocol, but the most important seem to be a new matching engine and a new liquidity sharing model. Unlike 0x, there is no requirement that one pay trading fees with an appcoin. Important Links Website Twitter Github","title":"Hydro"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/hydro/#hydro","text":"","title":"Hydro"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/hydro/#description","text":"The DDEX team forked 0x and called their new protocol Hydro. They iterating different parts of the 0x protocol, but the most important seem to be a new matching engine and a new liquidity sharing model. Unlike 0x, there is no requirement that one pay trading fees with an appcoin.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/hydro/#important-links","text":"Website Twitter Github","title":"Important Links"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/idex/","text":"IDEX Description IDEX is a decentralized exchange. It processes orders in a centralized order book and settles the trades on chain. Interface Important Links Website Twitter Gtihub","title":"IDEX"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/idex/#idex","text":"","title":"IDEX"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/idex/#description","text":"IDEX is a decentralized exchange. It processes orders in a centralized order book and settles the trades on chain.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/idex/#interface","text":"","title":"Interface"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/idex/#important-links","text":"Website Twitter Gtihub","title":"Important Links"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/loopring/","text":"Loopring Description Loopring aims to implement a decentralized exchange protocol with a hybrid order model with a focus on liquidity. Loopring introduces two novel tools that can increase liquidity: order ring and consortium blockchain. Order ring is a method of chaining multiple orders that execute each other. It\u2019s up to relayers and arbitragers to find rings and execute them. On the protocol level, Loopring equally distributes margins between orders and prevents rent-seeking by adding redundant orders to the ring. Relayers can cooperate by sharing liquidity. Loopring offers a way to do that by creating a consortium blockchain. This blockchain is fast (1-2 second block time) and supports history pruning. Relayers decide whether they want to join the consortium, make their own pool, or not to share liquidity at all. Important links Website DEX Portal","title":"Loopring"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/loopring/#loopring","text":"","title":"Loopring"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/loopring/#description","text":"Loopring aims to implement a decentralized exchange protocol with a hybrid order model with a focus on liquidity. Loopring introduces two novel tools that can increase liquidity: order ring and consortium blockchain. Order ring is a method of chaining multiple orders that execute each other. It\u2019s up to relayers and arbitragers to find rings and execute them. On the protocol level, Loopring equally distributes margins between orders and prevents rent-seeking by adding redundant orders to the ring. Relayers can cooperate by sharing liquidity. Loopring offers a way to do that by creating a consortium blockchain. This blockchain is fast (1-2 second block time) and supports history pruning. Relayers decide whether they want to join the consortium, make their own pool, or not to share liquidity at all.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/loopring/#important-links","text":"Website DEX Portal","title":"Important links"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/what-is-off-chain-orderbook/","text":"Off-chain Order Book For \"Off-Chain Orderbook\" decentralized exchanges, final trades occur on chain but every order is hosted by a third party called a Relayer. This was the style of many early generation decentralized exchanges built on Ethereum. Exchanges 0x Protocol EtherDelta Loopring IDEX Hydro Pros Faster order management than On-Chain solutions Less fees involved than On-Chain solutions Cons No full guarantee that a maker order is still active The relayer could front run an order","title":"What are Off-Chain Orderbook Decentralized Exchanges?"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/what-is-off-chain-orderbook/#off-chain-order-book","text":"For \"Off-Chain Orderbook\" decentralized exchanges, final trades occur on chain but every order is hosted by a third party called a Relayer. This was the style of many early generation decentralized exchanges built on Ethereum.","title":"Off-chain Order Book"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/what-is-off-chain-orderbook/#exchanges","text":"0x Protocol EtherDelta Loopring IDEX Hydro","title":"Exchanges"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/what-is-off-chain-orderbook/#pros","text":"Faster order management than On-Chain solutions Less fees involved than On-Chain solutions","title":"Pros"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/what-is-off-chain-orderbook/#cons","text":"No full guarantee that a maker order is still active The relayer could front run an order","title":"Cons"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/airswap/","text":"AirSwap Description AirSwap is a decentralized exchange that uses an off chain matching system called the Swap Protocol which allows users to easily swap tokens for other tokens. Pros Convenient swapping of tokens Single, global liquidity pool No fee system, Ethereum gas cost paid by taker AirSwap never holds user funds Swap Protocol provides protection against frontrunning and race conditions Cons No viewable orderbook Taker pays Ethereum gas fees on each trade Time to settle depends on Ethereum network capacity Trade cost paid by taker fluctuates with Ethereum gas price Interface Resources Website Twitter Github Reddit Podcasts Decentralised: https://www.stitcher.com/podcast/nick-hollins/decentralised-podcast/e/56433043 Crypto Street: https://soundcloud.com/crypto-street-podcast/the-crytpo-street-podcast-episode-4-michael-oved/sets Appetite for Disruption: https://player.fm/series/appetite-for-disruption-the-business-and-regulation-of-fintech/what-the-internet-was-for-information-the-blockchain-is-for-transferring-value-michael-oved","title":"Airswap"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/airswap/#airswap","text":"","title":"AirSwap"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/airswap/#description","text":"AirSwap is a decentralized exchange that uses an off chain matching system called the Swap Protocol which allows users to easily swap tokens for other tokens.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/airswap/#pros","text":"Convenient swapping of tokens Single, global liquidity pool No fee system, Ethereum gas cost paid by taker AirSwap never holds user funds Swap Protocol provides protection against frontrunning and race conditions","title":"Pros"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/airswap/#cons","text":"No viewable orderbook Taker pays Ethereum gas fees on each trade Time to settle depends on Ethereum network capacity Trade cost paid by taker fluctuates with Ethereum gas price","title":"Cons"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/airswap/#interface","text":"","title":"Interface"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/airswap/#resources","text":"Website Twitter Github Reddit","title":"Resources"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/airswap/#podcasts","text":"Decentralised: https://www.stitcher.com/podcast/nick-hollins/decentralised-podcast/e/56433043 Crypto Street: https://soundcloud.com/crypto-street-podcast/the-crytpo-street-podcast-episode-4-michael-oved/sets Appetite for Disruption: https://player.fm/series/appetite-for-disruption-the-business-and-regulation-of-fintech/what-the-internet-was-for-information-the-blockchain-is-for-transferring-value-michael-oved","title":"Podcasts"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/ren/","text":"Ren Description The goal of Ren is to provide an ability for traders to execute their orders privately. The protocol defines a way to create a dark pool of orders where they can be matched with each other without revealing any information about them. In Ren, orders are split into fragments, which are then sent to the different nodes in the network. To reveal an order, the user needs to collect a majority of fragments. Honest traders distribute fragments uniformly across the network, so if an attacker wants to collect a majority of fragments, they will need to control the majority of nodes. Nodes are controlled by dark pool operators. They stake tokens to be eligible to receive order fragments, and the stake is proportional to the number of fragments they are able to receive. Operators match orders in collaboration with each other in a trustless way. Important links Website: https://renproject.io/ RenEx: https://ren.exchange","title":"Ren"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/ren/#ren","text":"","title":"Ren"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/ren/#description","text":"The goal of Ren is to provide an ability for traders to execute their orders privately. The protocol defines a way to create a dark pool of orders where they can be matched with each other without revealing any information about them. In Ren, orders are split into fragments, which are then sent to the different nodes in the network. To reveal an order, the user needs to collect a majority of fragments. Honest traders distribute fragments uniformly across the network, so if an attacker wants to collect a majority of fragments, they will need to control the majority of nodes. Nodes are controlled by dark pool operators. They stake tokens to be eligible to receive order fragments, and the stake is proportional to the number of fragments they are able to receive. Operators match orders in collaboration with each other in a trustless way.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/ren/#important-links","text":"Website: https://renproject.io/ RenEx: https://ren.exchange","title":"Important links"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/what-is-peer-to-peer/","text":"Peer to Peer For \"Peer-to-Peer\" decentralized exchanges, users are matched with one another off-chain for instant token swaps. Swaps are settled on-chain. Exchanges AirSwap Ren Pros Convenient swapping of tokens Cons No order system","title":"What are Peer to Peer Decentralized Exchanges?"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/what-is-peer-to-peer/#peer-to-peer","text":"For \"Peer-to-Peer\" decentralized exchanges, users are matched with one another off-chain for instant token swaps. Swaps are settled on-chain.","title":"Peer to Peer"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/what-is-peer-to-peer/#exchanges","text":"AirSwap Ren","title":"Exchanges"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/what-is-peer-to-peer/#pros","text":"Convenient swapping of tokens","title":"Pros"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/what-is-peer-to-peer/#cons","text":"No order system","title":"Cons"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/bancor/","text":"Bancor Description Bancor is a protocol for the algorithmic market making exchange with on-chain liquidity. For each token, there is a dedicated smart contract. In the simplest form, Bancor enables ether to token exchanges. However, token-to-token transfers are also possible. Bancor Network Token (BNT) used to facilitate trades between different tokens by being an intermediate token. Liquidity for the tokens is stored in smart contracts. At any time, providers can supply and draw tokens to the liquidity pool. Exchange price is defined by the corresponding supply of the ether stored in reserves: the price goes up when more people want to buy the token with ether and down when people want to sell it. As market making is algorithmic and price discovery is automatic, there is always enough liquidity for trades, as long as price slippage is not a concern. Resources Website","title":"Bancor"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/bancor/#bancor","text":"","title":"Bancor"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/bancor/#description","text":"Bancor is a protocol for the algorithmic market making exchange with on-chain liquidity. For each token, there is a dedicated smart contract. In the simplest form, Bancor enables ether to token exchanges. However, token-to-token transfers are also possible. Bancor Network Token (BNT) used to facilitate trades between different tokens by being an intermediate token. Liquidity for the tokens is stored in smart contracts. At any time, providers can supply and draw tokens to the liquidity pool. Exchange price is defined by the corresponding supply of the ether stored in reserves: the price goes up when more people want to buy the token with ether and down when people want to sell it. As market making is algorithmic and price discovery is automatic, there is always enough liquidity for trades, as long as price slippage is not a concern.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/bancor/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/kyber/","text":"KyberSwap Description KyberSwap is decentralized exchange that uses an on-chain matching system to instantly convert tokens into other tokens. Kyber Network KyberSwap is built on the Kyber Network. Kyber Network builds a liquidity pool of tokens to facilitate token swaps. Different parties, including Kyber itself, maintain their own pools called reserves. Each reserve is a smart contract that is controlled by reserve admin who deployed it. Reserves vary in supported tokens, liquidity and conversion prices. When a user wants to exchange one token for another, Kyber scans all reserves to pick the cheapest one. Interface Resources Website Twitter Github","title":"Kyber"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/kyber/#kyberswap","text":"","title":"KyberSwap"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/kyber/#description","text":"KyberSwap is decentralized exchange that uses an on-chain matching system to instantly convert tokens into other tokens.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/kyber/#kyber-network","text":"KyberSwap is built on the Kyber Network. Kyber Network builds a liquidity pool of tokens to facilitate token swaps. Different parties, including Kyber itself, maintain their own pools called reserves. Each reserve is a smart contract that is controlled by reserve admin who deployed it. Reserves vary in supported tokens, liquidity and conversion prices. When a user wants to exchange one token for another, Kyber scans all reserves to pick the cheapest one.","title":"Kyber Network"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/kyber/#interface","text":"","title":"Interface"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/kyber/#resources","text":"Website Twitter Github","title":"Resources"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/uniswap/","text":"Uniswap Description Uniswap is a decentralized token exchange protocol that utilizes a \"constant product market maker\" model. This model allows defining the asset price based on the available staked liquidity of traded assets. There is no token to facilitate the exchange as ether is used as an intermediary of each trade. In Uniswap, each token has its own smart contract and liquidity pool. If there\u2019s no smart contract for a given token, anyone can create one using the 'factory' contract. Only one contract can be deployed for each token address. The price of tokens is based on the amount of liquidity in the contract. That is, if someone is buying a token with ETH, the supply of that token in the pool will decrease while the supply of ether will increase, so the price of the token will increase. If someone is selling token with ETH, the price of the token will decrease. In other words, token price reflects the supply and demand of that token. In case a token price significantly shifts from its market price, arbitrage opportunities are created, and the price will eventually be corrected. Anyone can send their tokens and ether to the liquidity pool. There is a small fee (0.3%) for each trade which is given to liquidity providers to incentivize pooled liquidity. Resources Website Exchange Uniswap\u200a\u2014\u200aA Unique Exchange (blog post) Uniswap: How to add Liquidity to a pool","title":"Uniswap"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/uniswap/#uniswap","text":"","title":"Uniswap"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/uniswap/#description","text":"Uniswap is a decentralized token exchange protocol that utilizes a \"constant product market maker\" model. This model allows defining the asset price based on the available staked liquidity of traded assets. There is no token to facilitate the exchange as ether is used as an intermediary of each trade. In Uniswap, each token has its own smart contract and liquidity pool. If there\u2019s no smart contract for a given token, anyone can create one using the 'factory' contract. Only one contract can be deployed for each token address. The price of tokens is based on the amount of liquidity in the contract. That is, if someone is buying a token with ETH, the supply of that token in the pool will decrease while the supply of ether will increase, so the price of the token will increase. If someone is selling token with ETH, the price of the token will decrease. In other words, token price reflects the supply and demand of that token. In case a token price significantly shifts from its market price, arbitrage opportunities are created, and the price will eventually be corrected. Anyone can send their tokens and ether to the liquidity pool. There is a small fee (0.3%) for each trade which is given to liquidity providers to incentivize pooled liquidity.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/uniswap/#resources","text":"Website Exchange Uniswap\u200a\u2014\u200aA Unique Exchange (blog post) Uniswap: How to add Liquidity to a pool","title":"Resources"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/what-is-pool-based/","text":"Pool Based For \"Pool-based\" decentralized exchanges, users are getting liquidity from a single pool. Price discovery is done on-chain by interacting with the protocol's smart contract. Exchanges KyberSwap Bancor Uniswap Pros Convenient and fast swap of tokens Cons No order system","title":"What are Pool Based Decentralized Exchanges?"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/what-is-pool-based/#pool-based","text":"For \"Pool-based\" decentralized exchanges, users are getting liquidity from a single pool. Price discovery is done on-chain by interacting with the protocol's smart contract.","title":"Pool Based"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/what-is-pool-based/#exchanges","text":"KyberSwap Bancor Uniswap","title":"Exchanges"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/what-is-pool-based/#pros","text":"Convenient and fast swap of tokens","title":"Pros"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/what-is-pool-based/#cons","text":"No order system","title":"Cons"},{"location":"built-on-ethereum/developer-tools/gitcoin/","text":"Gitcoin Description Gitcoin's mission is to Grow Open Source Software. Their core products are Main products: Bounties Tips CodeFund Secondary products: Gitcoin Gas Station Easy ENS subdomains Pros Easy to recruit software engineers 10k developers will see your bountied work Fast: Median issue on the platform will be turned around in 7 days. Cons You must have Ether/gas to use the platform You must know how to scope software develoment bounties Resources Website Twitter GitHub Reddit Podcasts FLOSS Weekly Changelog SE Daily","title":"Gitcoin"},{"location":"built-on-ethereum/developer-tools/gitcoin/#gitcoin","text":"","title":"Gitcoin"},{"location":"built-on-ethereum/developer-tools/gitcoin/#description","text":"Gitcoin's mission is to Grow Open Source Software. Their core products are","title":"Description"},{"location":"built-on-ethereum/developer-tools/gitcoin/#main-products","text":"Bounties Tips CodeFund","title":"Main products:"},{"location":"built-on-ethereum/developer-tools/gitcoin/#secondary-products","text":"Gitcoin Gas Station Easy ENS subdomains","title":"Secondary products:"},{"location":"built-on-ethereum/developer-tools/gitcoin/#pros","text":"Easy to recruit software engineers 10k developers will see your bountied work Fast: Median issue on the platform will be turned around in 7 days.","title":"Pros"},{"location":"built-on-ethereum/developer-tools/gitcoin/#cons","text":"You must have Ether/gas to use the platform You must know how to scope software develoment bounties","title":"Cons"},{"location":"built-on-ethereum/developer-tools/gitcoin/#resources","text":"Website Twitter GitHub Reddit","title":"Resources"},{"location":"built-on-ethereum/developer-tools/gitcoin/#podcasts","text":"FLOSS Weekly Changelog SE Daily","title":"Podcasts"},{"location":"built-on-ethereum/developer-tools/kauri/","text":"Kauri Description Kauri is a decentralized knowledge base, blogging platform and is building infrastructure for gathering technical information about Ethereum. The aim of the project is to create a network of writers, editors, and curators that collectively contribute to the growing set of articles and tutorials. Thanks to Ethereum and IPFS, authors have full ownership of their work. Kauri is starting as a place for the technical documentation for various blockchain protocols and applications, as well as building for Ethereum in general. The team wants to acquire developers of these projects as moderators and active content creators. Resources Website","title":"Kauri"},{"location":"built-on-ethereum/developer-tools/kauri/#kauri","text":"","title":"Kauri"},{"location":"built-on-ethereum/developer-tools/kauri/#description","text":"Kauri is a decentralized knowledge base, blogging platform and is building infrastructure for gathering technical information about Ethereum. The aim of the project is to create a network of writers, editors, and curators that collectively contribute to the growing set of articles and tutorials. Thanks to Ethereum and IPFS, authors have full ownership of their work. Kauri is starting as a place for the technical documentation for various blockchain protocols and applications, as well as building for Ethereum in general. The team wants to acquire developers of these projects as moderators and active content creators.","title":"Description"},{"location":"built-on-ethereum/developer-tools/kauri/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/developer-tools/mintable/","text":"Mintable About Mintable is a free service that lets you manage all of your ERC-721s in one UI via Metamask. You can also Mint new smart contracts that are deployed to the main Ethereum network within seconds. This lets you create any type of ERC-721 you want and have real digital ownership of that item. Future updates Ledger Integration Resources App Help","title":"Mintable"},{"location":"built-on-ethereum/developer-tools/mintable/#mintable","text":"","title":"Mintable"},{"location":"built-on-ethereum/developer-tools/mintable/#about","text":"Mintable is a free service that lets you manage all of your ERC-721s in one UI via Metamask. You can also Mint new smart contracts that are deployed to the main Ethereum network within seconds. This lets you create any type of ERC-721 you want and have real digital ownership of that item.","title":"About"},{"location":"built-on-ethereum/developer-tools/mintable/#future-updates","text":"Ledger Integration","title":"Future updates"},{"location":"built-on-ethereum/developer-tools/mintable/#resources","text":"App Help","title":"Resources"},{"location":"built-on-ethereum/developer-tools/oneclickdapp/","text":"OneClickdApp About OneClickDapp instantly builds you a dApp with a simple URL to bookmark or share with a friend. Anyone with the dApp URL can interact with your shiny new smart contract, and access all functions at the correct address/network. Don't write a single line of front-end code. Forget about verifying your contract on Etherscan or MEW. Resources Website You Wrote a Smart Contract - Now What? (blog post)","title":"One Click dApp"},{"location":"built-on-ethereum/developer-tools/oneclickdapp/#oneclickdapp","text":"","title":"OneClickdApp"},{"location":"built-on-ethereum/developer-tools/oneclickdapp/#about","text":"OneClickDapp instantly builds you a dApp with a simple URL to bookmark or share with a friend. Anyone with the dApp URL can interact with your shiny new smart contract, and access all functions at the correct address/network. Don't write a single line of front-end code. Forget about verifying your contract on Etherscan or MEW.","title":"About"},{"location":"built-on-ethereum/developer-tools/oneclickdapp/#resources","text":"Website You Wrote a Smart Contract - Now What? (blog post)","title":"Resources"},{"location":"built-on-ethereum/developer-tools/walletconnect/","text":"WalletConnect WalletConnect is an open protocol to communicate securely between Wallets and Dapps (Web3 Apps). The protocol establishes a remote connection between two apps and/or devices using a Bridge server to relay payloads.These payloads are symmetrically encrypted through a shared key between the two peers. The connection is initiated by one peer displaying a QR Code or deep link with a standard WalletConnect URI and is established when the counter-party approves this connection request. It also includes an optional Push server to allow Native applications to notify the user of incoming payloads for establishes connections. Resources Website Twitter GitHub Reddit","title":"Wallet Connect"},{"location":"built-on-ethereum/developer-tools/walletconnect/#walletconnect","text":"WalletConnect is an open protocol to communicate securely between Wallets and Dapps (Web3 Apps). The protocol establishes a remote connection between two apps and/or devices using a Bridge server to relay payloads.These payloads are symmetrically encrypted through a shared key between the two peers. The connection is initiated by one peer displaying a QR Code or deep link with a standard WalletConnect URI and is established when the counter-party approves this connection request. It also includes an optional Push server to allow Native applications to notify the user of incoming payloads for establishes connections.","title":"WalletConnect"},{"location":"built-on-ethereum/developer-tools/walletconnect/#resources","text":"Website Twitter GitHub Reddit","title":"Resources"},{"location":"built-on-ethereum/erc-token-standards/erc1155/","text":"ERC1155 Summary A standard interface for contracts that manage multiple token types. A single deployed contract may include any combination of fungible tokens, non-fungible tokens, or other configurations (for example, semi-fungible tokens). Motivation Tokens standards like ERC-20 and ERC-721 require a separate contract to be deployed for each fungible or NFT token/collection. This places a lot of redundant bytecode on the Ethereum blockchain and limits certain functionality by the nature of separating each token contract into its own permissioned address. With the rise of crypto games and platforms like Enjin Coin, game developers may be creating thousands of tokens, and a new type of token standard is needed to support this. New functionality is possible with this design, such as transferring multiple token types at once, saving on transaction costs. Trading (escrow / atomic swaps) of multiple tokens can be built on top of this standard and it removes the need to \"approve\" individual token contracts separately. It is also easy to describe and mix multiple fungible or non-fungible tokens in a single contract. Batch Transfers The safeBatchTransferFrom function allows for batch transfers of multiple token ids and values. Gas savings improves with the number of token types in the batch transfer, compared to single transfers with multiple transactions. Approval Single-token based approval of specific token values has been dropped in favor of the function setApprovalForAll which allows an operator to manage one's entire set of tokens on behalf of the approver. To scope an approval to a specific set or quantity of tokens, we recommend deploying a contract that contains the desired rules, and directing end-users to approve this contract to manage their set of tokens. Resources Github ERC-1155: The Crypto Item Standard (blog post)","title":"ERC1155"},{"location":"built-on-ethereum/erc-token-standards/erc1155/#erc1155","text":"","title":"ERC1155"},{"location":"built-on-ethereum/erc-token-standards/erc1155/#summary","text":"A standard interface for contracts that manage multiple token types. A single deployed contract may include any combination of fungible tokens, non-fungible tokens, or other configurations (for example, semi-fungible tokens).","title":"Summary"},{"location":"built-on-ethereum/erc-token-standards/erc1155/#motivation","text":"Tokens standards like ERC-20 and ERC-721 require a separate contract to be deployed for each fungible or NFT token/collection. This places a lot of redundant bytecode on the Ethereum blockchain and limits certain functionality by the nature of separating each token contract into its own permissioned address. With the rise of crypto games and platforms like Enjin Coin, game developers may be creating thousands of tokens, and a new type of token standard is needed to support this. New functionality is possible with this design, such as transferring multiple token types at once, saving on transaction costs. Trading (escrow / atomic swaps) of multiple tokens can be built on top of this standard and it removes the need to \"approve\" individual token contracts separately. It is also easy to describe and mix multiple fungible or non-fungible tokens in a single contract.","title":"Motivation"},{"location":"built-on-ethereum/erc-token-standards/erc1155/#batch-transfers","text":"The safeBatchTransferFrom function allows for batch transfers of multiple token ids and values. Gas savings improves with the number of token types in the batch transfer, compared to single transfers with multiple transactions.","title":"Batch Transfers"},{"location":"built-on-ethereum/erc-token-standards/erc1155/#approval","text":"Single-token based approval of specific token values has been dropped in favor of the function setApprovalForAll which allows an operator to manage one's entire set of tokens on behalf of the approver. To scope an approval to a specific set or quantity of tokens, we recommend deploying a contract that contains the desired rules, and directing end-users to approve this contract to manage their set of tokens.","title":"Approval"},{"location":"built-on-ethereum/erc-token-standards/erc1155/#resources","text":"Github ERC-1155: The Crypto Item Standard (blog post)","title":"Resources"},{"location":"built-on-ethereum/erc-token-standards/erc1257/","text":"ERC1257","title":"ERC1257"},{"location":"built-on-ethereum/erc-token-standards/erc1257/#erc1257","text":"","title":"ERC1257"},{"location":"built-on-ethereum/erc-token-standards/erc20/","text":"ERC20 Summary ERC20 allows the implementation of a standard API to ensure the interoperability between tokens. It offers basic functionalities to transfer tokens, obtain account balances, get the total supply of tokens, and allow token approvals. To define an ERC20 token you need: The address of the contract The number of tokens available However, there are other optional values for additional information such as: Name, for example \u201cAugur Token\u201d Symbol, such as \u201cREP\u201d Decimals, or how much you can divide the token. You can chose from 0 to 18 decimal values ERC20 defines two types of events, Transfer() , triggered when tokens are transferred and Approve() , used for every successful call of the approve() method. This token may also include functions such as allowance() , approve() , and transferFrom() to offer advanced functionalities and authorize some other Ethereum address to utilise your tokens on your behalf. This other Ethereum address could be a smart contract designed to handle tokens or just another account. Resources Github Wiki","title":"ERC20"},{"location":"built-on-ethereum/erc-token-standards/erc20/#erc20","text":"","title":"ERC20"},{"location":"built-on-ethereum/erc-token-standards/erc20/#summary","text":"ERC20 allows the implementation of a standard API to ensure the interoperability between tokens. It offers basic functionalities to transfer tokens, obtain account balances, get the total supply of tokens, and allow token approvals. To define an ERC20 token you need: The address of the contract The number of tokens available However, there are other optional values for additional information such as: Name, for example \u201cAugur Token\u201d Symbol, such as \u201cREP\u201d Decimals, or how much you can divide the token. You can chose from 0 to 18 decimal values ERC20 defines two types of events, Transfer() , triggered when tokens are transferred and Approve() , used for every successful call of the approve() method. This token may also include functions such as allowance() , approve() , and transferFrom() to offer advanced functionalities and authorize some other Ethereum address to utilise your tokens on your behalf. This other Ethereum address could be a smart contract designed to handle tokens or just another account.","title":"Summary"},{"location":"built-on-ethereum/erc-token-standards/erc20/#resources","text":"Github Wiki","title":"Resources"},{"location":"built-on-ethereum/erc-token-standards/erc621/","text":"ERC621 Summary ERC621 is an extension to the ERC20 standard. It adds two functions to increase and decrease the total amount of tokens in circulation. In short, it proposes that totalSupply can be changed. ERC20 only allows a single token emission event defined by the contract owner during creation. With ERC621 a new totalSupply can be defined through the functions increaseSupply and decreaseSupply . It is recommended that these functions are only accessed by the contract owners or trusted users. To enhance ERC621's functionality and security, and to avoid potential errors, additional functions for overflow checks, contract property modifications and restricted privileges, should be implemented. Resources: Github","title":"ERC621"},{"location":"built-on-ethereum/erc-token-standards/erc621/#erc621","text":"","title":"ERC621"},{"location":"built-on-ethereum/erc-token-standards/erc621/#summary","text":"ERC621 is an extension to the ERC20 standard. It adds two functions to increase and decrease the total amount of tokens in circulation. In short, it proposes that totalSupply can be changed. ERC20 only allows a single token emission event defined by the contract owner during creation. With ERC621 a new totalSupply can be defined through the functions increaseSupply and decreaseSupply . It is recommended that these functions are only accessed by the contract owners or trusted users. To enhance ERC621's functionality and security, and to avoid potential errors, additional functions for overflow checks, contract property modifications and restricted privileges, should be implemented.","title":"Summary"},{"location":"built-on-ethereum/erc-token-standards/erc621/#resources","text":"Github","title":"Resources:"},{"location":"built-on-ethereum/erc-token-standards/erc721/","text":"ERC721 Summary ERC-721 is a free, open standard that describes how to build non-fungible or unique tokens on the Ethereum blockchain. While most tokens are fungible (every token is the same as every other token), ERC-721 tokens are all unique. Each NFT is identified through an uint256 ID. They may be transferred through two different funcions: A safe transfer function safeTansferFrom() which verifies that the msg.sender ,i.e. the user that triggered the function, is the owner of the token or an authorized user allowed to transfer the token. A non-secure trasfer transferFrom() , where there is no preliminary authorization verification. The token developer is responsible for implementing a piece of code in this function that verifies that the responsible for calling the function is authorized to do so. In this function, the user calling it must also verify that the receiver is entitle for receiving the token. If these verifications are not performed, the tokens could be lost forever. ERC721 tokens must implement the proposed ERC165 interface. This standard allows the detection of the interfaces implemented by a contract. This is really useful, as it allows to detect the interface that a token implements and, consequently, adapt the method/code to interact with it. What does \u201cfungible\u201d mean?! If an item is fungible, then it can be substituted or exchanged for any similar item. Fiat currencies, like the US dollar, contain fungible units. One dollar bill can be exchanged for any other dollar bill. Cryptocurrency tokens like Bitcoin, Ethereum, and MANA are all fungible because one token can be exchanged for any other token. The only thing that changes is a record on the blockchain registering the transaction. It must follow that two non-fungible tokens are not interchangeable. So what is it about non-fungible tokens (NFTs) that gives them this quality? The answer lies in the data or information stored within NFTs. We can compare two real-world examples of fungible and non-fungible items that most people should be familiar with: dollars and movie tickets. Dollars These are obviously fungible, if I have a dollar and you have a dollar, we can trade the two and neither of us will be any richer or poorer than we were before. Movie tickets NFTs are the digital manifestation of items like movie tickets, in that they can contain information in addition to just the owner, lending them all sorts of uses and unforeseen value. Put simply: you could have a movie ticket for Star Wars whereas I could have a movie ticket for Avengers. These tickets are not equal in properties or value which makes them non-fungible. ERC721 ERC721 was written to standardize non-fungible tokens. By standardizing NFTs, the developer community ushered in a new ecosystem of digital content, games, and applications that use NFTs. Thanks to ERC721, we have things like Decentraland, CryptoBeasties, Etheremon, and CryptoKitties. Resources Website Github","title":"ERC721"},{"location":"built-on-ethereum/erc-token-standards/erc721/#erc721","text":"","title":"ERC721"},{"location":"built-on-ethereum/erc-token-standards/erc721/#summary","text":"ERC-721 is a free, open standard that describes how to build non-fungible or unique tokens on the Ethereum blockchain. While most tokens are fungible (every token is the same as every other token), ERC-721 tokens are all unique. Each NFT is identified through an uint256 ID. They may be transferred through two different funcions: A safe transfer function safeTansferFrom() which verifies that the msg.sender ,i.e. the user that triggered the function, is the owner of the token or an authorized user allowed to transfer the token. A non-secure trasfer transferFrom() , where there is no preliminary authorization verification. The token developer is responsible for implementing a piece of code in this function that verifies that the responsible for calling the function is authorized to do so. In this function, the user calling it must also verify that the receiver is entitle for receiving the token. If these verifications are not performed, the tokens could be lost forever. ERC721 tokens must implement the proposed ERC165 interface. This standard allows the detection of the interfaces implemented by a contract. This is really useful, as it allows to detect the interface that a token implements and, consequently, adapt the method/code to interact with it.","title":"Summary"},{"location":"built-on-ethereum/erc-token-standards/erc721/#what-does-fungible-mean","text":"If an item is fungible, then it can be substituted or exchanged for any similar item. Fiat currencies, like the US dollar, contain fungible units. One dollar bill can be exchanged for any other dollar bill. Cryptocurrency tokens like Bitcoin, Ethereum, and MANA are all fungible because one token can be exchanged for any other token. The only thing that changes is a record on the blockchain registering the transaction. It must follow that two non-fungible tokens are not interchangeable. So what is it about non-fungible tokens (NFTs) that gives them this quality? The answer lies in the data or information stored within NFTs. We can compare two real-world examples of fungible and non-fungible items that most people should be familiar with: dollars and movie tickets.","title":"What does \u201cfungible\u201d mean?!"},{"location":"built-on-ethereum/erc-token-standards/erc721/#dollars","text":"These are obviously fungible, if I have a dollar and you have a dollar, we can trade the two and neither of us will be any richer or poorer than we were before.","title":"Dollars"},{"location":"built-on-ethereum/erc-token-standards/erc721/#movie-tickets","text":"NFTs are the digital manifestation of items like movie tickets, in that they can contain information in addition to just the owner, lending them all sorts of uses and unforeseen value. Put simply: you could have a movie ticket for Star Wars whereas I could have a movie ticket for Avengers. These tickets are not equal in properties or value which makes them non-fungible.","title":"Movie tickets"},{"location":"built-on-ethereum/erc-token-standards/erc721/#erc721_1","text":"ERC721 was written to standardize non-fungible tokens. By standardizing NFTs, the developer community ushered in a new ecosystem of digital content, games, and applications that use NFTs. Thanks to ERC721, we have things like Decentraland, CryptoBeasties, Etheremon, and CryptoKitties.","title":"ERC721"},{"location":"built-on-ethereum/erc-token-standards/erc721/#resources","text":"Website Github","title":"Resources"},{"location":"built-on-ethereum/erc-token-standards/erc721x/","text":"ERC721x Summary ERC721x is an extension of ERC721 that adds support for multi-fungible tokens and batch transfers, while being fully backward-compatible. ERC721x is heavily inspired by the ERC1178 token standard. Resources Website","title":"ERC721x"},{"location":"built-on-ethereum/erc-token-standards/erc721x/#erc721x","text":"","title":"ERC721x"},{"location":"built-on-ethereum/erc-token-standards/erc721x/#summary","text":"ERC721x is an extension of ERC721 that adds support for multi-fungible tokens and batch transfers, while being fully backward-compatible. ERC721x is heavily inspired by the ERC1178 token standard.","title":"Summary"},{"location":"built-on-ethereum/erc-token-standards/erc721x/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/erc-token-standards/erc777/","text":"ERC777 Summary ERC777 defines all the functions required to send tokens on behalf of another address, contract or regular account. For this purpose, it uses the ERC820 standard. The use of ER820 enables the registration of metadata in smart contracts in order to allow backwards compatibility with previous versions of token implementations. ERC777 includes functions for authorization, revocation, transfer and checks. Resources Specification","title":"ERC777"},{"location":"built-on-ethereum/erc-token-standards/erc777/#erc777","text":"","title":"ERC777"},{"location":"built-on-ethereum/erc-token-standards/erc777/#summary","text":"ERC777 defines all the functions required to send tokens on behalf of another address, contract or regular account. For this purpose, it uses the ERC820 standard. The use of ER820 enables the registration of metadata in smart contracts in order to allow backwards compatibility with previous versions of token implementations. ERC777 includes functions for authorization, revocation, transfer and checks.","title":"Summary"},{"location":"built-on-ethereum/erc-token-standards/erc777/#resources","text":"Specification","title":"Resources"},{"location":"built-on-ethereum/erc-token-standards/erc884/","text":"ERC884 Summary The Delaware State Legislature recently passed Delaware State Senate, 149th General Assembly, Senate Bill \u211669: An act to Amend Title 8 of the Delaware Code Relating to the General Corporation Law , henceforth referred to as \u2018The Act\u2019. As a result, Delaware General Corporation Law now explicitly allows for the use of blockchains to maintain corporate share registries. ERC-884 allows for the creation of tradable ERC-20 tokens where each token represents a numberless (or vanilla) share issued by a Delaware corporation. ERC-884 is designed to represent equity issued by any Delaware corporation, whether private or public. By deploying an ERC-884 token, a firm may be able to raise funds, either via initial public offering (IPO), or by private equity sale, in a manner conforming to Delaware Corporations Law, but bypassing the need for a custom share registry, or the involvement of a traditional stock exchange or transfer agent. Core Principles ERC-884 tokens enable conformance with the following principles, over and above the base ERC-20 standard: Token owners must have their identity verified. Rather than leaving it to a separate crowdsale contract to enforce owner whitelisting, ERC-884 requires that all token owners are whitelisted. The whitelist can be referenced by accompanying crowdsale contracts, to enforce eligibility, but the whitelist remains an integral part of the token contract itself. The token contract must provide the following three functions of a Corporations Stock Ledger (Ref: Section 224 of The Act): It must enable the corporation to prepare the list of shareholders specified in Sections 219 and 220 of The Act. It must record the information specified in Sections 156, 159, 217(a) and 218 of The Act. It must record transfers of shares as governed by Article 8 of Subtitle I of Title 6. Resources: Github","title":"ERC884"},{"location":"built-on-ethereum/erc-token-standards/erc884/#erc884","text":"","title":"ERC884"},{"location":"built-on-ethereum/erc-token-standards/erc884/#summary","text":"The Delaware State Legislature recently passed Delaware State Senate, 149th General Assembly, Senate Bill \u211669: An act to Amend Title 8 of the Delaware Code Relating to the General Corporation Law , henceforth referred to as \u2018The Act\u2019. As a result, Delaware General Corporation Law now explicitly allows for the use of blockchains to maintain corporate share registries. ERC-884 allows for the creation of tradable ERC-20 tokens where each token represents a numberless (or vanilla) share issued by a Delaware corporation. ERC-884 is designed to represent equity issued by any Delaware corporation, whether private or public. By deploying an ERC-884 token, a firm may be able to raise funds, either via initial public offering (IPO), or by private equity sale, in a manner conforming to Delaware Corporations Law, but bypassing the need for a custom share registry, or the involvement of a traditional stock exchange or transfer agent.","title":"Summary"},{"location":"built-on-ethereum/erc-token-standards/erc884/#core-principles","text":"ERC-884 tokens enable conformance with the following principles, over and above the base ERC-20 standard: Token owners must have their identity verified. Rather than leaving it to a separate crowdsale contract to enforce owner whitelisting, ERC-884 requires that all token owners are whitelisted. The whitelist can be referenced by accompanying crowdsale contracts, to enforce eligibility, but the whitelist remains an integral part of the token contract itself. The token contract must provide the following three functions of a Corporations Stock Ledger (Ref: Section 224 of The Act): It must enable the corporation to prepare the list of shareholders specified in Sections 219 and 220 of The Act. It must record the information specified in Sections 156, 159, 217(a) and 218 of The Act. It must record transfers of shares as governed by Article 8 of Subtitle I of Title 6.","title":"Core Principles"},{"location":"built-on-ethereum/erc-token-standards/erc884/#resources","text":"Github","title":"Resources:"},{"location":"built-on-ethereum/erc-token-standards/erc918/","text":"ERC918 Summary EIP-918 is an Ethereum Improvement Proposal for standardizing mineable token distribution using Proof of Work. The primary driver behind the standard is to address the very broken ICO model that currently plagues the Ethereum network. Token distribution via the ICO model and it\u2019s derivatives has always been susceptible to illicit behavior by bad actors. New token projects are centralized by nature because a single entity must handle and control all of the initial coins and all of the the raised ICO money. By distributing tokens via an alternative \u2018Initial Mining Offering\u2019 (or IMO), the ownership of the token contract no longer belongs with the deployer at all and the deployer is \u2018just another user.\u2019 As a result, investor risk exposure utilizing a mined token distribution model is significantly diminished. This standard is intended to be standalone, allowing maximum interoperability with ERC20, ERC721, and future token standards. Resources Github","title":"ERC918"},{"location":"built-on-ethereum/erc-token-standards/erc918/#erc918","text":"","title":"ERC918"},{"location":"built-on-ethereum/erc-token-standards/erc918/#summary","text":"EIP-918 is an Ethereum Improvement Proposal for standardizing mineable token distribution using Proof of Work. The primary driver behind the standard is to address the very broken ICO model that currently plagues the Ethereum network. Token distribution via the ICO model and it\u2019s derivatives has always been susceptible to illicit behavior by bad actors. New token projects are centralized by nature because a single entity must handle and control all of the initial coins and all of the the raised ICO money. By distributing tokens via an alternative \u2018Initial Mining Offering\u2019 (or IMO), the ownership of the token contract no longer belongs with the deployer at all and the deployer is \u2018just another user.\u2019 As a result, investor risk exposure utilizing a mined token distribution model is significantly diminished. This standard is intended to be standalone, allowing maximum interoperability with ERC20, ERC721, and future token standards.","title":"Summary"},{"location":"built-on-ethereum/erc-token-standards/erc918/#resources","text":"Github","title":"Resources"},{"location":"built-on-ethereum/erc-token-standards/what-are-erc-tokens/","text":"ERC Token Standards ERCs (Ethereum Request for Comments) are technical documents used by smart contract developers at Ethereum. They define a set of rules required to implement tokens for the Ethereum ecosystem. These documents are usually created by developers, and they include information about protocol specifications and contract descriptions. Before becoming an standard, an ERC must be revised, commented and accepted by the community through an EIP (Ethereum Improvement Proposal). Resources Website","title":"What are ERC Tokens?"},{"location":"built-on-ethereum/erc-token-standards/what-are-erc-tokens/#erc-token-standards","text":"ERCs (Ethereum Request for Comments) are technical documents used by smart contract developers at Ethereum. They define a set of rules required to implement tokens for the Ethereum ecosystem. These documents are usually created by developers, and they include information about protocol specifications and contract descriptions. Before becoming an standard, an ERC must be revised, commented and accepted by the community through an EIP (Ethereum Improvement Proposal).","title":"ERC Token Standards"},{"location":"built-on-ethereum/erc-token-standards/what-are-erc-tokens/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/games/cryptokitties/","text":"CryptoKitties Summary CryptoKitties is a game built on Ethereum that allows users collect and breed cryptographically unique creatures called CryptoKitties. Each kitty exists on the Ethereum blockchain as a ERC721 non-fungible token which stores the genome of the kitty. Each kitty has a unique genome that defines its appearance and traits. Players can breed their kitties to create new kitties and unlock rare attributes or \"cattributes\" as they are referred to in the game. Genes See the section labelled Genes under the CryptoKitties Guide below. History Gods Unchained crossover On January 10th, 2019, a partnership between CryptoKitties and the trading card game Gods Unchained was announced . Between Jan. 10th to Jan. 21st, 2019, CryptoKitty owners were able to forge a Talisman statue in Gods Unchained. 380 Special-Edition Gods Unchained Aeoncat Kitties were also released including Tally the Purrocious and Hypurrion, modelled after GU's Hyperion. Resources Website Twitter CryptoKitties Guide","title":"CryptoKitties"},{"location":"built-on-ethereum/games/cryptokitties/#cryptokitties","text":"","title":"CryptoKitties"},{"location":"built-on-ethereum/games/cryptokitties/#summary","text":"CryptoKitties is a game built on Ethereum that allows users collect and breed cryptographically unique creatures called CryptoKitties. Each kitty exists on the Ethereum blockchain as a ERC721 non-fungible token which stores the genome of the kitty. Each kitty has a unique genome that defines its appearance and traits. Players can breed their kitties to create new kitties and unlock rare attributes or \"cattributes\" as they are referred to in the game.","title":"Summary"},{"location":"built-on-ethereum/games/cryptokitties/#genes","text":"See the section labelled Genes under the CryptoKitties Guide below.","title":"Genes"},{"location":"built-on-ethereum/games/cryptokitties/#history","text":"","title":"History"},{"location":"built-on-ethereum/games/cryptokitties/#gods-unchained-crossover","text":"On January 10th, 2019, a partnership between CryptoKitties and the trading card game Gods Unchained was announced . Between Jan. 10th to Jan. 21st, 2019, CryptoKitty owners were able to forge a Talisman statue in Gods Unchained. 380 Special-Edition Gods Unchained Aeoncat Kitties were also released including Tally the Purrocious and Hypurrion, modelled after GU's Hyperion.","title":"Gods Unchained crossover"},{"location":"built-on-ethereum/games/cryptokitties/#resources","text":"Website Twitter CryptoKitties Guide","title":"Resources"},{"location":"built-on-ethereum/games/etheroll/","text":"Etheroll Summary Etheroll is an Ethereum smart contract for placing bets on our provably-fair dice game using Ether with no deposits or sign-ups. Each dice roll is provably random and cryptographically secure thanks to the nature of the Ethereum blockchain. History Etheroll's inital crowdsale was refunded after The DAO was hacked in June 2016. The sale raised 2,326 ETH in the five days it ran before the team decided it was best to trigger the refund. The team reached this decision in an effort to ensure the integity of their smart contracts. The crowdsale would continue as planned in March 2017. Important Links Website Refund press release","title":"Etheroll"},{"location":"built-on-ethereum/games/etheroll/#etheroll","text":"","title":"Etheroll"},{"location":"built-on-ethereum/games/etheroll/#summary","text":"Etheroll is an Ethereum smart contract for placing bets on our provably-fair dice game using Ether with no deposits or sign-ups. Each dice roll is provably random and cryptographically secure thanks to the nature of the Ethereum blockchain.","title":"Summary"},{"location":"built-on-ethereum/games/etheroll/#history","text":"Etheroll's inital crowdsale was refunded after The DAO was hacked in June 2016. The sale raised 2,326 ETH in the five days it ran before the team decided it was best to trigger the refund. The team reached this decision in an effort to ensure the integity of their smart contracts. The crowdsale would continue as planned in March 2017.","title":"History"},{"location":"built-on-ethereum/games/etheroll/#important-links","text":"Website Refund press release","title":"Important Links"},{"location":"built-on-ethereum/games/gods-unchained/","text":"Gods Unchained Summary Gods Unchained is a free-to-play digital trading card game built on Ethereum. The game is free to download and includes a core set of 250 cards that can be unlocked by progressing through the game in both single player and multiplayer modes. Card expansion sets, called 'seasons', are available for purchase. The first of these seasons is called Genesis and includes 380 cards. Paid cards are verifiably scarce and have their stats and ownership history recorded on the Ethereum blockchain. Gods Unchained also features other collectibles that grant special cosmetic benefits and can be displayed in matches against other players. All Gods Unchained gameplay occurs off-chain and incurs no transaction fees. Activating and Trading Cards Purchased Gods Unchained cards can be trustlessly traded using the 0x Protocol. When a card set is first introduced, trading is disabled during an initial balancing period where each card is checked to ensure it doesn't upset the balance of the overall game. The first set of tradable cards in Gods Unchained is the Genesis set. To trustlessly trade Gods Unchained cards, cards must first be 'activated' using a special transaction that turns them into ERC-721 tokens. Activating cards is not necessary for playing the game, nor is it necessary for trading a card purchased from a marketplace. Activation is only necessary for players wishing to trade a card for the first time. Game Mechanics Gods Unchained builds on the classic gameplay mechanics made famous by Magic the Gathering and Hearthstone. New to Gods Unchained is an innovate new mana system that forces players to begin engaging on turn 1. The game also supports a massive variety of possible matches by giving each player the choice of up to five special god powers at the start of each match. Of these powers, four are always regular and one is an ultimate. Regular powers can be activated once per turn while an ultimate power can only be used once per match. Since the game has six gods to play with and each god can use one of five powers , there are 7776 possible match combinations in Gods Unchained. This enables more gameplay variety than has been possible before. Other gameplay features include a Rune system (i.e. special small spells), an Anim system (i.e. special small creatures) and a special mulligan and first/second turn system. Gods Unchained also supports Battle Royale style elimination tournaments and is expected to include more gameplay mechanics than any other trading card game at launch. History Closed Beta Gods Unchained is currently in closed beta. The beta is expected to be opened up to the public in Q1 2019 with a global launch occuring several months later. CryptoKitties crossover On January 10th, 2019, a partnership between Gods Unchained and the kitty-breeding collectible game CryptoKitties was announced . Between Jan. 10th to Jan. 21st, 2019, CryptoKitty owners were able to forge statues in Gods Unchained, including a special Talisman based on a new fancy cat called Tally the Furrocious. 380 Special-Edition Gods Unchained Aeoncat Kitties were made available for purchase. Each Aeoncat granted its owner a chance to win the exclusive Hypurrion kitty, modelled after GU's Hyperion. Resources Website Twitter Discord Comprehensive Guide godsunchained.info - Game stats/Collection Browser gu.cards - Card Catalogue/Deck Building/Automated Pack Opening gudecks.com - Card Catalogue/Deck Building/Collectibles Tournament Pass Marketplace","title":"Gods Unchained"},{"location":"built-on-ethereum/games/gods-unchained/#gods-unchained","text":"","title":"Gods Unchained"},{"location":"built-on-ethereum/games/gods-unchained/#summary","text":"Gods Unchained is a free-to-play digital trading card game built on Ethereum. The game is free to download and includes a core set of 250 cards that can be unlocked by progressing through the game in both single player and multiplayer modes. Card expansion sets, called 'seasons', are available for purchase. The first of these seasons is called Genesis and includes 380 cards. Paid cards are verifiably scarce and have their stats and ownership history recorded on the Ethereum blockchain. Gods Unchained also features other collectibles that grant special cosmetic benefits and can be displayed in matches against other players. All Gods Unchained gameplay occurs off-chain and incurs no transaction fees.","title":"Summary"},{"location":"built-on-ethereum/games/gods-unchained/#activating-and-trading-cards","text":"Purchased Gods Unchained cards can be trustlessly traded using the 0x Protocol. When a card set is first introduced, trading is disabled during an initial balancing period where each card is checked to ensure it doesn't upset the balance of the overall game. The first set of tradable cards in Gods Unchained is the Genesis set. To trustlessly trade Gods Unchained cards, cards must first be 'activated' using a special transaction that turns them into ERC-721 tokens. Activating cards is not necessary for playing the game, nor is it necessary for trading a card purchased from a marketplace. Activation is only necessary for players wishing to trade a card for the first time.","title":"Activating and Trading Cards"},{"location":"built-on-ethereum/games/gods-unchained/#game-mechanics","text":"Gods Unchained builds on the classic gameplay mechanics made famous by Magic the Gathering and Hearthstone. New to Gods Unchained is an innovate new mana system that forces players to begin engaging on turn 1. The game also supports a massive variety of possible matches by giving each player the choice of up to five special god powers at the start of each match. Of these powers, four are always regular and one is an ultimate. Regular powers can be activated once per turn while an ultimate power can only be used once per match. Since the game has six gods to play with and each god can use one of five powers , there are 7776 possible match combinations in Gods Unchained. This enables more gameplay variety than has been possible before. Other gameplay features include a Rune system (i.e. special small spells), an Anim system (i.e. special small creatures) and a special mulligan and first/second turn system. Gods Unchained also supports Battle Royale style elimination tournaments and is expected to include more gameplay mechanics than any other trading card game at launch.","title":"Game Mechanics"},{"location":"built-on-ethereum/games/gods-unchained/#history","text":"","title":"History"},{"location":"built-on-ethereum/games/gods-unchained/#closed-beta","text":"Gods Unchained is currently in closed beta. The beta is expected to be opened up to the public in Q1 2019 with a global launch occuring several months later.","title":"Closed Beta"},{"location":"built-on-ethereum/games/gods-unchained/#cryptokitties-crossover","text":"On January 10th, 2019, a partnership between Gods Unchained and the kitty-breeding collectible game CryptoKitties was announced . Between Jan. 10th to Jan. 21st, 2019, CryptoKitty owners were able to forge statues in Gods Unchained, including a special Talisman based on a new fancy cat called Tally the Furrocious. 380 Special-Edition Gods Unchained Aeoncat Kitties were made available for purchase. Each Aeoncat granted its owner a chance to win the exclusive Hypurrion kitty, modelled after GU's Hyperion.","title":"CryptoKitties crossover"},{"location":"built-on-ethereum/games/gods-unchained/#resources","text":"Website Twitter Discord Comprehensive Guide godsunchained.info - Game stats/Collection Browser gu.cards - Card Catalogue/Deck Building/Automated Pack Opening gudecks.com - Card Catalogue/Deck Building/Collectibles Tournament Pass Marketplace","title":"Resources"},{"location":"built-on-ethereum/games/what-is-blockchain-gaming/","text":"Games What is blockchain-based gaming? Blockchain games are any games that include blockchain technology in its backend or mechanics in general. The most often use for blockchain tech in games so far has been been to store your items on the blockchain, tying them to your (Ethereum) wallet and making them permanently your own. In contrast to this, in \u201cclassic\u201d games, any items that you supposedly own in-game are in fact stored on the game publisher\u2019s servers, as is your whole account. There are many ways for you to lose possession of your assets in this case - server mailfunction (failure or attack), stopped game development, banned account, etc. The first generation of blockchain games was solely based on this principle and they were focused on collecting unique assets and trading them, for fun, profit, or both. CryptoKitties was the game that started this trend and they\u2019re still quite popular. Nowadays, we see games where blockchain technology is used to store assets and confirm and store player\u2019s progress, but with an additional, more complex gameplay built around that. Resources Games Will Be the Catalyst for Blockchain Mass Adoption (blog post) Blockchain Gaming: Separating Signal from the Noise (blog post)","title":"What is Blockchain Gaming?"},{"location":"built-on-ethereum/games/what-is-blockchain-gaming/#games","text":"","title":"Games"},{"location":"built-on-ethereum/games/what-is-blockchain-gaming/#what-is-blockchain-based-gaming","text":"Blockchain games are any games that include blockchain technology in its backend or mechanics in general. The most often use for blockchain tech in games so far has been been to store your items on the blockchain, tying them to your (Ethereum) wallet and making them permanently your own. In contrast to this, in \u201cclassic\u201d games, any items that you supposedly own in-game are in fact stored on the game publisher\u2019s servers, as is your whole account. There are many ways for you to lose possession of your assets in this case - server mailfunction (failure or attack), stopped game development, banned account, etc. The first generation of blockchain games was solely based on this principle and they were focused on collecting unique assets and trading them, for fun, profit, or both. CryptoKitties was the game that started this trend and they\u2019re still quite popular. Nowadays, we see games where blockchain technology is used to store assets and confirm and store player\u2019s progress, but with an additional, more complex gameplay built around that.","title":"What is blockchain-based gaming?"},{"location":"built-on-ethereum/games/what-is-blockchain-gaming/#resources","text":"Games Will Be the Catalyst for Blockchain Mass Adoption (blog post) Blockchain Gaming: Separating Signal from the Noise (blog post)","title":"Resources"},{"location":"built-on-ethereum/games/zombie-battleground/","text":"Zombie Battleground Summary Zombie Battleground is a Magic: The Gathering-style collectible card game that stores all of your game assets and data on its own dedicated Plasma DAppChain. Since the cards are stored on the Blockchain as non-fungible (ERC721) tokens, not only can a player prove that they own their cards \u2014 they can even sell or trade them with anyone for actual money. Resources: Website Introducing Zombie Battleground\u200a\u2014\u200aA Collectible Card Game that Runs on the Blockchain (blog post)","title":"Zombie Battleground"},{"location":"built-on-ethereum/games/zombie-battleground/#zombie-battleground","text":"","title":"Zombie Battleground"},{"location":"built-on-ethereum/games/zombie-battleground/#summary","text":"Zombie Battleground is a Magic: The Gathering-style collectible card game that stores all of your game assets and data on its own dedicated Plasma DAppChain. Since the cards are stored on the Blockchain as non-fungible (ERC721) tokens, not only can a player prove that they own their cards \u2014 they can even sell or trade them with anyone for actual money.","title":"Summary"},{"location":"built-on-ethereum/games/zombie-battleground/#resources","text":"Website Introducing Zombie Battleground\u200a\u2014\u200aA Collectible Card Game that Runs on the Blockchain (blog post)","title":"Resources:"},{"location":"built-on-ethereum/governance/aragon/","text":"Aragon Create and manage DAOs. What is Aragon? Aragon is a project that aims to disintermediate the creation and maintenance of organizational structures by using blockchain technology. The project aims to empower people across the world to easily and securely manage their organizations. Aragon provides the tools for anyone to become an entrepreneur and run their own organization, to take control of their own lives. By making it possible for everyone in the world to organize, Aragon enables a borderless, permissionless and more efficient creation of value. Aragon organizations are powered by Ethereum, a global blockchain for running unstoppable applications. In Ethereum, code and applications always run without any possibility of downtime or censorship. The Aragon Network will be the first community governed decentralized organization whose goal is to act as a digital jurisdiction, an online decentralized court system that isn\u2019t bound by traditional artificial barriers such as national jurisdictions or the borders of a single country. The Aragon Network Token, ANT, puts the power into the hands of the people participating in the operation of the Network. Every single aspect of the Network will be governed by those willing to make an effort for a better future. How it works Aragon is most powerful and modular way to build and run DAOs. Use aragonOS, AragonJS and AragonUI. Used by District0x Request Network Spice VC Swarm Fund Auctus Democracy Earth Shasta Althea Resources Website Github App","title":"Aragon"},{"location":"built-on-ethereum/governance/aragon/#aragon","text":"Create and manage DAOs.","title":"Aragon"},{"location":"built-on-ethereum/governance/aragon/#what-is-aragon","text":"Aragon is a project that aims to disintermediate the creation and maintenance of organizational structures by using blockchain technology. The project aims to empower people across the world to easily and securely manage their organizations. Aragon provides the tools for anyone to become an entrepreneur and run their own organization, to take control of their own lives. By making it possible for everyone in the world to organize, Aragon enables a borderless, permissionless and more efficient creation of value. Aragon organizations are powered by Ethereum, a global blockchain for running unstoppable applications. In Ethereum, code and applications always run without any possibility of downtime or censorship. The Aragon Network will be the first community governed decentralized organization whose goal is to act as a digital jurisdiction, an online decentralized court system that isn\u2019t bound by traditional artificial barriers such as national jurisdictions or the borders of a single country. The Aragon Network Token, ANT, puts the power into the hands of the people participating in the operation of the Network. Every single aspect of the Network will be governed by those willing to make an effort for a better future.","title":"What is Aragon?"},{"location":"built-on-ethereum/governance/aragon/#how-it-works","text":"Aragon is most powerful and modular way to build and run DAOs. Use aragonOS, AragonJS and AragonUI.","title":"How it works"},{"location":"built-on-ethereum/governance/aragon/#used-by","text":"District0x Request Network Spice VC Swarm Fund Auctus Democracy Earth Shasta Althea","title":"Used by"},{"location":"built-on-ethereum/governance/aragon/#resources","text":"Website Github App","title":"Resources"},{"location":"built-on-ethereum/governance/colony/","text":"Colony What is Colony? Colony is infrastructure for the future of work: self-organizing companies that run via software, not paperwork. It could be a community project, a company, or a non-profit \u2014 your imagination is the only limit. How does it work? Every colony has its own token. You earn tokens by doing work. The more tokens you hold, the more of the colony you own. Tokens let you stake your ownership on your good judgement when proposing tasks, or claiming someone should be paid. Resources Website Github","title":"Colony"},{"location":"built-on-ethereum/governance/colony/#colony","text":"","title":"Colony"},{"location":"built-on-ethereum/governance/colony/#what-is-colony","text":"Colony is infrastructure for the future of work: self-organizing companies that run via software, not paperwork. It could be a community project, a company, or a non-profit \u2014 your imagination is the only limit.","title":"What is Colony?"},{"location":"built-on-ethereum/governance/colony/#how-does-it-work","text":"Every colony has its own token. You earn tokens by doing work. The more tokens you hold, the more of the colony you own. Tokens let you stake your ownership on your good judgement when proposing tasks, or claiming someone should be paid.","title":"How does it work?"},{"location":"built-on-ethereum/governance/colony/#resources","text":"Website Github","title":"Resources"},{"location":"built-on-ethereum/governance/democracy-earth/","text":"Democracy Earth A borderless peer to peer democracy. For everyone, anywhere. Summary Democracy Earth is building a sovereign, open source and decentralized democratic governance protocol for any kind of organization. Resources Website Github App","title":"Democracy Earth"},{"location":"built-on-ethereum/governance/democracy-earth/#democracy-earth","text":"A borderless peer to peer democracy. For everyone, anywhere.","title":"Democracy Earth"},{"location":"built-on-ethereum/governance/democracy-earth/#summary","text":"Democracy Earth is building a sovereign, open source and decentralized democratic governance protocol for any kind of organization.","title":"Summary"},{"location":"built-on-ethereum/governance/democracy-earth/#resources","text":"Website Github App","title":"Resources"},{"location":"built-on-ethereum/governance/govblocks/","text":"GovBlocks What is GovBlocks? GovBlocks is an open, permissionless decision protocol that empowers dApps to define and operate any governance model at scale. How does it work? GovBlocks make use of smart contracts to deploy modular governance for your DAO, enterprise, communities or any off-chain business. Configure stakeholders, workflows, voting layers, rewards, quorum levels - virtually all components of your governance model to suit the evolving needs. All the web browser. Resources Website Github App","title":"Govblocks"},{"location":"built-on-ethereum/governance/govblocks/#govblocks","text":"","title":"GovBlocks"},{"location":"built-on-ethereum/governance/govblocks/#what-is-govblocks","text":"GovBlocks is an open, permissionless decision protocol that empowers dApps to define and operate any governance model at scale.","title":"What is GovBlocks?"},{"location":"built-on-ethereum/governance/govblocks/#how-does-it-work","text":"GovBlocks make use of smart contracts to deploy modular governance for your DAO, enterprise, communities or any off-chain business. Configure stakeholders, workflows, voting layers, rewards, quorum levels - virtually all components of your governance model to suit the evolving needs. All the web browser.","title":"How does it work?"},{"location":"built-on-ethereum/governance/govblocks/#resources","text":"Website Github App","title":"Resources"},{"location":"built-on-ethereum/identity/ERC725/","text":"ERC-725 - Ethereum Identity Standard What is ERC 725? ERC 725 is a proposed standard for blockchain-based identity authored by Fabian Vogelsteller, creator of ERC 20 and Web3.js. ERC 725 describes proxy smart contracts that can be controlled by multiple keys and other smart contracts. ERC 735 is an associated standard to add and remove claims to an ERC 725 identity smart contract. These identity smart contracts can describe humans, groups, objects, and machines. ERC 725 lives on the Ethereum blockchain. Why ERC 725? ERC 725 allows for self-sovereign identity. Users should be able to own and manage their identity instead of ceding ownership of identity to centralized organizations. We have seen the negative effects of having centralized identity with damaging leaks and unfair selling of user data and identity. An open, portable standard for identities will enable decentralized reputation, governance, and more. Users will be able to take their identity across different Dapps and platforms that support this standard. Resources Website Github","title":"ERC725"},{"location":"built-on-ethereum/identity/ERC725/#erc-725-ethereum-identity-standard","text":"","title":"ERC-725 - Ethereum Identity Standard"},{"location":"built-on-ethereum/identity/ERC725/#what-is-erc-725","text":"ERC 725 is a proposed standard for blockchain-based identity authored by Fabian Vogelsteller, creator of ERC 20 and Web3.js. ERC 725 describes proxy smart contracts that can be controlled by multiple keys and other smart contracts. ERC 735 is an associated standard to add and remove claims to an ERC 725 identity smart contract. These identity smart contracts can describe humans, groups, objects, and machines. ERC 725 lives on the Ethereum blockchain.","title":"What is ERC 725?"},{"location":"built-on-ethereum/identity/ERC725/#why-erc-725","text":"ERC 725 allows for self-sovereign identity. Users should be able to own and manage their identity instead of ceding ownership of identity to centralized organizations. We have seen the negative effects of having centralized identity with damaging leaks and unfair selling of user data and identity. An open, portable standard for identities will enable decentralized reputation, governance, and more. Users will be able to take their identity across different Dapps and platforms that support this standard.","title":"Why ERC 725?"},{"location":"built-on-ethereum/identity/ERC725/#resources","text":"Website Github","title":"Resources"},{"location":"built-on-ethereum/identity/bloom/","text":"Bloom Summary Bloom is a set of products designed to facilitate lending and borrowing on a global scale. Credit products are unavailable for many people, and those who have access to it have their credit data siloed, which makes it less useful. The idea behind Bloom is to make credit data global and interoperable, and loans \u2014 available to everyone. Not only users can share their reputation across countries and banks, but they can also share their creditworthiness with peers. The protocol consists of three components: ID, IQ, and Score. BloomID is an identity attestation protocol. BloomIQ is a registry of given loans. BloomScore is a credit scoring system. Resources Website","title":"Bloom"},{"location":"built-on-ethereum/identity/bloom/#bloom","text":"","title":"Bloom"},{"location":"built-on-ethereum/identity/bloom/#summary","text":"Bloom is a set of products designed to facilitate lending and borrowing on a global scale. Credit products are unavailable for many people, and those who have access to it have their credit data siloed, which makes it less useful. The idea behind Bloom is to make credit data global and interoperable, and loans \u2014 available to everyone. Not only users can share their reputation across countries and banks, but they can also share their creditworthiness with peers. The protocol consists of three components: ID, IQ, and Score. BloomID is an identity attestation protocol. BloomIQ is a registry of given loans. BloomScore is a credit scoring system.","title":"Summary"},{"location":"built-on-ethereum/identity/bloom/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/identity/civic/","text":"Civic Civic allows people to control the use of their identity information. Civic uses blockchain identity verification technology to secure and protect personal information transfer. Products Secure Identity Platform Civic\u2019s Secure Identity Platform (SIP) uses a verified identity for multi-factor authentication on web and mobile apps without the need for usernames or passwords. Civic Reusable KYC Add blockchain-enabled KYC to businesses and services that require user identification. Decentralized, reusable KYC improves security, on-boarding and every day use. Resources Website","title":"Civic"},{"location":"built-on-ethereum/identity/civic/#civic","text":"Civic allows people to control the use of their identity information. Civic uses blockchain identity verification technology to secure and protect personal information transfer.","title":"Civic"},{"location":"built-on-ethereum/identity/civic/#products","text":"","title":"Products"},{"location":"built-on-ethereum/identity/civic/#secure-identity-platform","text":"Civic\u2019s Secure Identity Platform (SIP) uses a verified identity for multi-factor authentication on web and mobile apps without the need for usernames or passwords.","title":"Secure Identity Platform"},{"location":"built-on-ethereum/identity/civic/#civic-reusable-kyc","text":"Add blockchain-enabled KYC to businesses and services that require user identification. Decentralized, reusable KYC improves security, on-boarding and every day use.","title":"Civic Reusable KYC"},{"location":"built-on-ethereum/identity/civic/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/identity/identity-on-ethereum/","text":"Identity Summary The Ethereum network hosts many DApps that are building identity systems. These DApps leverage the secure and decentralized nature of the Ethereum network often in collaboration with decentralized storage protocols such as IPFS or SWARM to enable empower and protect consumers' information. Citizens will be able to confidentionally reveal personal information such as Gov. ID, credit score, medical history, banking information, etc. to others in a way that also allows them to revoke future access to such information. Potential use by Governments Similar to uPort's identity trials in Zug, Switzerland. We may see a day where soverign countries rely on the Ethereum mainnet to support their own private or public digital identification protocols. Resources The Impact of Digital Identity","title":"Identity on Ethereum"},{"location":"built-on-ethereum/identity/identity-on-ethereum/#identity","text":"","title":"Identity"},{"location":"built-on-ethereum/identity/identity-on-ethereum/#summary","text":"The Ethereum network hosts many DApps that are building identity systems. These DApps leverage the secure and decentralized nature of the Ethereum network often in collaboration with decentralized storage protocols such as IPFS or SWARM to enable empower and protect consumers' information. Citizens will be able to confidentionally reveal personal information such as Gov. ID, credit score, medical history, banking information, etc. to others in a way that also allows them to revoke future access to such information.","title":"Summary"},{"location":"built-on-ethereum/identity/identity-on-ethereum/#potential-use-by-governments","text":"Similar to uPort's identity trials in Zug, Switzerland. We may see a day where soverign countries rely on the Ethereum mainnet to support their own private or public digital identification protocols.","title":"Potential use by Governments"},{"location":"built-on-ethereum/identity/identity-on-ethereum/#resources","text":"The Impact of Digital Identity","title":"Resources"},{"location":"built-on-ethereum/identity/jolocom/","text":"Jolocom Summary The Jolocom identity solution aims to be a universal, lightweight, open source protocol for decentralized digital identity and access right management. The protocol is built on to leading open source standards standards and relies on distributed / decentralized systems such as Ethereum and IPFS for identity registration and resolution. Resources Website Github Docs","title":"Jolocom"},{"location":"built-on-ethereum/identity/jolocom/#jolocom","text":"","title":"Jolocom"},{"location":"built-on-ethereum/identity/jolocom/#summary","text":"The Jolocom identity solution aims to be a universal, lightweight, open source protocol for decentralized digital identity and access right management. The protocol is built on to leading open source standards standards and relies on distributed / decentralized systems such as Ethereum and IPFS for identity registration and resolution.","title":"Summary"},{"location":"built-on-ethereum/identity/jolocom/#resources","text":"Website Github Docs","title":"Resources"},{"location":"built-on-ethereum/identity/selfkey/","text":"Selfkey Summary SelfKey is a blockchain based self-sovereign identity system that allows individuals and companies to truly own, control and manage their digital identity, securely manage their cryptocurrency portfolio and instantly onboard onto financial, immigration and cryptocurrency services. Resources Website","title":"Selfkey"},{"location":"built-on-ethereum/identity/selfkey/#selfkey","text":"","title":"Selfkey"},{"location":"built-on-ethereum/identity/selfkey/#summary","text":"SelfKey is a blockchain based self-sovereign identity system that allows individuals and companies to truly own, control and manage their digital identity, securely manage their cryptocurrency portfolio and instantly onboard onto financial, immigration and cryptocurrency services.","title":"Summary"},{"location":"built-on-ethereum/identity/selfkey/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/identity/uport/","text":"uPort Open Identity System for the Decentralized Web uPort returns ownership of identity to the individual. uPort's open identity system allows users to register their own identity on Ethereum, send and request credentials, sign transactions, and securely manage keys data. Protocols uPort consists of identity and messaging protocols that together form an interoperable identity layer for the decentralized web. Credentials uPort is building a shared identity web of trust. Your app can request access to the set of credentials a user has collected from the network. Users can always choose what to share. Products Tools uPort is modular open-source components, developer tools, and mobile clients help you connect with your users. uPort help make it simple to build on Ethereum. Resources Website Github","title":"uPort"},{"location":"built-on-ethereum/identity/uport/#uport","text":"","title":"uPort"},{"location":"built-on-ethereum/identity/uport/#open-identity-system-for-the-decentralized-web","text":"uPort returns ownership of identity to the individual. uPort's open identity system allows users to register their own identity on Ethereum, send and request credentials, sign transactions, and securely manage keys data.","title":"Open Identity System for the Decentralized Web"},{"location":"built-on-ethereum/identity/uport/#protocols","text":"uPort consists of identity and messaging protocols that together form an interoperable identity layer for the decentralized web.","title":"Protocols"},{"location":"built-on-ethereum/identity/uport/#credentials","text":"uPort is building a shared identity web of trust. Your app can request access to the set of credentials a user has collected from the network. Users can always choose what to share.","title":"Credentials"},{"location":"built-on-ethereum/identity/uport/#products-tools","text":"uPort is modular open-source components, developer tools, and mobile clients help you connect with your users. uPort help make it simple to build on Ethereum.","title":"Products &amp; Tools"},{"location":"built-on-ethereum/identity/uport/#resources","text":"Website Github","title":"Resources"},{"location":"built-on-ethereum/infrastructure/0xcert/","text":"0xcert Description 0xcert is a protocol for attesting and validating issuers of non-fungible tokens. There are many different protocols, applications, and companies trying to bring real-world assets and certifications to the blockchain. Yet, there is no clear consensus on how to validate the legitimacy of the minted tokens. For example, there\u2019s no way to ensure that the issuer has a right to mint identity tokens on Ethereum. As public blockchains are permissionless, anyone can create such tokens, yet only tokens created by a legit identity provider will be valuable. 0xcert creates a standard for certified non-fungible tokens, Xcerts. Developers can interact with this standard via an SDK and high-level APIs. Additionally, 0xcert is going to create a decentralized registry of authentic issuers. Important links Website: https://0xcert.org Github: https://github.com/0xcert Whitepaper: https://0xcert.org/whitepaper.pdf","title":"0xcert"},{"location":"built-on-ethereum/infrastructure/0xcert/#0xcert","text":"","title":"0xcert"},{"location":"built-on-ethereum/infrastructure/0xcert/#description","text":"0xcert is a protocol for attesting and validating issuers of non-fungible tokens. There are many different protocols, applications, and companies trying to bring real-world assets and certifications to the blockchain. Yet, there is no clear consensus on how to validate the legitimacy of the minted tokens. For example, there\u2019s no way to ensure that the issuer has a right to mint identity tokens on Ethereum. As public blockchains are permissionless, anyone can create such tokens, yet only tokens created by a legit identity provider will be valuable. 0xcert creates a standard for certified non-fungible tokens, Xcerts. Developers can interact with this standard via an SDK and high-level APIs. Additionally, 0xcert is going to create a decentralized registry of authentic issuers.","title":"Description"},{"location":"built-on-ethereum/infrastructure/0xcert/#important-links","text":"Website: https://0xcert.org Github: https://github.com/0xcert Whitepaper: https://0xcert.org/whitepaper.pdf","title":"Important links"},{"location":"built-on-ethereum/infrastructure/aztec-protocol/","text":"Aztec Protocol The AZTEC protocol is a second-layer solutions that uses zero-knowledge proofs and confidential transactions to enable confidential transactions for any generic digital asset on Ethereum, including existing assets. The AZTEC protocol supports a stealth address protocol that can be used to obfuscate the link between a note 'owner' and any on-chain identity. The first contract built for the Aztec Protocol is for MakerDao's DAI token. Important Links Website: https://www.aztecprotocol.com Github: https://github.com/AztecProtocol Whitepaper: https://github.com/AztecProtocol/AZTEC/blob/master/AZTEC.pdf Aztec DAI contract: https://etherscan.io/address/0x6c8b12c650594a9fdb0b1f52084bbd0d9010aa09","title":"Aztec Protocol"},{"location":"built-on-ethereum/infrastructure/aztec-protocol/#aztec-protocol","text":"The AZTEC protocol is a second-layer solutions that uses zero-knowledge proofs and confidential transactions to enable confidential transactions for any generic digital asset on Ethereum, including existing assets. The AZTEC protocol supports a stealth address protocol that can be used to obfuscate the link between a note 'owner' and any on-chain identity. The first contract built for the Aztec Protocol is for MakerDao's DAI token.","title":"Aztec Protocol"},{"location":"built-on-ethereum/infrastructure/aztec-protocol/#important-links","text":"Website: https://www.aztecprotocol.com Github: https://github.com/AztecProtocol Whitepaper: https://github.com/AztecProtocol/AZTEC/blob/master/AZTEC.pdf Aztec DAI contract: https://etherscan.io/address/0x6c8b12c650594a9fdb0b1f52084bbd0d9010aa09","title":"Important Links"},{"location":"built-on-ethereum/infrastructure/bountiesnetwork/","text":"Bounties Network Description Bounties Network is a general-purpose bounty protocol. Bounty creators can incentivize work by offering ether or tokens in exchange for getting a task completed. The funds are locked into escrow and released to the worker on successful submission. Other projects can use the protocol to build marketplaces for specific kind of tasks. For example, Gitcoin uses Bounties Network to incentivize open source contributions. Important links Website: https://bounties.network Github: https://github.com/Bounties-Network","title":"Bounties Network"},{"location":"built-on-ethereum/infrastructure/bountiesnetwork/#bounties-network","text":"","title":"Bounties Network"},{"location":"built-on-ethereum/infrastructure/bountiesnetwork/#description","text":"Bounties Network is a general-purpose bounty protocol. Bounty creators can incentivize work by offering ether or tokens in exchange for getting a task completed. The funds are locked into escrow and released to the worker on successful submission. Other projects can use the protocol to build marketplaces for specific kind of tasks. For example, Gitcoin uses Bounties Network to incentivize open source contributions.","title":"Description"},{"location":"built-on-ethereum/infrastructure/bountiesnetwork/#important-links","text":"Website: https://bounties.network Github: https://github.com/Bounties-Network","title":"Important links"},{"location":"built-on-ethereum/infrastructure/ethereum-alarm-clock/","text":"Ethereum Alarm Clock Description Ethereum Alarm Clock (EAC) is a protocol for scheduled Ethereum transactions. The protocol defines financial incentives for miners to include a transaction at a specified time. A user that wants to create a transaction which needs to be executed in the future can use EAC. To do so, he needs to specify a receiver (whether it\u2019s an account or contract) as well as call data. He also needs to specify at which time the transaction should be executed by defining the start time and window size. Finally, a user needs to specify how big a miner reward will be. The execution of the transaction is not guaranteed due to possible network congestion, but setting a higher gas price and longer time window increases the chances of successful execution. All EAC transactions are processed by TimeNode miners. These miners set up clients to track the transactions and execute them in a specified time. By doing so, they are eligible to claim a reward set up by the sender. Important links Website: https://www.ethereum-alarm-clock.com Github: https://github.com/ethereum-alarm-clock ChronoLogic: https://chronologic.network","title":"Ethereum Alarm Clock"},{"location":"built-on-ethereum/infrastructure/ethereum-alarm-clock/#ethereum-alarm-clock","text":"","title":"Ethereum Alarm Clock"},{"location":"built-on-ethereum/infrastructure/ethereum-alarm-clock/#description","text":"Ethereum Alarm Clock (EAC) is a protocol for scheduled Ethereum transactions. The protocol defines financial incentives for miners to include a transaction at a specified time. A user that wants to create a transaction which needs to be executed in the future can use EAC. To do so, he needs to specify a receiver (whether it\u2019s an account or contract) as well as call data. He also needs to specify at which time the transaction should be executed by defining the start time and window size. Finally, a user needs to specify how big a miner reward will be. The execution of the transaction is not guaranteed due to possible network congestion, but setting a higher gas price and longer time window increases the chances of successful execution. All EAC transactions are processed by TimeNode miners. These miners set up clients to track the transactions and execute them in a specified time. By doing so, they are eligible to claim a reward set up by the sender.","title":"Description"},{"location":"built-on-ethereum/infrastructure/ethereum-alarm-clock/#important-links","text":"Website: https://www.ethereum-alarm-clock.com Github: https://github.com/ethereum-alarm-clock ChronoLogic: https://chronologic.network","title":"Important links"},{"location":"built-on-ethereum/infrastructure/ethereum-name-service/","text":"Ethereum Name Service (ENS) Description Ethereum Name Service (ENS) is a decentralized domain name provider. It allows anyone to buy and manage .eth domains without relying on a centralized domain registrar. The owner of a domain can map it to any string value. One example is creating a human-readable name for his Ethereum wallet by resolving a personal domain to it. The owner can also create and manage subdomains. Each domain has an owner, resolver, and time-to-live record and is stored in the ENS registry. Resolvers are smart contracts that can provide any information about given domain. Owner of the domain can choose a resolver and transfer the ownership of the domain as well as its subdomains. Domains are purchased via blind auction. During the bidding period, bids are placed without revealing their amount. Then, bidders reveal them. The bidder with the highest revealed bid wins and becomes the owner of the domain. Important links Website: https://ens.domains Github: https://github.com/ensdomains MyCrypto ENS Registrar: https://www.mycrypto.com/ens","title":"Ethereum Name Service"},{"location":"built-on-ethereum/infrastructure/ethereum-name-service/#ethereum-name-service-40ens41","text":"","title":"Ethereum Name Service (ENS)"},{"location":"built-on-ethereum/infrastructure/ethereum-name-service/#description","text":"Ethereum Name Service (ENS) is a decentralized domain name provider. It allows anyone to buy and manage .eth domains without relying on a centralized domain registrar. The owner of a domain can map it to any string value. One example is creating a human-readable name for his Ethereum wallet by resolving a personal domain to it. The owner can also create and manage subdomains. Each domain has an owner, resolver, and time-to-live record and is stored in the ENS registry. Resolvers are smart contracts that can provide any information about given domain. Owner of the domain can choose a resolver and transfer the ownership of the domain as well as its subdomains. Domains are purchased via blind auction. During the bidding period, bids are placed without revealing their amount. Then, bidders reveal them. The bidder with the highest revealed bid wins and becomes the owner of the domain.","title":"Description"},{"location":"built-on-ethereum/infrastructure/ethereum-name-service/#important-links","text":"Website: https://ens.domains Github: https://github.com/ensdomains MyCrypto ENS Registrar: https://www.mycrypto.com/ens","title":"Important links"},{"location":"built-on-ethereum/infrastructure/ethlance/","text":"Ethlance Description Ethlance is a freelance platform. The listings include required skills, pricing, and the description of what needs to be done. Payments are made in ether. Ethlance doesn\u2019t hold any funds, as all payments are peer to peer and feeless. All listings are stored on Ethereum and IPFS, thus anyone can access them. Ethlance also supports job sponsorships. If the creator opted into sponsorship during listing creation, anyone will be able to chip in to pay for it. Collected funds will be used to pay the freelancer who will complete the task and unused funds are returned to contributors. Therefore, it\u2019s possible to crowdfund \u201cpublic good\u201d tasks. Important links Website: https://ethlance.com Github: https://github.com/district0x/ethlance","title":"Ethlance"},{"location":"built-on-ethereum/infrastructure/ethlance/#ethlance","text":"","title":"Ethlance"},{"location":"built-on-ethereum/infrastructure/ethlance/#description","text":"Ethlance is a freelance platform. The listings include required skills, pricing, and the description of what needs to be done. Payments are made in ether. Ethlance doesn\u2019t hold any funds, as all payments are peer to peer and feeless. All listings are stored on Ethereum and IPFS, thus anyone can access them. Ethlance also supports job sponsorships. If the creator opted into sponsorship during listing creation, anyone will be able to chip in to pay for it. Collected funds will be used to pay the freelancer who will complete the task and unused funds are returned to contributors. Therefore, it\u2019s possible to crowdfund \u201cpublic good\u201d tasks.","title":"Description"},{"location":"built-on-ethereum/infrastructure/ethlance/#important-links","text":"Website: https://ethlance.com Github: https://github.com/district0x/ethlance","title":"Important links"},{"location":"built-on-ethereum/infrastructure/foam-protocol/","text":"FOAM Protocol Summary FOAM is an open protocol for decentralized, geospatial data markets. The protocol is designed to empower users to build a consensus-driven map of the world that can be trusted for every application. As technology evolves and changes, maps need to change too. FOAM secures physical space on the blockchain, harnessing the power of Ethereum with a cryptographic software utility token used to provide computational work and verification to the network. The component elements of the FOAM protocol are designed to provide spatial protocols, standards and applications that bring geospatial data to blockchains and empower a consensus-driven map of the world. Token mechanisms and cryptoeconomics underpin the elements of FOAM and empower the distributed users to coordinate and interact in a decentralized and permissionless fashion. Resources Website: https://www.foam.space Github: https://github.com/f-o-a-m/ Whitepaper: https://www.foam.space/publicAssets/FOAM_Whitepaper.pdf","title":"FOAM Protocol"},{"location":"built-on-ethereum/infrastructure/foam-protocol/#foam-protocol","text":"","title":"FOAM Protocol"},{"location":"built-on-ethereum/infrastructure/foam-protocol/#summary","text":"FOAM is an open protocol for decentralized, geospatial data markets. The protocol is designed to empower users to build a consensus-driven map of the world that can be trusted for every application. As technology evolves and changes, maps need to change too. FOAM secures physical space on the blockchain, harnessing the power of Ethereum with a cryptographic software utility token used to provide computational work and verification to the network. The component elements of the FOAM protocol are designed to provide spatial protocols, standards and applications that bring geospatial data to blockchains and empower a consensus-driven map of the world. Token mechanisms and cryptoeconomics underpin the elements of FOAM and empower the distributed users to coordinate and interact in a decentralized and permissionless fashion.","title":"Summary"},{"location":"built-on-ethereum/infrastructure/foam-protocol/#resources","text":"Website: https://www.foam.space Github: https://github.com/f-o-a-m/ Whitepaper: https://www.foam.space/publicAssets/FOAM_Whitepaper.pdf","title":"Resources"},{"location":"built-on-ethereum/infrastructure/golem/","text":"Golem Description Golem is a decentralized computing marketplace. There are three groups of users in Golem: providers, requestors, and developers. Providers offer hardware, equestors rent the hardware and developers create applications on top of the platform. All three groups of users are free to set any price which forms a free market for hardware renting and cloud computing. Anyone can publish his application on the Golem platform. While all applications run on the virtual machines and can\u2019t access the host machine, it is possible to write malicious code which will use various hacks and vulnerabilities to get access to the host machine. It can lead to serious problems for hardware providers. Golem plans to mitigate that risk by maintaining an Application Registry. The Application Registry is a user-curated list of secure and malicious software. Developers submit their apps to the registry and then curators evaluate the security of applications by adding new apps to either the whitelist or blacklist. Providers, in turn, can choose which curators they trust by picking from the lists. They can also manage their own whitelists and blacklists. The hardware of the providers will be used only to run the whitelisted software or everything except blacklisted apps, depending on their preferences. To ease user onboarding, Golem will create a default whitelist of trusted apps which providers can use as a starting point. Important links Website: https://golem.network Github: https://github.com/golemfactory Whitepaper: https://golem.network/crowdfunding/Golemwhitepaper.pdf","title":"Golem"},{"location":"built-on-ethereum/infrastructure/golem/#golem","text":"","title":"Golem"},{"location":"built-on-ethereum/infrastructure/golem/#description","text":"Golem is a decentralized computing marketplace. There are three groups of users in Golem: providers, requestors, and developers. Providers offer hardware, equestors rent the hardware and developers create applications on top of the platform. All three groups of users are free to set any price which forms a free market for hardware renting and cloud computing. Anyone can publish his application on the Golem platform. While all applications run on the virtual machines and can\u2019t access the host machine, it is possible to write malicious code which will use various hacks and vulnerabilities to get access to the host machine. It can lead to serious problems for hardware providers. Golem plans to mitigate that risk by maintaining an Application Registry. The Application Registry is a user-curated list of secure and malicious software. Developers submit their apps to the registry and then curators evaluate the security of applications by adding new apps to either the whitelist or blacklist. Providers, in turn, can choose which curators they trust by picking from the lists. They can also manage their own whitelists and blacklists. The hardware of the providers will be used only to run the whitelisted software or everything except blacklisted apps, depending on their preferences. To ease user onboarding, Golem will create a default whitelist of trusted apps which providers can use as a starting point.","title":"Description"},{"location":"built-on-ethereum/infrastructure/golem/#important-links","text":"Website: https://golem.network Github: https://github.com/golemfactory Whitepaper: https://golem.network/crowdfunding/Golemwhitepaper.pdf","title":"Important links"},{"location":"built-on-ethereum/infrastructure/poa-network/","text":"POA Network About Governance At its core, on-chain governance is a group of individuals coming together to make decisions on the blockchain. POA Network remains transparent by using US public notaries, known as validators, to govern the network. xDai xDai Chain is an Ethereum-based blockchain that uses USD-stable XDAI (a representation of DAI token) as the native coin of the network. xDai Chain is a fast and cost-efficient blockchain solution that leverages the Proof-of-Authority consensus model. xDai Burner Wallet Developer Austin Griffith built an easy burner wallet that uses POA's xDai chain for those quick everyday payments like pizza or beer. The burner wallet is automatically generated upon visiting https://xdai.io and your private key is stored in a cookie so it will be there when you come back. However, you should sweep any value you hold to a cold wallet regularly and burn your ephemeral private key. A burner wallet is analogous to cash; you won't carry too much because it can be lost but it's astonishingly easy to exchange. Here is a video explaining the app: https://youtu.be/KkOyrEvYqO8 Important Links Website: https://poa.network/ Twitter: https://twitter.com/poanetwork Medium: https://medium.com/poa-network Forum: https://forum.poa.network/ Reddit: https://reddit.com/r/poa Github: https://github.com/poanetwork/ Governance: https://poa.network/governance Validators: https://validators.poa.network/ xDai Chain: https://poa.network/xdai Burner Wallet github: https://github.com/austintgriffith/burner-wallet/ Burner Wallet app: https://xdai.io/ Token Bridge github: https://github.com/poanetwork/token-bridge","title":"POA Network"},{"location":"built-on-ethereum/infrastructure/poa-network/#poa-network","text":"","title":"POA Network"},{"location":"built-on-ethereum/infrastructure/poa-network/#about","text":"","title":"About"},{"location":"built-on-ethereum/infrastructure/poa-network/#governance","text":"At its core, on-chain governance is a group of individuals coming together to make decisions on the blockchain. POA Network remains transparent by using US public notaries, known as validators, to govern the network.","title":"Governance"},{"location":"built-on-ethereum/infrastructure/poa-network/#xdai","text":"xDai Chain is an Ethereum-based blockchain that uses USD-stable XDAI (a representation of DAI token) as the native coin of the network. xDai Chain is a fast and cost-efficient blockchain solution that leverages the Proof-of-Authority consensus model.","title":"xDai"},{"location":"built-on-ethereum/infrastructure/poa-network/#xdai-burner-wallet","text":"Developer Austin Griffith built an easy burner wallet that uses POA's xDai chain for those quick everyday payments like pizza or beer. The burner wallet is automatically generated upon visiting https://xdai.io and your private key is stored in a cookie so it will be there when you come back. However, you should sweep any value you hold to a cold wallet regularly and burn your ephemeral private key. A burner wallet is analogous to cash; you won't carry too much because it can be lost but it's astonishingly easy to exchange. Here is a video explaining the app: https://youtu.be/KkOyrEvYqO8","title":"xDai Burner Wallet"},{"location":"built-on-ethereum/infrastructure/poa-network/#important-links","text":"Website: https://poa.network/ Twitter: https://twitter.com/poanetwork Medium: https://medium.com/poa-network Forum: https://forum.poa.network/ Reddit: https://reddit.com/r/poa Github: https://github.com/poanetwork/ Governance: https://poa.network/governance Validators: https://validators.poa.network/ xDai Chain: https://poa.network/xdai Burner Wallet github: https://github.com/austintgriffith/burner-wallet/ Burner Wallet app: https://xdai.io/ Token Bridge github: https://github.com/poanetwork/token-bridge","title":"Important Links"},{"location":"built-on-ethereum/infrastructure/streamr/","text":"Streamr Streamr is creating an open source platform for the free and fair exchange of the world\u2019s realtime data. What is the Streamr Network? The Streamr Network is a scalable realtime messaging system, which enables applications and devices such as IoT sensors, connected cars, and basically all \u201csmart\u201d gadgets to make available the data they are producing, as well as listen to incoming data from other applications and devices. The Network employs the publish/subscribe pattern. Messages produced to a stream (sometimes called a topic) get delivered to all subscribers listening on that stream in realtime. It\u2019s a bit like an instant messenger for machines, which \u2014 in IM lingo \u2014 supports \u201cgroup chats\u201d (many-to-many), \u201cchannels\u201d (one-to-many), as well as \u201cprivate\u201d (one-to-one) messaging patterns. Such a publish/subscribe network has the following properties for application developers: Data producers simply \u201cfire and forget\u201d. No need to set up APIs, data silos, or open ports that could compromise security. Just send new data points to the Network and you\u2019re done. This makes integration very easy. Data consumers simply listen. They don\u2019t need to know where the data sources are, which IP address to reach them on, or how to interface with them. They don\u2019t need to open server ports either. They just connect to the network, subscribe to what they need, and react to incoming messages. Resources: Website: https://www.streamr.com Github: https://github.com/streamr-dev Whitepaper: https://s3.amazonaws.com/streamr-public/streamr-whitepaper-2017-07-25-v1_0-facelift.pdf What is Streamr?: https://medium.com/streamrblog/building-the-missing-protocol-of-todays-internet-stack-a-decentralized-pub-sub-network-for-ad1f5972f3ca","title":"Streamr"},{"location":"built-on-ethereum/infrastructure/streamr/#streamr","text":"Streamr is creating an open source platform for the free and fair exchange of the world\u2019s realtime data.","title":"Streamr"},{"location":"built-on-ethereum/infrastructure/streamr/#what-is-the-streamr-network","text":"The Streamr Network is a scalable realtime messaging system, which enables applications and devices such as IoT sensors, connected cars, and basically all \u201csmart\u201d gadgets to make available the data they are producing, as well as listen to incoming data from other applications and devices. The Network employs the publish/subscribe pattern. Messages produced to a stream (sometimes called a topic) get delivered to all subscribers listening on that stream in realtime. It\u2019s a bit like an instant messenger for machines, which \u2014 in IM lingo \u2014 supports \u201cgroup chats\u201d (many-to-many), \u201cchannels\u201d (one-to-many), as well as \u201cprivate\u201d (one-to-one) messaging patterns. Such a publish/subscribe network has the following properties for application developers: Data producers simply \u201cfire and forget\u201d. No need to set up APIs, data silos, or open ports that could compromise security. Just send new data points to the Network and you\u2019re done. This makes integration very easy. Data consumers simply listen. They don\u2019t need to know where the data sources are, which IP address to reach them on, or how to interface with them. They don\u2019t need to open server ports either. They just connect to the network, subscribe to what they need, and react to incoming messages.","title":"What is the Streamr Network?"},{"location":"built-on-ethereum/infrastructure/streamr/#resources","text":"Website: https://www.streamr.com Github: https://github.com/streamr-dev Whitepaper: https://s3.amazonaws.com/streamr-public/streamr-whitepaper-2017-07-25-v1_0-facelift.pdf What is Streamr?: https://medium.com/streamrblog/building-the-missing-protocol-of-todays-internet-stack-a-decentralized-pub-sub-network-for-ad1f5972f3ca","title":"Resources:"},{"location":"built-on-ethereum/marketplaces/district0x/","text":"district0x Summary The district0x network is a collective of decentralized marketplaces and communities known as \u2018Districts\u2019. Districts exist on top of a modular framework of Ethereum smart contracts and frontend libraries referred to as d0xINFRA. d0xINFRA d0xINFRA is a standard open source framework comprised of Ethereum smart contracts and front-end libraries. With the development of Name Bazaar and Meme Factory, the district0x team is building the initial iteration of d0xINFRA, which will allow other development teams to launch their very own district. d0xINFRA utilizes the 0x Protocol which allows districts to tap into its liquidity pool. Districts Districts are the decentralized community marketplaces that utilize the d0xINFRA framework. They are managed by a governance layer provided by the Aragon network, operating through Ethereum smart contracts and our standardized front-end libraries (d0xINFRA). district0x Network Token (DNT) The district0x Network Token is an Ethereum-based token built using the ERC20 standard. This token was created to facilitate participation and coordination in the development of the district0x Network, and eventually the handoff of network governance to the community. Prominent Districts Ethlance Name Bazaar Dencentraland Spankchain's Red Light District Meme Factory Resources Website Github","title":"District0x"},{"location":"built-on-ethereum/marketplaces/district0x/#district0x","text":"","title":"district0x"},{"location":"built-on-ethereum/marketplaces/district0x/#summary","text":"The district0x network is a collective of decentralized marketplaces and communities known as \u2018Districts\u2019. Districts exist on top of a modular framework of Ethereum smart contracts and frontend libraries referred to as d0xINFRA.","title":"Summary"},{"location":"built-on-ethereum/marketplaces/district0x/#d0xinfra","text":"d0xINFRA is a standard open source framework comprised of Ethereum smart contracts and front-end libraries. With the development of Name Bazaar and Meme Factory, the district0x team is building the initial iteration of d0xINFRA, which will allow other development teams to launch their very own district. d0xINFRA utilizes the 0x Protocol which allows districts to tap into its liquidity pool.","title":"d0xINFRA"},{"location":"built-on-ethereum/marketplaces/district0x/#districts","text":"Districts are the decentralized community marketplaces that utilize the d0xINFRA framework. They are managed by a governance layer provided by the Aragon network, operating through Ethereum smart contracts and our standardized front-end libraries (d0xINFRA).","title":"Districts"},{"location":"built-on-ethereum/marketplaces/district0x/#district0x-network-token-40dnt41","text":"The district0x Network Token is an Ethereum-based token built using the ERC20 standard. This token was created to facilitate participation and coordination in the development of the district0x Network, and eventually the handoff of network governance to the community.","title":"district0x Network Token (DNT)"},{"location":"built-on-ethereum/marketplaces/district0x/#prominent-districts","text":"Ethlance Name Bazaar Dencentraland Spankchain's Red Light District Meme Factory","title":"Prominent Districts"},{"location":"built-on-ethereum/marketplaces/district0x/#resources","text":"Website Github","title":"Resources"},{"location":"built-on-ethereum/marketplaces/opensea/","text":"OpenSea Summary OpenSea is a marketplace for crypto collectibles that is backed by Coinbase Ventures. Resources Website Twitter","title":"Opensea"},{"location":"built-on-ethereum/marketplaces/opensea/#opensea","text":"","title":"OpenSea"},{"location":"built-on-ethereum/marketplaces/opensea/#summary","text":"OpenSea is a marketplace for crypto collectibles that is backed by Coinbase Ventures.","title":"Summary"},{"location":"built-on-ethereum/marketplaces/opensea/#resources","text":"Website Twitter","title":"Resources"},{"location":"built-on-ethereum/marketplaces/origin-protocol/","text":"Origin Protocol Summary Origin Protocol provides infrastructure for a general-purpose marketplace. Users can create offers and put them onto the Ethereum blockchain. Listings data is stored on IPFS, while the metadata is stored on Ethereum. Origin Protocol doesn\u2019t impose any listing fees, essentially making it a totally free marketplace. Listing data is available for anyone to access and interact with. Therefore, it is an open protocol that anyone can build on. For example, one can create a specialized marketplace by pulling listings related to a specific topic. Resources Website","title":"Origin Protocol"},{"location":"built-on-ethereum/marketplaces/origin-protocol/#origin-protocol","text":"","title":"Origin Protocol"},{"location":"built-on-ethereum/marketplaces/origin-protocol/#summary","text":"Origin Protocol provides infrastructure for a general-purpose marketplace. Users can create offers and put them onto the Ethereum blockchain. Listings data is stored on IPFS, while the metadata is stored on Ethereum. Origin Protocol doesn\u2019t impose any listing fees, essentially making it a totally free marketplace. Listing data is available for anyone to access and interact with. Therefore, it is an open protocol that anyone can build on. For example, one can create a specialized marketplace by pulling listings related to a specific topic.","title":"Summary"},{"location":"built-on-ethereum/marketplaces/origin-protocol/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/marketplaces/rarebits/","text":"RareBits Summary Rare Bits is a marketplace dedicated to the buying and selling of crypto assets. Crypto assets are non-fungible tokens that are provably scarce and unique. We believe that this new asset class will pave the way for a new era of digital ownership. Resources Website Twitter","title":"Rarebits"},{"location":"built-on-ethereum/marketplaces/rarebits/#rarebits","text":"","title":"RareBits"},{"location":"built-on-ethereum/marketplaces/rarebits/#summary","text":"Rare Bits is a marketplace dedicated to the buying and selling of crypto assets. Crypto assets are non-fungible tokens that are provably scarce and unique. We believe that this new asset class will pave the way for a new era of digital ownership.","title":"Summary"},{"location":"built-on-ethereum/marketplaces/rarebits/#resources","text":"Website Twitter","title":"Resources"},{"location":"built-on-ethereum/open-finance/0x-protocol/","text":"0x Protocol Summary 0x is an open protocol that facilitates peer-to-peer exchange of digital assets on the Ethereum blockchain. 0x is open source, free to use, and provides a drop-in exchange solution for developers to build on top of. Developers use 0x protocol to build decentralized exchanges (DEXs), marketplaces for digital collectibles, and to integrate exchange functionality into wallets. https://blog.0xproject.com/welcome-to-the-0x-community-9d99dfe0a52b 0x protocol overview In 0x Protocol, orders are transported off-chain over any arbitrary medium, massively reducing gas costs and reducing blockchain bloat. Relayers help broadcast orders and collect a fee each time they facilitate a trade. Anyone can build a relayer. The simplest example of a Relayer is a website allowing users to create, discover and fill orders. The Relayer must build out a UI and host a backend database to provide this functionality. List of dApps that will be (or are) using the 0x protocol Aragon Auctus Augur bZx Blocknet ChronoBank Dharma District0x dYdX EasyTrade Gods Unchained Hut34 Project Lendroid Maker MelonPort OpenANX Paradigm Protocol Request Network Set List of relayers that will be (or are) using the 0x protocol Amadeus Bamboo Relay DDEX Dextroid ERC dEX Ethfinex IDT Exchange Instex LedgerDex MobiDex OpenRelay Paradex Radar Relay Shark Relay Starbit The Ocean Token Jar Tokenlon Weswap List of 0x trade explorers 0x Remote Hr 0x Trade Viewer 0x Tracker Resources Website","title":"0x Protocol"},{"location":"built-on-ethereum/open-finance/0x-protocol/#0x-protocol","text":"","title":"0x Protocol"},{"location":"built-on-ethereum/open-finance/0x-protocol/#summary","text":"0x is an open protocol that facilitates peer-to-peer exchange of digital assets on the Ethereum blockchain. 0x is open source, free to use, and provides a drop-in exchange solution for developers to build on top of. Developers use 0x protocol to build decentralized exchanges (DEXs), marketplaces for digital collectibles, and to integrate exchange functionality into wallets. https://blog.0xproject.com/welcome-to-the-0x-community-9d99dfe0a52b","title":"Summary"},{"location":"built-on-ethereum/open-finance/0x-protocol/#0x-protocol-overview","text":"In 0x Protocol, orders are transported off-chain over any arbitrary medium, massively reducing gas costs and reducing blockchain bloat. Relayers help broadcast orders and collect a fee each time they facilitate a trade. Anyone can build a relayer. The simplest example of a Relayer is a website allowing users to create, discover and fill orders. The Relayer must build out a UI and host a backend database to provide this functionality.","title":"0x protocol overview"},{"location":"built-on-ethereum/open-finance/0x-protocol/#list-of-dapps-that-will-be-40or-are41-using-the-0x-protocol","text":"Aragon Auctus Augur bZx Blocknet ChronoBank Dharma District0x dYdX EasyTrade Gods Unchained Hut34 Project Lendroid Maker MelonPort OpenANX Paradigm Protocol Request Network Set","title":"List of dApps that will be (or are) using the 0x protocol"},{"location":"built-on-ethereum/open-finance/0x-protocol/#list-of-relayers-that-will-be-40or-are41-using-the-0x-protocol","text":"Amadeus Bamboo Relay DDEX Dextroid ERC dEX Ethfinex IDT Exchange Instex LedgerDex MobiDex OpenRelay Paradex Radar Relay Shark Relay Starbit The Ocean Token Jar Tokenlon Weswap","title":"List of relayers that will be (or are) using the 0x protocol"},{"location":"built-on-ethereum/open-finance/0x-protocol/#list-of-0x-trade-explorers","text":"0x Remote Hr 0x Trade Viewer 0x Tracker","title":"List of 0x trade explorers"},{"location":"built-on-ethereum/open-finance/0x-protocol/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/8x/","text":"8x Summary 8x defines a protocol for recurring payments. It allows creating subscriptions for companies and paying them for users. Any ERC-20 token can be used for payment, though a stablecoin like DAI might be more convenient for both parties. For the end user, the protocol allows pulling payments instead of pushing them, which results in less cognitive costs and decreased churn. Companies create a subscription by defining a token address, amount, period, and fee in a smart contract. This fee will be paid to one of the service nodes to regularly execute payment transactions. The company can then share this contract with its customers. Once a customer opts into a subscription, a service node can trigger payments from the customer to the company once per pay period. Nodes who hold more 8x tokens will have a priority in processing transactions and therefore will earn more fees. Service nodes also need to stake tokens. Staked tokens will be slashed if the node fails to process the transaction. Resources Website","title":"8x"},{"location":"built-on-ethereum/open-finance/8x/#8x","text":"","title":"8x"},{"location":"built-on-ethereum/open-finance/8x/#summary","text":"8x defines a protocol for recurring payments. It allows creating subscriptions for companies and paying them for users. Any ERC-20 token can be used for payment, though a stablecoin like DAI might be more convenient for both parties. For the end user, the protocol allows pulling payments instead of pushing them, which results in less cognitive costs and decreased churn. Companies create a subscription by defining a token address, amount, period, and fee in a smart contract. This fee will be paid to one of the service nodes to regularly execute payment transactions. The company can then share this contract with its customers. Once a customer opts into a subscription, a service node can trigger payments from the customer to the company once per pay period. Nodes who hold more 8x tokens will have a priority in processing transactions and therefore will earn more fees. Service nodes also need to stake tokens. Staked tokens will be slashed if the node fails to process the transaction.","title":"Summary"},{"location":"built-on-ethereum/open-finance/8x/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/bskt/","text":"Bskt Summary Bskt allows creating portfolios of tokens. To create a Bskt portfolio, one needs to deploy a smart contract providing underlying token addresses, their weights, and the base unit of the portfolio. Once the contract is deployed, anyone can interact with it by minting new portfolio tokens in exchange for the underlying assets. These assets can then be redeemed by the owner of portfolio tokens. Portfolio tokens are ERC20 tokens that can be traded and put into another portfolio. In case some of the underlying tokens become untransferable (e.g. the transfer function was paused by the token smart contract owner), users can skip that token during redemption. Alternatively, a portfolio owner can extract this token from the portfolio, creating a new one without accessing the user funds. The owner of a Bskt portfolio can also pause creation of the new portfolio tokens in case they want to deprecate the portfolio. An owner can\u2019t pause redemption of the underlying assets. Resources Website","title":"Bskt"},{"location":"built-on-ethereum/open-finance/bskt/#bskt","text":"","title":"Bskt"},{"location":"built-on-ethereum/open-finance/bskt/#summary","text":"Bskt allows creating portfolios of tokens. To create a Bskt portfolio, one needs to deploy a smart contract providing underlying token addresses, their weights, and the base unit of the portfolio. Once the contract is deployed, anyone can interact with it by minting new portfolio tokens in exchange for the underlying assets. These assets can then be redeemed by the owner of portfolio tokens. Portfolio tokens are ERC20 tokens that can be traded and put into another portfolio. In case some of the underlying tokens become untransferable (e.g. the transfer function was paused by the token smart contract owner), users can skip that token during redemption. Alternatively, a portfolio owner can extract this token from the portfolio, creating a new one without accessing the user funds. The owner of a Bskt portfolio can also pause creation of the new portfolio tokens in case they want to deprecate the portfolio. An owner can\u2019t pause redemption of the underlying assets.","title":"Summary"},{"location":"built-on-ethereum/open-finance/bskt/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/burner-wallet/","text":"Burner Wallet (xDai) Summary Founded by Austin Griffith , The Burner Wallet is a wallet that allows users to interact with the xDai sidechain from POA . xDai is the USD-stable coin that is a representation of Dai but lives on the xDai Chain, instead of Ethereum mainnet. You can use the TokenBridge to convert Dai from Ethereum Mainnet to xDai on xDai Chain or do this inside the Burner Wallet itself. Please note that the Burner Wallet is new and the site is constantly being improved. How to use the Burner Wallet First, it\u2019s suggested at the moment to use the Burner Wallet without MetaMask. While it\u2019s possible to use MetaMask, it is not necessary and adds some overhead. Suggested use right now would be in a mobile browser or in a private browser tab (to avoid MetaMask). Wallet Generation Upon visiting https://xdai.io a wallet is automatically generated and your private key is stored in a cookie in your browser. There are multiple ways to backup and restore your Burner Wallet in the Advanced section. Private Key: Show private key and save it somewhere. This can be inserted into the Private Key box in the future and upon hitting create, the wallet will be restored. Seed Phrase: Create any string of words or phrase that you want and hit create. This will create a wallet tied to that phrase and you can reenter it and pull it up at any point. WARNING: Doing this the first time will create a NEW wallet. Getting xDai As previously mentioned, xDai is a representation of Dai running on a POA sidechain. This means that you must lock up Dai on the Etheruem mainnet to be minted xDai tokens. The Burner Wallet makes this easy through the Exchange section of the page. You can start with just ETH or Dai. If you start with ETH you must go ETH Dai xDai using this page. Once complete, you have xDai in your wallet. Exiting xDai Leaving the xDai chain is just as easy as getting on but in reverse. Simply go to the Exchange page and convert from xDai to Dai and then onto ETH if you want. Sending and Receiving xDai Sending and Receiving xDai is extremely easy. Simply get the address of whoever you want to send to or scan a QR code which is generated inside the wallet. Users can also request funds via the Request option which generates a link for others to drop in their browser. Resources Website Github Introduction to Burner Wallet Burner Wallet Video xDai Chain Explained","title":"Burner Wallet"},{"location":"built-on-ethereum/open-finance/burner-wallet/#burner-wallet-xdai","text":"","title":"Burner Wallet (xDai)"},{"location":"built-on-ethereum/open-finance/burner-wallet/#summary","text":"Founded by Austin Griffith , The Burner Wallet is a wallet that allows users to interact with the xDai sidechain from POA . xDai is the USD-stable coin that is a representation of Dai but lives on the xDai Chain, instead of Ethereum mainnet. You can use the TokenBridge to convert Dai from Ethereum Mainnet to xDai on xDai Chain or do this inside the Burner Wallet itself. Please note that the Burner Wallet is new and the site is constantly being improved.","title":"Summary"},{"location":"built-on-ethereum/open-finance/burner-wallet/#how-to-use-the-burner-wallet","text":"First, it\u2019s suggested at the moment to use the Burner Wallet without MetaMask. While it\u2019s possible to use MetaMask, it is not necessary and adds some overhead. Suggested use right now would be in a mobile browser or in a private browser tab (to avoid MetaMask).","title":"How to use the Burner Wallet"},{"location":"built-on-ethereum/open-finance/burner-wallet/#wallet-generation","text":"Upon visiting https://xdai.io a wallet is automatically generated and your private key is stored in a cookie in your browser. There are multiple ways to backup and restore your Burner Wallet in the Advanced section. Private Key: Show private key and save it somewhere. This can be inserted into the Private Key box in the future and upon hitting create, the wallet will be restored. Seed Phrase: Create any string of words or phrase that you want and hit create. This will create a wallet tied to that phrase and you can reenter it and pull it up at any point. WARNING: Doing this the first time will create a NEW wallet.","title":"Wallet Generation"},{"location":"built-on-ethereum/open-finance/burner-wallet/#getting-xdai","text":"As previously mentioned, xDai is a representation of Dai running on a POA sidechain. This means that you must lock up Dai on the Etheruem mainnet to be minted xDai tokens. The Burner Wallet makes this easy through the Exchange section of the page. You can start with just ETH or Dai. If you start with ETH you must go ETH Dai xDai using this page. Once complete, you have xDai in your wallet.","title":"Getting xDai"},{"location":"built-on-ethereum/open-finance/burner-wallet/#exiting-xdai","text":"Leaving the xDai chain is just as easy as getting on but in reverse. Simply go to the Exchange page and convert from xDai to Dai and then onto ETH if you want.","title":"Exiting xDai"},{"location":"built-on-ethereum/open-finance/burner-wallet/#sending-and-receiving-xdai","text":"Sending and Receiving xDai is extremely easy. Simply get the address of whoever you want to send to or scan a QR code which is generated inside the wallet. Users can also request funds via the Request option which generates a link for others to drop in their browser.","title":"Sending and Receiving xDai"},{"location":"built-on-ethereum/open-finance/burner-wallet/#resources","text":"Website Github Introduction to Burner Wallet Burner Wallet Video xDai Chain Explained","title":"Resources"},{"location":"built-on-ethereum/open-finance/cdx/","text":"cdx Summary CDx is a protocol for default credit swaps. Default credit swaps are a financial product used as a protection from the default of another party. The swap buyer makes a series of payments during the insurance period and in case of a default, the buyer receives compensation. CDx implements swap creation via minting tokens unique to each type of the swap. Sellers specify the insurance amount and their premium. A buyer then discovers these offers and decides whether they want to purchase a swap. Offers are distributed via relayers with the on-chain settlement. Swaps can be traded on the secondary market just like any other token. In the event of a default, a current owner of swap tokens can exchange them for compensation defined at swap creation. Resources Website","title":"cdx"},{"location":"built-on-ethereum/open-finance/cdx/#cdx","text":"","title":"cdx"},{"location":"built-on-ethereum/open-finance/cdx/#summary","text":"CDx is a protocol for default credit swaps. Default credit swaps are a financial product used as a protection from the default of another party. The swap buyer makes a series of payments during the insurance period and in case of a default, the buyer receives compensation. CDx implements swap creation via minting tokens unique to each type of the swap. Sellers specify the insurance amount and their premium. A buyer then discovers these offers and decides whether they want to purchase a swap. Offers are distributed via relayers with the on-chain settlement. Swaps can be traded on the secondary market just like any other token. In the event of a default, a current owner of swap tokens can exchange them for compensation defined at swap creation.","title":"Summary"},{"location":"built-on-ethereum/open-finance/cdx/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/digix/","text":"Digix Summary Digix provides a use case for the tokenisation and documentation of physical assets through its Proof of Provenance (PoP) protocol. The PoA protocol utilises Ethereum and the InterPlanetary Files System (IPFS) to track an asset through its chain of custody. This allows for the open and public verification of an asset\u2019s existence without a centralised database. Digix also offers an API allowing other applications to be built on top of our asset tokenisation service. The platform initially allows buying and selling of tokens tied to physical gold (DGX) as well as a documentation trail for minting, transfering, destroying, and auditing of DGX. The price of one DGX is equal to the price of one gram of gold. Digix Global is a private company behind the creation of the Proof of Provenance protocol and Digix smart contracts deployed on Ethereum. In early 2016, they held one of the first Ethereum based ICOs (Initial Coin Offerings) in history in order to create the Digix DAO. The Digix DAO token (DGD) is given to buyers in the ICO based on how much they contributed. Buyers of a high enough amount of DGD were able to also purchase Digix Badge tokens (DGB) under the understanding that badge holders would be able to submit proposals to the DAO once it was live. As of Fall 2018, Digix converted approximately $20 Million USD worth of ETH from the 2016 crowdsale in order to ensure creation of the DAO and governance contracts and sustainable opperation of Digix Global for a number of years. Resources Website Asset Explorer","title":"Digix"},{"location":"built-on-ethereum/open-finance/digix/#digix","text":"","title":"Digix"},{"location":"built-on-ethereum/open-finance/digix/#summary","text":"Digix provides a use case for the tokenisation and documentation of physical assets through its Proof of Provenance (PoP) protocol. The PoA protocol utilises Ethereum and the InterPlanetary Files System (IPFS) to track an asset through its chain of custody. This allows for the open and public verification of an asset\u2019s existence without a centralised database. Digix also offers an API allowing other applications to be built on top of our asset tokenisation service. The platform initially allows buying and selling of tokens tied to physical gold (DGX) as well as a documentation trail for minting, transfering, destroying, and auditing of DGX. The price of one DGX is equal to the price of one gram of gold. Digix Global is a private company behind the creation of the Proof of Provenance protocol and Digix smart contracts deployed on Ethereum. In early 2016, they held one of the first Ethereum based ICOs (Initial Coin Offerings) in history in order to create the Digix DAO. The Digix DAO token (DGD) is given to buyers in the ICO based on how much they contributed. Buyers of a high enough amount of DGD were able to also purchase Digix Badge tokens (DGB) under the understanding that badge holders would be able to submit proposals to the DAO once it was live. As of Fall 2018, Digix converted approximately $20 Million USD worth of ETH from the 2016 crowdsale in order to ensure creation of the DAO and governance contracts and sustainable opperation of Digix Global for a number of years.","title":"Summary"},{"location":"built-on-ethereum/open-finance/digix/#resources","text":"Website Asset Explorer","title":"Resources"},{"location":"built-on-ethereum/open-finance/etherisc/","text":"Etherisc Summary Etherisc is a protocol to collectively build insurance products. Common infrastructure, product templates and insurance license-as-a-service make a platform that allows anyone to create their own insurance products. DIP Token DIP Tokens act as the native internal currency that is inseparable from the protocol and network of its users. DIP tokens are needed to earn transaction fees (% of insurance premiums or fixed cost), incentivize and reward platform users to bring risk to the network, build and maintain risk transfer products. The total supply of Etherisc Tokens is 1 Billion. DIP tokens give users access to the Decentralized Insurance Platform. By staking DIP token, participants provide collateral (bond) to guarantee future performance, availability, and service levels. Staking also signals quality and reputation. As a result, participants can earn money monetizing their skills, software (for example risk models or UI/UX), risk capital, insurance licenses, claim processing, or regulatory compliance/reporting services. Existing projects Flight Delay Insurance: https://fdd.etherisc.com/ is in production on Ethereum\u2014fully licensed, sold worldwide for ETH, USD, EUR. A developer earns 5% of revenue (set by the developer) and 100% of underwriting profit. HurricaneGuard.io: https://hurricaneguard.io/ is deployed on the Ethereum testnet. Resources Website","title":"Etherisc"},{"location":"built-on-ethereum/open-finance/etherisc/#etherisc","text":"","title":"Etherisc"},{"location":"built-on-ethereum/open-finance/etherisc/#summary","text":"Etherisc is a protocol to collectively build insurance products. Common infrastructure, product templates and insurance license-as-a-service make a platform that allows anyone to create their own insurance products.","title":"Summary"},{"location":"built-on-ethereum/open-finance/etherisc/#dip-token","text":"DIP Tokens act as the native internal currency that is inseparable from the protocol and network of its users. DIP tokens are needed to earn transaction fees (% of insurance premiums or fixed cost), incentivize and reward platform users to bring risk to the network, build and maintain risk transfer products. The total supply of Etherisc Tokens is 1 Billion. DIP tokens give users access to the Decentralized Insurance Platform. By staking DIP token, participants provide collateral (bond) to guarantee future performance, availability, and service levels. Staking also signals quality and reputation. As a result, participants can earn money monetizing their skills, software (for example risk models or UI/UX), risk capital, insurance licenses, claim processing, or regulatory compliance/reporting services.","title":"DIP Token"},{"location":"built-on-ethereum/open-finance/etherisc/#existing-projects","text":"Flight Delay Insurance: https://fdd.etherisc.com/ is in production on Ethereum\u2014fully licensed, sold worldwide for ETH, USD, EUR. A developer earns 5% of revenue (set by the developer) and 100% of underwriting profit. HurricaneGuard.io: https://hurricaneguard.io/ is deployed on the Ethereum testnet.","title":"Existing projects"},{"location":"built-on-ethereum/open-finance/etherisc/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/set-protocol/","text":"Set Protocol Summary Set Protocol allows grouping multiple tokens into one asset. Each set is a deployed smart contract with each set being fully-collateralized. Anyone can deposit a token to the set contract and withdraw them back, which makes the sets permissionless. Sets comply with the ERC20 standard, so they can be transferred and traded on exchanges. This also means that sets can be grouped into other sets. To reduce friction, users can acquire multi-token sets with a single token (for example, with WETH or DAI). To do that, they will need to make or take an issue order. This order is transported off-chain via issuance relayers for anyone to fill them. Liquidity for the underlying tokens is taken from decentralized exchanges. Users can opt to a rebalancing set. In a rebalancing set, weights of each token can be realigned to maintain desired properties in a changing market. For example, a rebalancing set can represent equal shares of the top 10 Ethereum tokens. Then, if one of the tokens appreciates in value, the set manager will sell some of it and will buy other tokens in equal amounts to maintain value distribution. Resources Website Set Explorer","title":"Set Protocol"},{"location":"built-on-ethereum/open-finance/set-protocol/#set-protocol","text":"","title":"Set Protocol"},{"location":"built-on-ethereum/open-finance/set-protocol/#summary","text":"Set Protocol allows grouping multiple tokens into one asset. Each set is a deployed smart contract with each set being fully-collateralized. Anyone can deposit a token to the set contract and withdraw them back, which makes the sets permissionless. Sets comply with the ERC20 standard, so they can be transferred and traded on exchanges. This also means that sets can be grouped into other sets. To reduce friction, users can acquire multi-token sets with a single token (for example, with WETH or DAI). To do that, they will need to make or take an issue order. This order is transported off-chain via issuance relayers for anyone to fill them. Liquidity for the underlying tokens is taken from decentralized exchanges. Users can opt to a rebalancing set. In a rebalancing set, weights of each token can be realigned to maintain desired properties in a changing market. For example, a rebalancing set can represent equal shares of the top 10 Ethereum tokens. Then, if one of the tokens appreciates in value, the set manager will sell some of it and will buy other tokens in equal amounts to maintain value distribution.","title":"Summary"},{"location":"built-on-ethereum/open-finance/set-protocol/#resources","text":"Website Set Explorer","title":"Resources"},{"location":"built-on-ethereum/open-finance/settle/","text":"Settle Summary Settle is a web-native operating system for decentralized finance. Settle attempts to create a new open economy for DeFi protocols and trading tools. Key Settle features include: Chat with embedded OTC trading using the 0x protocol. Professional style portfolio tracking. Support for CEXes, DEXes, on-chain addresses and derivatives. Ecosytem of third party apps incentivizeded with 50/50 subscription sharing. Dashboard with a unique design to help traders better see important information. Resources Website App Twitter","title":"Settle"},{"location":"built-on-ethereum/open-finance/settle/#settle","text":"","title":"Settle"},{"location":"built-on-ethereum/open-finance/settle/#summary","text":"Settle is a web-native operating system for decentralized finance. Settle attempts to create a new open economy for DeFi protocols and trading tools. Key Settle features include: Chat with embedded OTC trading using the 0x protocol. Professional style portfolio tracking. Support for CEXes, DEXes, on-chain addresses and derivatives. Ecosytem of third party apps incentivizeded with 50/50 subscription sharing. Dashboard with a unique design to help traders better see important information.","title":"Summary"},{"location":"built-on-ethereum/open-finance/settle/#resources","text":"Website App Twitter","title":"Resources"},{"location":"built-on-ethereum/open-finance/wbtc/","text":"Wrapped Bitcoin (WBTC) What is Wrapped Bitcoin (WBTC)? WBTC brings greater liquidity to the Ethereum ecosystem including decentralized exchanges (DEXs) and financial applications. Today, the majority of trading volume takes place on centralized exchanges with Bitcoin. WBTC changes that, bringing Bitcoin\u2019s liquidity to DEXs and making it possible to use Bitcoin for token trades. WBTC standardizes Bitcoin to the ERC20 format, creating smart contracts for Bitcoin. This makes it easier to write smart contracts that integrate Bitcoin transfers. Maintaining various nodes and managing transaction types in order to support multiple currencies can be onerous. Now exchanges, wallets, and payment apps only need to handle an Ethereum node. WBTC DAO The addition and removal of merchants and custodians will be an open process controlled by a multi-signature contract. Keys to the multi-sig contract will be held by institutions as part of the WBTC DAO. Merchants Merchants perform key roles for the WBTC community and are sources of token distribution. They interact with custodians in order to mint and burn WBTC and provide KYC/AML for users. Custodians The custodian provides reliable, institutional-grade security for your WBTC. All WBTC issued will be fully backed and verified through on-chain proof of reserves. How it works Receiving To receive WBTC, a user requests tokens from a merchant. The merchant then performs the required KYC / AML procedures and verifies the user\u2019s identity. Once this is completed, the user and merchant execute their swap, with Bitcoin from the user transferring to the merchant, and WBTC from the merchant transferring to the user. Minting Minting refers to the process of creating new wrapped tokens. Minting in the wrapped framework is initiated by a merchant and performed by a custodian. Burning Burning is the action of redeeming Bitcoin for WBTC tokens, and only merchant addresses can do this. The amount to be \u2018burnt\u2019 is deducted from the merchant\u2019s WBTC balance (on chain) and the supply of WBTC is then reduced. Partners Resources WBTC Contract Website WBTC Dashboard","title":"WBTC"},{"location":"built-on-ethereum/open-finance/wbtc/#wrapped-bitcoin-wbtc","text":"","title":"Wrapped Bitcoin (WBTC)"},{"location":"built-on-ethereum/open-finance/wbtc/#what-is-wrapped-bitcoin-wbtc","text":"WBTC brings greater liquidity to the Ethereum ecosystem including decentralized exchanges (DEXs) and financial applications. Today, the majority of trading volume takes place on centralized exchanges with Bitcoin. WBTC changes that, bringing Bitcoin\u2019s liquidity to DEXs and making it possible to use Bitcoin for token trades. WBTC standardizes Bitcoin to the ERC20 format, creating smart contracts for Bitcoin. This makes it easier to write smart contracts that integrate Bitcoin transfers. Maintaining various nodes and managing transaction types in order to support multiple currencies can be onerous. Now exchanges, wallets, and payment apps only need to handle an Ethereum node.","title":"What is Wrapped Bitcoin (WBTC)?"},{"location":"built-on-ethereum/open-finance/wbtc/#wbtc-dao","text":"The addition and removal of merchants and custodians will be an open process controlled by a multi-signature contract. Keys to the multi-sig contract will be held by institutions as part of the WBTC DAO.","title":"WBTC DAO"},{"location":"built-on-ethereum/open-finance/wbtc/#merchants","text":"Merchants perform key roles for the WBTC community and are sources of token distribution. They interact with custodians in order to mint and burn WBTC and provide KYC/AML for users.","title":"Merchants"},{"location":"built-on-ethereum/open-finance/wbtc/#custodians","text":"The custodian provides reliable, institutional-grade security for your WBTC. All WBTC issued will be fully backed and verified through on-chain proof of reserves.","title":"Custodians"},{"location":"built-on-ethereum/open-finance/wbtc/#how-it-works","text":"","title":"How it works"},{"location":"built-on-ethereum/open-finance/wbtc/#receiving","text":"To receive WBTC, a user requests tokens from a merchant. The merchant then performs the required KYC / AML procedures and verifies the user\u2019s identity. Once this is completed, the user and merchant execute their swap, with Bitcoin from the user transferring to the merchant, and WBTC from the merchant transferring to the user.","title":"Receiving"},{"location":"built-on-ethereum/open-finance/wbtc/#minting","text":"Minting refers to the process of creating new wrapped tokens. Minting in the wrapped framework is initiated by a merchant and performed by a custodian.","title":"Minting"},{"location":"built-on-ethereum/open-finance/wbtc/#burning","text":"Burning is the action of redeeming Bitcoin for WBTC tokens, and only merchant addresses can do this. The amount to be \u2018burnt\u2019 is deducted from the merchant\u2019s WBTC balance (on chain) and the supply of WBTC is then reduced.","title":"Burning"},{"location":"built-on-ethereum/open-finance/wbtc/#partners","text":"","title":"Partners"},{"location":"built-on-ethereum/open-finance/wbtc/#resources","text":"WBTC Contract Website WBTC Dashboard","title":"Resources"},{"location":"built-on-ethereum/open-finance/what-is-open-finance/","text":"Open Finance Summary Open Finance refers to a number of decentralized protocols building open financial infrastructure. These protocols are valuable because they're creating the necessary plumbing to enable anyone in the world with an internet connection to access self-sovereign, censorship resistant financial services. In the existing system, all financial services are controlled by a central party. Whether it's basic money transfers, asset purchases, or lending, you must go through an intermediary who charges rent for mediating financial transactions. Ethereum-based financial services, on the other hand, connect individuals peer-to-peer and allow them to access basic financing more easily and affordably. How is all this possible? A big reason the financial services industry is as bloated as it is today is because financial transactions in the digital realm are not secure. We have no method of trusting our online counterparties so we pay fees to financial institutions who enforce that trust. Ethereum leverages the same principles that create 'digital trust' within Bitcoin, and applies to them to smart contracts, self-executing pieces of code that execute business logic after some predefined conditions are met. Smart contracts look a lot like financial contracts in that they escrow funds and transfer them around in response to certain events. This system is superior because the encoded business logic can't be manipulated by a central party once its deployed to the Ethereum mainnet. Blockchain based financial services are superior to their centralized counterparts across five primary features: Permissionless : An internet connection is all you need to access these services Censorship Resistance : No central party is able to reverse the order of transactions and turn off the service Trustless : Users don't have to trust a central party to ensure that transactions are valid Transparent : Public blockchains like Ethereum are completely transparent and auditable Programmable : Developers can create and intertwine financial services at a very low cost Open Finance is generally broken up into the following categories: Asset Exchange Credit Scoring Insurance Indexing/Baskets Lending Derivatives Stablecoins Smart Securities Prediction Markets Open Source Banking Applications Resources Awesome Decentralized Finance","title":"What is Open Finance?"},{"location":"built-on-ethereum/open-finance/what-is-open-finance/#open-finance","text":"","title":"Open Finance"},{"location":"built-on-ethereum/open-finance/what-is-open-finance/#summary","text":"Open Finance refers to a number of decentralized protocols building open financial infrastructure. These protocols are valuable because they're creating the necessary plumbing to enable anyone in the world with an internet connection to access self-sovereign, censorship resistant financial services. In the existing system, all financial services are controlled by a central party. Whether it's basic money transfers, asset purchases, or lending, you must go through an intermediary who charges rent for mediating financial transactions. Ethereum-based financial services, on the other hand, connect individuals peer-to-peer and allow them to access basic financing more easily and affordably.","title":"Summary"},{"location":"built-on-ethereum/open-finance/what-is-open-finance/#how-is-all-this-possible","text":"A big reason the financial services industry is as bloated as it is today is because financial transactions in the digital realm are not secure. We have no method of trusting our online counterparties so we pay fees to financial institutions who enforce that trust. Ethereum leverages the same principles that create 'digital trust' within Bitcoin, and applies to them to smart contracts, self-executing pieces of code that execute business logic after some predefined conditions are met. Smart contracts look a lot like financial contracts in that they escrow funds and transfer them around in response to certain events. This system is superior because the encoded business logic can't be manipulated by a central party once its deployed to the Ethereum mainnet.","title":"How is all this possible?"},{"location":"built-on-ethereum/open-finance/what-is-open-finance/#blockchain-based-financial-services-are-superior-to-their-centralized-counterparts-across-five-primary-features","text":"Permissionless : An internet connection is all you need to access these services Censorship Resistance : No central party is able to reverse the order of transactions and turn off the service Trustless : Users don't have to trust a central party to ensure that transactions are valid Transparent : Public blockchains like Ethereum are completely transparent and auditable Programmable : Developers can create and intertwine financial services at a very low cost","title":"Blockchain based financial services are superior to their centralized counterparts across five primary features:"},{"location":"built-on-ethereum/open-finance/what-is-open-finance/#open-finance-is-generally-broken-up-into-the-following-categories","text":"Asset Exchange Credit Scoring Insurance Indexing/Baskets Lending Derivatives Stablecoins Smart Securities Prediction Markets Open Source Banking Applications","title":"Open Finance is generally broken up into the following categories:"},{"location":"built-on-ethereum/open-finance/what-is-open-finance/#resources","text":"Awesome Decentralized Finance","title":"Resources"},{"location":"built-on-ethereum/open-finance/zerion/","text":"Zerion Summary Zerion is building a trustless bank for Decentralized Finance (DeFi) on top of MakerDAO , Uniswap , Compound , Dharma , Set , DyDx and others. Zerion aims at transforming the decentralized finance experience to drive the next wave of adoption of blockchain-based finance. You can think of it as Chase for the decentralized economy. Instead of relying on a third party to manage their assets (such as through traditional banking and existing FinTech), Zerion users keep full control over their assets and execute common banking services with minimal fees. Features Historical on-chain portfolio of Ethereum and ERC-20 tokens. Native wallet integrations - Metamask, WalletConnect Works in most DApp Browsers - Coinbase Wallet, Trust Wallet, imToken, Tokenary Trading of ERC-20 tokens MakerDAO (coming soon) Resources Website Beta Twitter","title":"Zerion"},{"location":"built-on-ethereum/open-finance/zerion/#zerion","text":"","title":"Zerion"},{"location":"built-on-ethereum/open-finance/zerion/#summary","text":"Zerion is building a trustless bank for Decentralized Finance (DeFi) on top of MakerDAO , Uniswap , Compound , Dharma , Set , DyDx and others. Zerion aims at transforming the decentralized finance experience to drive the next wave of adoption of blockchain-based finance. You can think of it as Chase for the decentralized economy. Instead of relying on a third party to manage their assets (such as through traditional banking and existing FinTech), Zerion users keep full control over their assets and execute common banking services with minimal fees.","title":"Summary"},{"location":"built-on-ethereum/open-finance/zerion/#features","text":"Historical on-chain portfolio of Ethereum and ERC-20 tokens. Native wallet integrations - Metamask, WalletConnect Works in most DApp Browsers - Coinbase Wallet, Trust Wallet, imToken, Tokenary Trading of ERC-20 tokens MakerDAO (coming soon)","title":"Features"},{"location":"built-on-ethereum/open-finance/zerion/#resources","text":"Website Beta Twitter","title":"Resources"},{"location":"built-on-ethereum/open-finance/lending/bzx/","text":"bZx Summary bZx defines a protocol for decentralized margin trading. It employs a hybrid order model, where third-party relayers each maintain their own order book while orders are settled on-chain. To provide fair pricing of assets, bZx uses oracle providers to send price data to the network. Providers set a fee for their services and users select oracles of their choice when they make orders. bZx plans to introduce an 'Oracle Registry', which will aggregate oracles selected via a decentralized governance process. Resources Website","title":"bzx"},{"location":"built-on-ethereum/open-finance/lending/bzx/#bzx","text":"","title":"bZx"},{"location":"built-on-ethereum/open-finance/lending/bzx/#summary","text":"bZx defines a protocol for decentralized margin trading. It employs a hybrid order model, where third-party relayers each maintain their own order book while orders are settled on-chain. To provide fair pricing of assets, bZx uses oracle providers to send price data to the network. Providers set a fee for their services and users select oracles of their choice when they make orders. bZx plans to introduce an 'Oracle Registry', which will aggregate oracles selected via a decentralized governance process.","title":"Summary"},{"location":"built-on-ethereum/open-finance/lending/bzx/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/lending/compound/","text":"Compound Summary Compound gives you the ability to borrow and lend tokens. In Compound, users contribute to a shared pool of tokens, from which lenders can receive a debt. Lenders can repay the debt at any time, as long as they maintain enough collateral. In case their debt becomes under collateralized, users of the protocol can default the lender\u2019s debt by selling his assets in an auction. Interest rates An interest rate of each lending and borrowing is defined by the size of the liquidity pool. There are different rates for borrowing and supplying tokens. These rates fluctuate based on the ratio of borrowed tokens to supplied tokens. Available tokens BAT DAI Augur WETH 0x History Seed funding On May. 16, 2018 , Compound announced that it had raised $8.2 million in seed funding. The financing was led by Bain Capital Ventures, Andreessen Horowitz and Polychain Capital, with participation from Transmedia Capital, Compound Ventures, Abstract Ventures, Danhua Capital and Coinbase. Resources Website","title":"Compound"},{"location":"built-on-ethereum/open-finance/lending/compound/#compound","text":"","title":"Compound"},{"location":"built-on-ethereum/open-finance/lending/compound/#summary","text":"Compound gives you the ability to borrow and lend tokens. In Compound, users contribute to a shared pool of tokens, from which lenders can receive a debt. Lenders can repay the debt at any time, as long as they maintain enough collateral. In case their debt becomes under collateralized, users of the protocol can default the lender\u2019s debt by selling his assets in an auction.","title":"Summary"},{"location":"built-on-ethereum/open-finance/lending/compound/#interest-rates","text":"An interest rate of each lending and borrowing is defined by the size of the liquidity pool. There are different rates for borrowing and supplying tokens. These rates fluctuate based on the ratio of borrowed tokens to supplied tokens.","title":"Interest rates"},{"location":"built-on-ethereum/open-finance/lending/compound/#available-tokens","text":"BAT DAI Augur WETH 0x","title":"Available tokens"},{"location":"built-on-ethereum/open-finance/lending/compound/#history","text":"","title":"History"},{"location":"built-on-ethereum/open-finance/lending/compound/#seed-funding","text":"On May. 16, 2018 , Compound announced that it had raised $8.2 million in seed funding. The financing was led by Bain Capital Ventures, Andreessen Horowitz and Polychain Capital, with participation from Transmedia Capital, Compound Ventures, Abstract Ventures, Danhua Capital and Coinbase.","title":"Seed funding"},{"location":"built-on-ethereum/open-finance/lending/compound/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/lending/dharma/","text":"Dharma Summary Dharma is a protocol for issuing debt. The goal of this protocol is to create a pool of debtors and creditors. Similar to 0x, Dharma utilizes the concept of relayers and the goal of relayers is to provide the interface to submit and gather orders. These orders are stored off-chain and only settled orders go to the blockchain. It\u2019s up to relayers to decide which orders they accept. It is possible to take a loan without using cryptocurrency as collateral, or without collateral at all, as debtors can request a debt from one of the underwriters. An underwriter is an entity who evaluates debtor\u2019s credibility and manages the debt parameters. Once the debtor and underwriter settle, the latter must submit the signed offer to one of the Dharma relayers. Creditors can then evaluate the offer\u2019s terms and underwriter\u2019s reputation to decide whether to trust it. Recently the team introduced Dharma Lever \u2014 a margin trading platform built on the protocol. Resources Website Bloqboard App Quickline Relayer Loan Explorer","title":"Dharma"},{"location":"built-on-ethereum/open-finance/lending/dharma/#dharma","text":"","title":"Dharma"},{"location":"built-on-ethereum/open-finance/lending/dharma/#summary","text":"Dharma is a protocol for issuing debt. The goal of this protocol is to create a pool of debtors and creditors. Similar to 0x, Dharma utilizes the concept of relayers and the goal of relayers is to provide the interface to submit and gather orders. These orders are stored off-chain and only settled orders go to the blockchain. It\u2019s up to relayers to decide which orders they accept. It is possible to take a loan without using cryptocurrency as collateral, or without collateral at all, as debtors can request a debt from one of the underwriters. An underwriter is an entity who evaluates debtor\u2019s credibility and manages the debt parameters. Once the debtor and underwriter settle, the latter must submit the signed offer to one of the Dharma relayers. Creditors can then evaluate the offer\u2019s terms and underwriter\u2019s reputation to decide whether to trust it. Recently the team introduced Dharma Lever \u2014 a margin trading platform built on the protocol.","title":"Summary"},{"location":"built-on-ethereum/open-finance/lending/dharma/#resources","text":"Website Bloqboard App Quickline Relayer Loan Explorer","title":"Resources"},{"location":"built-on-ethereum/open-finance/lending/dydx/","text":"dYdX Summary dYdX provides a way to trade derivatives on Ethereum. Users of the protocol can trade with margin, which allows them to short any ERC20 token or buy any token with leverage. Opening a position requires taking a debt. Therefore, a margin trader will need to find a creditor who will lend them the required tokens. Users negotiate via relayers or in private, then settle on-chain once they agree on terms. dYdX also plans to support options trading. Options give a right to its owner to buy or sell an asset in the future at the specified price. It can be used as a speculation or a hedge. Resources Website Expo Exchange","title":"dydx"},{"location":"built-on-ethereum/open-finance/lending/dydx/#dydx","text":"","title":"dYdX"},{"location":"built-on-ethereum/open-finance/lending/dydx/#summary","text":"dYdX provides a way to trade derivatives on Ethereum. Users of the protocol can trade with margin, which allows them to short any ERC20 token or buy any token with leverage. Opening a position requires taking a debt. Therefore, a margin trader will need to find a creditor who will lend them the required tokens. Users negotiate via relayers or in private, then settle on-chain once they agree on terms. dYdX also plans to support options trading. Options give a right to its owner to buy or sell an asset in the future at the specified price. It can be used as a speculation or a hedge.","title":"Summary"},{"location":"built-on-ethereum/open-finance/lending/dydx/#resources","text":"Website Expo Exchange","title":"Resources"},{"location":"built-on-ethereum/open-finance/lending/expo/","text":"expo Summary Expo is built on the dYdX Protocol, and is the easiest way to buy and sell dYdX Margin Tokens. Expo supports tokens such as Short Ethereum \u2018sETH\u2019, an ERC-20 token pegged to a short ETH position, and will add support for additional short and leveraged assets in the future. How expo works Expo integrates with the dYdX Margin Trading Protocol, and allows users to buy, sell, and manage Margin Tokens. The mechanics of the protocol (obtaining a loan, spot trading) are abstracted away from the trader, significantly simplifying the margin trading experience. Expo automatically: Sources lending liquidity in the underlying asset from various dYdX lending partners Sources spot liquidity from decentralized exchanges Locks collateral into the position Mints new short or leveraged tokens to give the user margin exposure All users need to do is decide how much to buy. Resources: Website","title":"Expo"},{"location":"built-on-ethereum/open-finance/lending/expo/#expo","text":"","title":"expo"},{"location":"built-on-ethereum/open-finance/lending/expo/#summary","text":"Expo is built on the dYdX Protocol, and is the easiest way to buy and sell dYdX Margin Tokens. Expo supports tokens such as Short Ethereum \u2018sETH\u2019, an ERC-20 token pegged to a short ETH position, and will add support for additional short and leveraged assets in the future.","title":"Summary"},{"location":"built-on-ethereum/open-finance/lending/expo/#how-expo-works","text":"Expo integrates with the dYdX Margin Trading Protocol, and allows users to buy, sell, and manage Margin Tokens. The mechanics of the protocol (obtaining a loan, spot trading) are abstracted away from the trader, significantly simplifying the margin trading experience.","title":"How expo works"},{"location":"built-on-ethereum/open-finance/lending/expo/#expo-automatically","text":"Sources lending liquidity in the underlying asset from various dYdX lending partners Sources spot liquidity from decentralized exchanges Locks collateral into the position Mints new short or leveraged tokens to give the user margin exposure All users need to do is decide how much to buy.","title":"Expo automatically:"},{"location":"built-on-ethereum/open-finance/lending/expo/#resources","text":"Website","title":"Resources:"},{"location":"built-on-ethereum/open-finance/prediction-markets/augur/","text":"Augur Summary Augur is a trustless, decentralized oracle and prediction market. Individuals can speculate on the outcome of future events, those who forecast correctly win money and those that forecast incorrectly lose money. Augur was founded in 2014 and officially launched on the Ethereum mainnet on July 2018. Token Augur has a native token called Reputation (REP). REP is needed by market creators and reporters on the Augur platform. Both reporters and market creators can earn a return on their REP by participating in the network. Individuals are able to trade on the Augur platform even if they do not own the REP token. Resources Website Whitepaper Market Explorer Podcasts Unchained Epicenter","title":"Augur"},{"location":"built-on-ethereum/open-finance/prediction-markets/augur/#augur","text":"","title":"Augur"},{"location":"built-on-ethereum/open-finance/prediction-markets/augur/#summary","text":"Augur is a trustless, decentralized oracle and prediction market. Individuals can speculate on the outcome of future events, those who forecast correctly win money and those that forecast incorrectly lose money. Augur was founded in 2014 and officially launched on the Ethereum mainnet on July 2018.","title":"Summary"},{"location":"built-on-ethereum/open-finance/prediction-markets/augur/#token","text":"Augur has a native token called Reputation (REP). REP is needed by market creators and reporters on the Augur platform. Both reporters and market creators can earn a return on their REP by participating in the network. Individuals are able to trade on the Augur platform even if they do not own the REP token.","title":"Token"},{"location":"built-on-ethereum/open-finance/prediction-markets/augur/#resources","text":"Website Whitepaper Market Explorer","title":"Resources"},{"location":"built-on-ethereum/open-finance/prediction-markets/augur/#podcasts","text":"Unchained Epicenter","title":"Podcasts"},{"location":"built-on-ethereum/open-finance/prediction-markets/gnosis/","text":"Gnosis Summary Gnosis creates a global forecasting and information discovery tool by building a prediction market platform on Ethereum. This platform strives to gather liquidity of expert information. Gnosis starts with a core layer, which is a set of smart contracts. Value-added paid services built by the team will form the Gnosis Service layer. Gnosis also plans to make end-user applications along with third-party developers at the spplication layer. Token There are two tokens in Gnosis: GNO and OWL. The main utility of OWL token is to pay for the creation of prediction markets. Users receive OWL by locking their GNO tokens. The used OWL is burned. Gnosis Safe On November 28th, 2018, the Gnosis Safe smart contract went live on the Ethereum mainnet. The Gnosis Safe allows you to download the Android or iOS app and deploy a mobile-friendly personal smart contract wallet (multisig). You can add a Chrome extension that will hold the second key and will allow you to interact with dApps similar to Metamask (but then with your phone effectively as a 2FA device). DutchX and slow.trade DutchX is a protocol implementing Dutch action to perform trades of ERC20 tokens. Every 6 hours, a new action is started for each listed token. The price of a lot decreases with time. Traders place their bids based on what they think is a fair price. When the lot price will match the bids, a trade will be settled. All traders which bid above or equal to the lot price will receive tokens in exchange for their ether. slow.trade is an UI for DutchX. It is a user-friendly way to trade tokens without needing to worry about picking the right price or directly interacting with a smart contract. slow.trade shows the price of a last closed auction as an estimate of a current market price. The application also keeps track of auctions that a user takes part in. Resources Website Gnosis Safe slow.trade","title":"Gnosis"},{"location":"built-on-ethereum/open-finance/prediction-markets/gnosis/#gnosis","text":"","title":"Gnosis"},{"location":"built-on-ethereum/open-finance/prediction-markets/gnosis/#summary","text":"Gnosis creates a global forecasting and information discovery tool by building a prediction market platform on Ethereum. This platform strives to gather liquidity of expert information. Gnosis starts with a core layer, which is a set of smart contracts. Value-added paid services built by the team will form the Gnosis Service layer. Gnosis also plans to make end-user applications along with third-party developers at the spplication layer.","title":"Summary"},{"location":"built-on-ethereum/open-finance/prediction-markets/gnosis/#token","text":"There are two tokens in Gnosis: GNO and OWL. The main utility of OWL token is to pay for the creation of prediction markets. Users receive OWL by locking their GNO tokens. The used OWL is burned.","title":"Token"},{"location":"built-on-ethereum/open-finance/prediction-markets/gnosis/#gnosis-safe","text":"On November 28th, 2018, the Gnosis Safe smart contract went live on the Ethereum mainnet. The Gnosis Safe allows you to download the Android or iOS app and deploy a mobile-friendly personal smart contract wallet (multisig). You can add a Chrome extension that will hold the second key and will allow you to interact with dApps similar to Metamask (but then with your phone effectively as a 2FA device).","title":"Gnosis Safe"},{"location":"built-on-ethereum/open-finance/prediction-markets/gnosis/#dutchx-and-slowtrade","text":"DutchX is a protocol implementing Dutch action to perform trades of ERC20 tokens. Every 6 hours, a new action is started for each listed token. The price of a lot decreases with time. Traders place their bids based on what they think is a fair price. When the lot price will match the bids, a trade will be settled. All traders which bid above or equal to the lot price will receive tokens in exchange for their ether. slow.trade is an UI for DutchX. It is a user-friendly way to trade tokens without needing to worry about picking the right price or directly interacting with a smart contract. slow.trade shows the price of a last closed auction as an estimate of a current market price. The application also keeps track of auctions that a user takes part in.","title":"DutchX and slow.trade"},{"location":"built-on-ethereum/open-finance/prediction-markets/gnosis/#resources","text":"Website Gnosis Safe slow.trade","title":"Resources"},{"location":"built-on-ethereum/open-finance/prediction-markets/what-are-prediction-markets/","text":"Prediction Markets Summary Prediction markets facilitate the trading of event derivatives. They have been around since the 1990s and are sometimes also referred to as information markets, idea futures, and decision markets. Participants use prediction markets to speculate on outcomes of events. Many believe that decentralizing prediction markets will allow us to harness their full potential by lowering the cost of participating, bypassing strict regulation and increasing adoption by making the platforms more accessible across geographies. Resources Wikipedia Circle Prediction Markets Report","title":"What are Prediction Markets?"},{"location":"built-on-ethereum/open-finance/prediction-markets/what-are-prediction-markets/#prediction-markets","text":"","title":"Prediction Markets"},{"location":"built-on-ethereum/open-finance/prediction-markets/what-are-prediction-markets/#summary","text":"Prediction markets facilitate the trading of event derivatives. They have been around since the 1990s and are sometimes also referred to as information markets, idea futures, and decision markets. Participants use prediction markets to speculate on outcomes of events. Many believe that decentralizing prediction markets will allow us to harness their full potential by lowering the cost of participating, bypassing strict regulation and increasing adoption by making the platforms more accessible across geographies.","title":"Summary"},{"location":"built-on-ethereum/open-finance/prediction-markets/what-are-prediction-markets/#resources","text":"Wikipedia Circle Prediction Markets Report","title":"Resources"},{"location":"built-on-ethereum/open-finance/securities/abacus/","text":"Abacus Summary Abacus makes an ecosystem for financial applications and service providers. Users can interact with financial applications using Abacus. Under the hood, these applications communicate with smart contracts and service providers. Service providers can be used for identity, compliance, and appraisal. They can run either on-hain or off-chain. In case the service is running off-chain, users should first request a quote for the service. After the user submits the data and pays for the service, a provider will write results in the blockchain, where applications and the protocol can access it. Resources Website","title":"Abacus"},{"location":"built-on-ethereum/open-finance/securities/abacus/#abacus","text":"","title":"Abacus"},{"location":"built-on-ethereum/open-finance/securities/abacus/#summary","text":"Abacus makes an ecosystem for financial applications and service providers. Users can interact with financial applications using Abacus. Under the hood, these applications communicate with smart contracts and service providers. Service providers can be used for identity, compliance, and appraisal. They can run either on-hain or off-chain. In case the service is running off-chain, users should first request a quote for the service. After the user submits the data and pays for the service, a provider will write results in the blockchain, where applications and the protocol can access it.","title":"Summary"},{"location":"built-on-ethereum/open-finance/securities/abacus/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/securities/harbor/","text":"Harbor Summary Harbor works on the R-Token - a token standard for regulated trading of tokenized securities. Although blockchains like Ethereum are permissionless, and in theory anyone can create a token and distribute it on their own terms, issuing and trading securities is a heavily regulated space. The rules vary depending on the country and the type of security. R-Token is a regulated token that can represent ownership of a security and it is based on the ERC-20 standard. Every time an investor transfers a token, the smart contract checks a 'Regulator Service' to ensure that an investor has the right to make a particular transfer. A 'Regulator Service' is an approved entity that verifies security token transfers based on KYC/AML rules, security regulations, vesting schedules, and participants' identity. Resources Website","title":"Harbor"},{"location":"built-on-ethereum/open-finance/securities/harbor/#harbor","text":"","title":"Harbor"},{"location":"built-on-ethereum/open-finance/securities/harbor/#summary","text":"Harbor works on the R-Token - a token standard for regulated trading of tokenized securities. Although blockchains like Ethereum are permissionless, and in theory anyone can create a token and distribute it on their own terms, issuing and trading securities is a heavily regulated space. The rules vary depending on the country and the type of security. R-Token is a regulated token that can represent ownership of a security and it is based on the ERC-20 standard. Every time an investor transfers a token, the smart contract checks a 'Regulator Service' to ensure that an investor has the right to make a particular transfer. A 'Regulator Service' is an approved entity that verifies security token transfers based on KYC/AML rules, security regulations, vesting schedules, and participants' identity.","title":"Summary"},{"location":"built-on-ethereum/open-finance/securities/harbor/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/securities/polymath/","text":"Polymath Summary Polymath aims to bring compliant securities to Ethereum in the form of tokens. Any company can apply to issue tokenized securities using Polymaths platform. Legal delegates review the application, place their bids and then an issuer selects a delegate based on the bid and their past performance. The issuer publishes all required documentation, with the hash of the documents placed on-chain. In collaboration with the chosen legal delegate, they define a set of restrictions to comply with regulators. Investors can purchase tokenized securities from issuers as long as they fit the compliance criteria. They will need to work with one of the KYC providers to bind their identity with their Ethereum address. Once they are approved, they can trade security tokens on primary and secondary markets. Resources Website","title":"Polymath"},{"location":"built-on-ethereum/open-finance/securities/polymath/#polymath","text":"","title":"Polymath"},{"location":"built-on-ethereum/open-finance/securities/polymath/#summary","text":"Polymath aims to bring compliant securities to Ethereum in the form of tokens. Any company can apply to issue tokenized securities using Polymaths platform. Legal delegates review the application, place their bids and then an issuer selects a delegate based on the bid and their past performance. The issuer publishes all required documentation, with the hash of the documents placed on-chain. In collaboration with the chosen legal delegate, they define a set of restrictions to comply with regulators. Investors can purchase tokenized securities from issuers as long as they fit the compliance criteria. They will need to work with one of the KYC providers to bind their identity with their Ethereum address. Once they are approved, they can trade security tokens on primary and secondary markets.","title":"Summary"},{"location":"built-on-ethereum/open-finance/securities/polymath/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/securities/securitize/","text":"Securitize Summary The Securitize platform is a proven, robust, feature-rich platform with multiple successful issuances of digital securities on the blockchain. Securitize is a full stack technology services platform with powerful features and specialized tools for both investors and issuers. The Securitize platform allows users to manage their digital securities from one convenient dashboard. The Securitize DS Protocol provides the most complete, flexible and adopted compliance solution in the market today. The DS Protocol ensures digital securities issued via the Securitize platform can be traded compliantly across all marketplaces and exchanges. Resources Website","title":"Securitize"},{"location":"built-on-ethereum/open-finance/securities/securitize/#securitize","text":"","title":"Securitize"},{"location":"built-on-ethereum/open-finance/securities/securitize/#summary","text":"The Securitize platform is a proven, robust, feature-rich platform with multiple successful issuances of digital securities on the blockchain. Securitize is a full stack technology services platform with powerful features and specialized tools for both investors and issuers. The Securitize platform allows users to manage their digital securities from one convenient dashboard. The Securitize DS Protocol provides the most complete, flexible and adopted compliance solution in the market today. The DS Protocol ensures digital securities issued via the Securitize platform can be traded compliantly across all marketplaces and exchanges.","title":"Summary"},{"location":"built-on-ethereum/open-finance/securities/securitize/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/securities/templum/","text":"Templum Summary Templum is a technology innovator that provides regulated market infrastructure for the digital asset sector, including a blockchain-enabled platform for capital raising and secondary trading. Templum\u2019s flagship broker-dealer subsidiary, Templum Markets, is a blockchain-enabled, regulated marketplace for the primary sale and secondary trading of digital assets. Resources Website","title":"Templum"},{"location":"built-on-ethereum/open-finance/securities/templum/#templum","text":"","title":"Templum"},{"location":"built-on-ethereum/open-finance/securities/templum/#summary","text":"Templum is a technology innovator that provides regulated market infrastructure for the digital asset sector, including a blockchain-enabled platform for capital raising and secondary trading. Templum\u2019s flagship broker-dealer subsidiary, Templum Markets, is a blockchain-enabled, regulated marketplace for the primary sale and secondary trading of digital assets.","title":"Summary"},{"location":"built-on-ethereum/open-finance/securities/templum/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/securities/what-are-tokenized-securities/","text":"Tokenized Securities What are tokenized securities? Security Tokens are digital assets subject to federal security regulations. In layman terms, they are the intersection of digital assets (tokens) with traditional financial products. If cryptocurrencies like Bitcoin are considered \u201cprogrammable money\u201d then you can consider Security Tokens a version of \u201cprogrammable ownership.\u201d This means that any asset with ownership can and will be tokenized (public private equities, debt, real estate, etc). Some of the potential benefits include: Illiquid assets\u200a\u2014\u200alike VC interest, hedge fund interest, real estate etc can become liquid Lower issuance cost, i.e. fundraise at much lower cost Global markets could become accessible with less friction and thus lead to a larger investor base Trade fractions of an asset Overall lower cost, ease of transfer and settlement Potentially enables an open financial system as security tokens become compatible with smart contracts Instant convertibility between crypto assets and currencies Securities platforms Abacus Harbor Polymath Templum Securitize Resources The Crypto-Securities Canon Security Tokens Explained How Tokenization Is Putting Real-World Assets on Blockchains Understanding Security Token Offerings (STO)","title":"What are Tokenized Securities?"},{"location":"built-on-ethereum/open-finance/securities/what-are-tokenized-securities/#tokenized-securities","text":"","title":"Tokenized Securities"},{"location":"built-on-ethereum/open-finance/securities/what-are-tokenized-securities/#what-are-tokenized-securities","text":"Security Tokens are digital assets subject to federal security regulations. In layman terms, they are the intersection of digital assets (tokens) with traditional financial products. If cryptocurrencies like Bitcoin are considered \u201cprogrammable money\u201d then you can consider Security Tokens a version of \u201cprogrammable ownership.\u201d This means that any asset with ownership can and will be tokenized (public private equities, debt, real estate, etc). Some of the potential benefits include: Illiquid assets\u200a\u2014\u200alike VC interest, hedge fund interest, real estate etc can become liquid Lower issuance cost, i.e. fundraise at much lower cost Global markets could become accessible with less friction and thus lead to a larger investor base Trade fractions of an asset Overall lower cost, ease of transfer and settlement Potentially enables an open financial system as security tokens become compatible with smart contracts Instant convertibility between crypto assets and currencies","title":"What are tokenized securities?"},{"location":"built-on-ethereum/open-finance/securities/what-are-tokenized-securities/#securities-platforms","text":"Abacus Harbor Polymath Templum Securitize","title":"Securities platforms"},{"location":"built-on-ethereum/open-finance/securities/what-are-tokenized-securities/#resources","text":"The Crypto-Securities Canon Security Tokens Explained How Tokenization Is Putting Real-World Assets on Blockchains Understanding Security Token Offerings (STO)","title":"Resources"},{"location":"built-on-ethereum/open-finance/stablecoins/dai/","text":"Dai Summary Dai is an asset-backed stable currency created by the Maker Decentralized Autonomous Organization (MakerDAO). The Dai Stablecoin system maintains the stable value of Dai by ensuring that each Dai is always backed by a collateralized asset of more value. Single collateral Dai requires that each Dai is backed by at least 150% Ether. If at anytime, the amount of collateral backing Dai falls below 150%, \"watchers\" (community run bots) will call functions within the MakerDAO smart contracts that trigger liquidation of enough collateral to payback the debt. MakerDAO is one of the earliest projects in the Ethereum ecosystem. Importance Crypto assets are known for their high volatity which renders them unsuitable for medium of exchange. A stable cryptocurrency strives to become a medium of exchange by suppressing volatility and maintaining a consistant value through time. This innovation allows for individuals and business to enter into future agreements at a known cost. Just as one US Dollar today is equal to one dollar tomorrow, people can transact knowing they will have a certain fixed cost. Accomplishments The Dai Stablecoin System has been operating in Beta mode since December 2017. The Beta mode allows for a single collateral type, Ether. During the period of Dececember 2017 - December 2018, the price of Ether fell over 93% while Dai remained stable and over-collateralized throughout. Next Multi-Collateral Dai is the next and full version of the Dai Stablecoin System. In this system, all ERC-20 tokens are capable of being used as collateral for Dai. MakerDAO token (MKR) holders will be responsible for voting in and setting risk parameters for each collateral type. The scope of collateral types are as wide as tokens issued on the Ethereum platform. Resources Website CDP Interface #1 CDP Interface #2 Reddit Twitter Chat Podcasts Epicenter","title":"Dai"},{"location":"built-on-ethereum/open-finance/stablecoins/dai/#dai","text":"","title":"Dai"},{"location":"built-on-ethereum/open-finance/stablecoins/dai/#summary","text":"Dai is an asset-backed stable currency created by the Maker Decentralized Autonomous Organization (MakerDAO). The Dai Stablecoin system maintains the stable value of Dai by ensuring that each Dai is always backed by a collateralized asset of more value. Single collateral Dai requires that each Dai is backed by at least 150% Ether. If at anytime, the amount of collateral backing Dai falls below 150%, \"watchers\" (community run bots) will call functions within the MakerDAO smart contracts that trigger liquidation of enough collateral to payback the debt. MakerDAO is one of the earliest projects in the Ethereum ecosystem.","title":"Summary"},{"location":"built-on-ethereum/open-finance/stablecoins/dai/#importance","text":"Crypto assets are known for their high volatity which renders them unsuitable for medium of exchange. A stable cryptocurrency strives to become a medium of exchange by suppressing volatility and maintaining a consistant value through time. This innovation allows for individuals and business to enter into future agreements at a known cost. Just as one US Dollar today is equal to one dollar tomorrow, people can transact knowing they will have a certain fixed cost.","title":"Importance"},{"location":"built-on-ethereum/open-finance/stablecoins/dai/#accomplishments","text":"The Dai Stablecoin System has been operating in Beta mode since December 2017. The Beta mode allows for a single collateral type, Ether. During the period of Dececember 2017 - December 2018, the price of Ether fell over 93% while Dai remained stable and over-collateralized throughout.","title":"Accomplishments"},{"location":"built-on-ethereum/open-finance/stablecoins/dai/#next","text":"Multi-Collateral Dai is the next and full version of the Dai Stablecoin System. In this system, all ERC-20 tokens are capable of being used as collateral for Dai. MakerDAO token (MKR) holders will be responsible for voting in and setting risk parameters for each collateral type. The scope of collateral types are as wide as tokens issued on the Ethereum platform.","title":"Next"},{"location":"built-on-ethereum/open-finance/stablecoins/dai/#resources","text":"Website CDP Interface #1 CDP Interface #2 Reddit Twitter Chat","title":"Resources"},{"location":"built-on-ethereum/open-finance/stablecoins/dai/#podcasts","text":"Epicenter","title":"Podcasts"},{"location":"built-on-ethereum/open-finance/stablecoins/gusd/","text":"Gemini Dollar Summary On September 10, 2018, Gemini announced that it would released an ERC20 token pegged to the US Dollar called GUSD. Gemini users are able to convert US Dollars in their Gemini accounts into GUSD. However, the U.S dollars that correspond to the Gemini dollars issued and in circulation will be held at a bank located in the United States and eligible for FDIC \u201cpass-through\u201d deposit insurance, subject to applicable limitations. Risk of Frozen or Blacklisted Accounts To comply with regulations, GUSD uses an ERC20Proxy contract that gives Gemini, as the custodian, the ability to upgrade the contract once every 48 hours. Gemini included a mechanism in GUSD which would allow them to freeze user's funds. Auditing Process U.S. dollars that correspond to the Gemini dollars issued and in circulation are held at State Street Bank and Trust Company. The U.S. dollar deposit balance of Gemini's account is examined monthly by BPM, LLP, a registered public accounting firm, in order to verify the 1:1 peg. All Independent Accountants' Reports are published and available here: https://gemini.com/dollar/#reports Resources Website Whitepaper Smart Contract Adddress","title":"GUSD"},{"location":"built-on-ethereum/open-finance/stablecoins/gusd/#gemini-dollar","text":"","title":"Gemini Dollar"},{"location":"built-on-ethereum/open-finance/stablecoins/gusd/#summary","text":"On September 10, 2018, Gemini announced that it would released an ERC20 token pegged to the US Dollar called GUSD. Gemini users are able to convert US Dollars in their Gemini accounts into GUSD. However, the U.S dollars that correspond to the Gemini dollars issued and in circulation will be held at a bank located in the United States and eligible for FDIC \u201cpass-through\u201d deposit insurance, subject to applicable limitations.","title":"Summary"},{"location":"built-on-ethereum/open-finance/stablecoins/gusd/#risk-of-frozen-or-blacklisted-accounts","text":"To comply with regulations, GUSD uses an ERC20Proxy contract that gives Gemini, as the custodian, the ability to upgrade the contract once every 48 hours. Gemini included a mechanism in GUSD which would allow them to freeze user's funds.","title":"Risk of Frozen or Blacklisted Accounts"},{"location":"built-on-ethereum/open-finance/stablecoins/gusd/#auditing-process","text":"U.S. dollars that correspond to the Gemini dollars issued and in circulation are held at State Street Bank and Trust Company. The U.S. dollar deposit balance of Gemini's account is examined monthly by BPM, LLP, a registered public accounting firm, in order to verify the 1:1 peg. All Independent Accountants' Reports are published and available here: https://gemini.com/dollar/#reports","title":"Auditing Process"},{"location":"built-on-ethereum/open-finance/stablecoins/gusd/#resources","text":"Website Whitepaper Smart Contract Adddress","title":"Resources"},{"location":"built-on-ethereum/open-finance/stablecoins/paxos/","text":"Paxos Standard Summary Paxos is a Trust company, regulated by the New York State Department of Financial Services, with deep experience as an intermediary between fiat and digital assets. Paxos Standard is the first digital asset issued by a financial institution, and is fully collateralized by USD. PAX will always be redeemable one-to-one with USD (1 PAX = $1 USD), providing a stable and common currency for digital transactions. Resources Website","title":"Paxos"},{"location":"built-on-ethereum/open-finance/stablecoins/paxos/#paxos-standard","text":"","title":"Paxos Standard"},{"location":"built-on-ethereum/open-finance/stablecoins/paxos/#summary","text":"Paxos is a Trust company, regulated by the New York State Department of Financial Services, with deep experience as an intermediary between fiat and digital assets. Paxos Standard is the first digital asset issued by a financial institution, and is fully collateralized by USD. PAX will always be redeemable one-to-one with USD (1 PAX = $1 USD), providing a stable and common currency for digital transactions.","title":"Summary"},{"location":"built-on-ethereum/open-finance/stablecoins/paxos/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/stablecoins/synthetix/","text":"Synthetix What is Synthetix (sUSD)? There are two kinds of tokens in the Synthetix Network: SNX, the Synthetix network token; and Synths such as sUSD, the synthetic assets. SNX holders lock their SNX as collateral to back Synths. Synths are then minted into the market, where they can be used for a variety of purposes including trading and remittance. Circulating Synths generate transaction fees that are distributed to SNX holders, rewarding them for providing on-chain synthetic assets. Resources Website","title":"Synthetix"},{"location":"built-on-ethereum/open-finance/stablecoins/synthetix/#synthetix","text":"","title":"Synthetix"},{"location":"built-on-ethereum/open-finance/stablecoins/synthetix/#what-is-synthetix-40susd41","text":"There are two kinds of tokens in the Synthetix Network: SNX, the Synthetix network token; and Synths such as sUSD, the synthetic assets. SNX holders lock their SNX as collateral to back Synths. Synths are then minted into the market, where they can be used for a variety of purposes including trading and remittance. Circulating Synths generate transaction fees that are distributed to SNX holders, rewarding them for providing on-chain synthetic assets.","title":"What is Synthetix (sUSD)?"},{"location":"built-on-ethereum/open-finance/stablecoins/synthetix/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/stablecoins/tether/","text":"Tether Summary Launched in 2014, Tether is a blockchain-enabled platform designed to facilitate the use of fiat currencies in a digital manner. Tether works to disrupt the conventional financial system via a more modern approach to money. Tether has made headway by giving customers the ability to transact with traditional currencies across the blockchain, without the inherent volatility and complexity typically associated with a digital currency. How does Tether work? Tethers exists on blockchains using the Omni Protocol and as ERC20 tokens. These transport protocols consist of open source software that interface with blockchains to allow for the issuance and redemption of cryptocurrency tokens \u201ctethers\u201d. Tether Platform currencies are 100% backed by actual fiat currency assets in a reserve bank account. Tethers are redeemable and exchangeable pursuant to Tether Limited\u2019s terms of service. The conversion rate is 1 tether USD\u20ae equals 1 USD. Controversy A blockchain critic has raised questions about the relationship between Bitfinex and Tether, accusing Bitfinex of creating \"magic Tethers out of thin air\". In September 2017, Tether published a memorandum from a public accounting firm that Tether Limited then said showed that tethers were fully backed by US dollars; however, according to the New York Times, independent attorney Lewis Cohen stated the document, because of the careful way it was phrased, does not prove that the Tether coins are backed by dollars\". The documents also fail to ascertain whether the balances in question are otherwise encumbered.\". The accounting firm specifically stated that this information is intended solely to assist the management of Tether Limited ... and is not intended to be, and should not be, used or relied upon by any other party. During the course of a price manipulation investigation by the U.S. Commodity Futures Trading Commission and the United States Department of Justice, Phil Potter, Chief Strategy Officer of Bitfinex and an executive of Tether Limited, departed Bitfinex in 2018. The investigation was continuing on November 20, 2018 and focusing on Tether and Bitfinex, according to Bloomberg. Resources Website","title":"Tether"},{"location":"built-on-ethereum/open-finance/stablecoins/tether/#tether","text":"","title":"Tether"},{"location":"built-on-ethereum/open-finance/stablecoins/tether/#summary","text":"Launched in 2014, Tether is a blockchain-enabled platform designed to facilitate the use of fiat currencies in a digital manner. Tether works to disrupt the conventional financial system via a more modern approach to money. Tether has made headway by giving customers the ability to transact with traditional currencies across the blockchain, without the inherent volatility and complexity typically associated with a digital currency.","title":"Summary"},{"location":"built-on-ethereum/open-finance/stablecoins/tether/#how-does-tether-work","text":"Tethers exists on blockchains using the Omni Protocol and as ERC20 tokens. These transport protocols consist of open source software that interface with blockchains to allow for the issuance and redemption of cryptocurrency tokens \u201ctethers\u201d. Tether Platform currencies are 100% backed by actual fiat currency assets in a reserve bank account. Tethers are redeemable and exchangeable pursuant to Tether Limited\u2019s terms of service. The conversion rate is 1 tether USD\u20ae equals 1 USD.","title":"How does Tether work?"},{"location":"built-on-ethereum/open-finance/stablecoins/tether/#controversy","text":"A blockchain critic has raised questions about the relationship between Bitfinex and Tether, accusing Bitfinex of creating \"magic Tethers out of thin air\". In September 2017, Tether published a memorandum from a public accounting firm that Tether Limited then said showed that tethers were fully backed by US dollars; however, according to the New York Times, independent attorney Lewis Cohen stated the document, because of the careful way it was phrased, does not prove that the Tether coins are backed by dollars\". The documents also fail to ascertain whether the balances in question are otherwise encumbered.\". The accounting firm specifically stated that this information is intended solely to assist the management of Tether Limited ... and is not intended to be, and should not be, used or relied upon by any other party. During the course of a price manipulation investigation by the U.S. Commodity Futures Trading Commission and the United States Department of Justice, Phil Potter, Chief Strategy Officer of Bitfinex and an executive of Tether Limited, departed Bitfinex in 2018. The investigation was continuing on November 20, 2018 and focusing on Tether and Bitfinex, according to Bloomberg.","title":"Controversy"},{"location":"built-on-ethereum/open-finance/stablecoins/tether/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/stablecoins/trueusd/","text":"True USD Summary TrueUSD (TUSD) is a stablecoin that you can redeem 1-for-1 for US dollars. TUSD is the first asset token created on the TrustToken Platform. Resources Website","title":"True USD"},{"location":"built-on-ethereum/open-finance/stablecoins/trueusd/#true-usd","text":"","title":"True USD"},{"location":"built-on-ethereum/open-finance/stablecoins/trueusd/#summary","text":"TrueUSD (TUSD) is a stablecoin that you can redeem 1-for-1 for US dollars. TUSD is the first asset token created on the TrustToken Platform.","title":"Summary"},{"location":"built-on-ethereum/open-finance/stablecoins/trueusd/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/stablecoins/usdc/","text":"USD Coin Summary USD Coin (USDC) is an currency-backed stablecoin created by Centre which was founded by Circle and Coinbase. The initial implementation is an ERC-20 token that creates possibilities in payments, lending, investing, trading and trade finance. Individuals and institutions can deposit US dollars from bank accounts, convert those dollars into tokens usable everywhere the internet reaches (subject to the token\u2019s compliance controls), and redeem USDC tokens and cash out to bank accounts. USD Coin is supported by many wallets, exchanges and software applications. Resources Website Blog","title":"USDC"},{"location":"built-on-ethereum/open-finance/stablecoins/usdc/#usd-coin","text":"","title":"USD Coin"},{"location":"built-on-ethereum/open-finance/stablecoins/usdc/#summary","text":"USD Coin (USDC) is an currency-backed stablecoin created by Centre which was founded by Circle and Coinbase. The initial implementation is an ERC-20 token that creates possibilities in payments, lending, investing, trading and trade finance. Individuals and institutions can deposit US dollars from bank accounts, convert those dollars into tokens usable everywhere the internet reaches (subject to the token\u2019s compliance controls), and redeem USDC tokens and cash out to bank accounts. USD Coin is supported by many wallets, exchanges and software applications.","title":"Summary"},{"location":"built-on-ethereum/open-finance/stablecoins/usdc/#resources","text":"Website Blog","title":"Resources"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/","text":"Stablecoins What are Stablecoins? A useful currency should be a medium of exchange, a unit of account, and a store of value. Cryptocurrencies excel at the first, but as a store of value or unit of account, they\u2019re pretty bad. You cannot be an effective store of value if your price fluctuates by 20% on a normal day. Stablecoins are cryptocurrencies designed to minimize the effects of price volatility, thus they seek to function as a store of value and a unit of account. To minimize volatility the value of a stablecoin can be pegged to a currency, or to exchange traded commodities (such as precious metals or industrial metals). Stablecoins backed by currencies or commodities directly are said to be centralized, whereas those leveraging other cryptocurrencies are referred to as decentralized. Types of Stablecoins Currency-backed Cryptocurrencies backed by currency (fiat) are the most common and were the first type of stablecoins on the market. Their characteristics are: Their value is pegged to one or more currencies (most commonly the US dollar, also the Euro and the Swiss franc). The peg is realized off-chain, through banks or other types of regulated financial institutions which serve as depositaries of the currency used to back the stablecoin. The amount of the currency used for backing of the stablecoin has to reflect the circulating supply of the stablecoin. Notable currency-backed stablecoins: Gemini Dollar USD Coin Tether TrueUSD Paxos Standard Collateralized (crypto-backed) Cryptocurrency backed stablecoins are issued with cryptocurrencies as collateral, which is conceptually similar to fiat-backed stablecoins. However, the significant difference between the two designs is that while fiat collateralization typically happens off the blockchain, the cryptocurrency or crypto asset used to back this type of stablecoins is done on the blockchain, using smart contracts in a more decentralized fashion. For example, MakerDAO's DAI stablecoin is generated when someone opens a collateralized debt position (CDP), deposits some ETH as collateral, and then withdraws DAI from their CDP. The ETH acts as collateral. Notable collateral-backed stablecoins: MakerDAO - DAI Bitshares - BitUSD Synthetix - SUSD Seigniorage (algorithmic) Seigniorage (or algorithmic) stablecoins can be linked to a decentralized autonomous organization which controls issuance and pricing. The supply of algorithmic stablecoins is typically controlled by issuing and destroying coins depending on the market demand, until the target price is reached. In the general case, market participants are incentivized to act in a way that the price is kept at target level by issuing either bonds, in times of decreasing price or seigniorage shares when the price is above target. Notable algorithmic stablecoins: Basis (project was cancelled) Ampleforth Tethered (sub-type of algorithmic) Tethered cryptocurrency assets have certain features of algorithmic stablecoins \u2013 and can be considered their sub-type, except they don\u2019t offer incentives in form of separate instruments (bonds or shares) to holders of the \u201cunderlying\u201d cryptocurrency and there is no governing algorithm that forces the price towards the target, except at the moment of creation of the asset. Tethered cryptocurrency assets are issued on-chain, by holders of the native cryptocurrency, with different pegs chosen by the issuer. The peg value is imported into the blockchain by consensus and can be a number of fiat currencies and exchange-traded commodities (e.g. USD, EUR, gold, silver, etc). Resources https://www.tokendaily.co/blog/a-taxonomy-of-stablecoins https://stablecoinindex.com https://en.wikipedia.org/wiki/Stablecoin","title":"What are Stablecoins?"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#stablecoins","text":"","title":"Stablecoins"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#what-are-stablecoins","text":"A useful currency should be a medium of exchange, a unit of account, and a store of value. Cryptocurrencies excel at the first, but as a store of value or unit of account, they\u2019re pretty bad. You cannot be an effective store of value if your price fluctuates by 20% on a normal day. Stablecoins are cryptocurrencies designed to minimize the effects of price volatility, thus they seek to function as a store of value and a unit of account. To minimize volatility the value of a stablecoin can be pegged to a currency, or to exchange traded commodities (such as precious metals or industrial metals). Stablecoins backed by currencies or commodities directly are said to be centralized, whereas those leveraging other cryptocurrencies are referred to as decentralized.","title":"What are Stablecoins?"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#types-of-stablecoins","text":"","title":"Types of Stablecoins"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#currency-backed","text":"Cryptocurrencies backed by currency (fiat) are the most common and were the first type of stablecoins on the market. Their characteristics are: Their value is pegged to one or more currencies (most commonly the US dollar, also the Euro and the Swiss franc). The peg is realized off-chain, through banks or other types of regulated financial institutions which serve as depositaries of the currency used to back the stablecoin. The amount of the currency used for backing of the stablecoin has to reflect the circulating supply of the stablecoin.","title":"Currency-backed"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#notable-currency-backed-stablecoins","text":"Gemini Dollar USD Coin Tether TrueUSD Paxos Standard","title":"Notable currency-backed stablecoins:"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#collateralized-40crypto-backed41","text":"Cryptocurrency backed stablecoins are issued with cryptocurrencies as collateral, which is conceptually similar to fiat-backed stablecoins. However, the significant difference between the two designs is that while fiat collateralization typically happens off the blockchain, the cryptocurrency or crypto asset used to back this type of stablecoins is done on the blockchain, using smart contracts in a more decentralized fashion. For example, MakerDAO's DAI stablecoin is generated when someone opens a collateralized debt position (CDP), deposits some ETH as collateral, and then withdraws DAI from their CDP. The ETH acts as collateral.","title":"Collateralized (crypto-backed)"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#notable-collateral-backed-stablecoins","text":"MakerDAO - DAI Bitshares - BitUSD Synthetix - SUSD","title":"Notable collateral-backed stablecoins:"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#seigniorage-40algorithmic41","text":"Seigniorage (or algorithmic) stablecoins can be linked to a decentralized autonomous organization which controls issuance and pricing. The supply of algorithmic stablecoins is typically controlled by issuing and destroying coins depending on the market demand, until the target price is reached. In the general case, market participants are incentivized to act in a way that the price is kept at target level by issuing either bonds, in times of decreasing price or seigniorage shares when the price is above target.","title":"Seigniorage (algorithmic)"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#notable-algorithmic-stablecoins","text":"Basis (project was cancelled) Ampleforth","title":"Notable algorithmic stablecoins:"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#tethered-40sub-type-of-algorithmic41","text":"Tethered cryptocurrency assets have certain features of algorithmic stablecoins \u2013 and can be considered their sub-type, except they don\u2019t offer incentives in form of separate instruments (bonds or shares) to holders of the \u201cunderlying\u201d cryptocurrency and there is no governing algorithm that forces the price towards the target, except at the moment of creation of the asset. Tethered cryptocurrency assets are issued on-chain, by holders of the native cryptocurrency, with different pegs chosen by the issuer. The peg value is imported into the blockchain by consensus and can be a number of fiat currencies and exchange-traded commodities (e.g. USD, EUR, gold, silver, etc).","title":"Tethered (sub-type of algorithmic)"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#resources","text":"https://www.tokendaily.co/blog/a-taxonomy-of-stablecoins https://stablecoinindex.com https://en.wikipedia.org/wiki/Stablecoin","title":"Resources"},{"location":"built-on-ethereum/tcrs/types-of-tcrs/","text":"Types of TCRs Unordered TCR Ordered TCR Graded TCR Layered TCR Nested TCR Combinatorial TCR Resources TCR Design Patterns","title":"Types of TCRs"},{"location":"built-on-ethereum/tcrs/types-of-tcrs/#types-of-tcrs","text":"","title":"Types of TCRs"},{"location":"built-on-ethereum/tcrs/types-of-tcrs/#unordered-tcr","text":"","title":"Unordered TCR"},{"location":"built-on-ethereum/tcrs/types-of-tcrs/#ordered-tcr","text":"","title":"Ordered TCR"},{"location":"built-on-ethereum/tcrs/types-of-tcrs/#graded-tcr","text":"","title":"Graded TCR"},{"location":"built-on-ethereum/tcrs/types-of-tcrs/#layered-tcr","text":"","title":"Layered TCR"},{"location":"built-on-ethereum/tcrs/types-of-tcrs/#nested-tcr","text":"","title":"Nested TCR"},{"location":"built-on-ethereum/tcrs/types-of-tcrs/#combinatorial-tcr","text":"","title":"Combinatorial TCR"},{"location":"built-on-ethereum/tcrs/types-of-tcrs/#resources","text":"TCR Design Patterns","title":"Resources"},{"location":"built-on-ethereum/tcrs/what-are-tcrs/","text":"Token Curated Registries (TCRs) Summary Token Curated Registries (TCRs) are registries of listings generated by token holders. Listings can be anything from names to hashes of full-blown records stored in IPFS. A holder stakes a portion of tokens to perform an action, i.e. adding a listing. Token holders can vote on whether to accept or reject the action using their tokens. A majority wins the vote and the action is accepted or rejected. The list is updated and should become more valuable given the improved listings and the fact that the staked tokens are now out of circulation. Token holders, acting in their own self-interest, will produce a valuable list by obtaining and staking a finite supply token. The more listings staked, the scarcer the tokens; the more valuable the list, the more valuable the tokens. Resources Introduction to Token Curated Registries","title":"What are TCRs"},{"location":"built-on-ethereum/tcrs/what-are-tcrs/#token-curated-registries-40tcrs41","text":"","title":"Token Curated Registries (TCRs)"},{"location":"built-on-ethereum/tcrs/what-are-tcrs/#summary","text":"Token Curated Registries (TCRs) are registries of listings generated by token holders. Listings can be anything from names to hashes of full-blown records stored in IPFS. A holder stakes a portion of tokens to perform an action, i.e. adding a listing. Token holders can vote on whether to accept or reject the action using their tokens. A majority wins the vote and the action is accepted or rejected. The list is updated and should become more valuable given the improved listings and the fact that the staked tokens are now out of circulation. Token holders, acting in their own self-interest, will produce a valuable list by obtaining and staking a finite supply token. The more listings staked, the scarcer the tokens; the more valuable the list, the more valuable the tokens.","title":"Summary"},{"location":"built-on-ethereum/tcrs/what-are-tcrs/#resources","text":"Introduction to Token Curated Registries","title":"Resources"},{"location":"ethereum-basics/governance/","text":"Governance Summary Blockchains are distributed systems. They are essentially consensus protocols, which means that different nodes in the network (e.g. computers on the internet) have to be running compatible software. \u201cNode operators\u201d are the owners and managers of nodes that run the protocol. Most node operators don\u2019t want to write much software, and it\u2019s a technical challenge for anyone to independently write compatible implementations of any consensus protocol even if they have a specification. As a result, node operators rely on software repositories (usually hosted on Microsoft/Github servers) to provide them with the software they choose to run. \u201cCore developers\u201d of a blockchain are software developers who work on the software that implement that protocol. Developers have processes that are supposed to assure the quality of the software they release, and are generally very interested in maintaining the legitimacy of their software repositories because they want to see people using their software (as opposed to someone else\u2019s). Critical Components of Governance 1. Incentives Each group in the system has their own incentives. Those incentives are not always 100% aligned with all other groups in the system. Groups will propose changes over time which are advantageous for them. Organisms are biased towards their own survival. This commonly manifests in changes to the reward structure, monetary policy, or balances of power. 2. Mechanisms for Coordination Since it\u2019s unlikely all groups have 100% incentive alignment at all times, the ability for each group to coordinate around their common incentives is critical for them to affect change. If one group can coordinate better than another, it creates power imbalances in their favor. In practice, a major factor is how much coordination can be done on-chain vs. off-chain, where on-chain coordination makes coordinating easier. In some new blockchains (such as Tezos or Polkadot), on-chain coordination allows the rules or even the ledger history itself to be changed. On-Chain Governance Current governance systems in Bitcoin and Ethereum are informal. They were designed using a decentralized ethos, first promulgated by Satoshi Nakamoto in his original paper. Improvement proposals to make changes to the blockchain are submitted by developers and a core group, consisting mostly of developers, is responsible for coordinating and achieving consensus between stakeholders. The stakeholders in this case are miners (who operate nodes), developers (who are responsible for core blockchain algorithms) and users (who use and invest in various coins). What is on-chain governance? On-chain governance is a system for managing and implementing changes to cryptocurrency blockchains. In this type of governance, rules for instituting changes are encoded into the blockchain protocol. Developers propose changes through code updates and each node votes on whether to accept or reject the proposed change. How does it work? Unlike informal governance systems, which use a combination of offline coordination and online code modifications to effect changes, on-chain governance systems solely work online. Changes to a blockchain are proposed through code updates. Subsequently, nodes can vote to accept or decline the change. Not all nodes have equal voting power. Nodes with greater holdings of coins have more votes as compared to nodes that have a relatively lesser number of holdings. If the change is accepted, it is included in the blockchain and baselined. In some instances of on-chain governance implementation, the updated code may be rolled back to its version before a baseline, if the proposed change is unsuccessful. Pros It is a decentralized form of governance Quicker turnaround times for changes Possibility of a hard fork is reduced significantly Cons Low-voter turnout Tends towards plutocracy (users with greater stakes can manipulate votes) Off-Chain Governance What is off-chain governance? Off-chain governance looks and behaves a lot similar to politics in the existing world. Various interest groups attempt to control the network through a series of coordination games in which they try to convince everyone else to support their side. There is no code that binds these groups to specific behaviors, but rather, they choose what\u2019s in their best interest given the known preferences of the other stakeholders. There\u2019s a reason blockchain technology and game theory are so interwoven. How does it work? Improvement proposals to make changes to the blockchain are submitted by developers and a core group, consisting mostly of developers, is responsible for coordinating and achieving consensus between stakeholders. The stakeholders in this case are miners (who operate nodes), developers (who are responsible for core blockchain algorithms) and users (who use and invest in various coins). The various stakeholders signal their approval or disapproval for an improvement proposal through private and community discourse. Then, the core developers get a sense for whether or not node operators and miners will agree to upgrade their software. Ideally, all sides agree and the code changes are made smoothly. Everything is announced beforehand and stakeholders have time to update. In the case of disagreement, stakeholders have two options. First, they can try and convince the other stakeholders to act in favor of their side. If they can\u2019t reach consensus, they have the ability to hard fork the protocol and keep or change features they think are necessary. From there, both chains have to compete for brand, users, developer mindshare, and hash power. Resources Why on-chain governance? On-chain governance explained Off-chain governance explained","title":"Governance"},{"location":"ethereum-basics/governance/#governance","text":"","title":"Governance"},{"location":"ethereum-basics/governance/#summary","text":"Blockchains are distributed systems. They are essentially consensus protocols, which means that different nodes in the network (e.g. computers on the internet) have to be running compatible software. \u201cNode operators\u201d are the owners and managers of nodes that run the protocol. Most node operators don\u2019t want to write much software, and it\u2019s a technical challenge for anyone to independently write compatible implementations of any consensus protocol even if they have a specification. As a result, node operators rely on software repositories (usually hosted on Microsoft/Github servers) to provide them with the software they choose to run. \u201cCore developers\u201d of a blockchain are software developers who work on the software that implement that protocol. Developers have processes that are supposed to assure the quality of the software they release, and are generally very interested in maintaining the legitimacy of their software repositories because they want to see people using their software (as opposed to someone else\u2019s).","title":"Summary"},{"location":"ethereum-basics/governance/#critical-components-of-governance","text":"1. Incentives Each group in the system has their own incentives. Those incentives are not always 100% aligned with all other groups in the system. Groups will propose changes over time which are advantageous for them. Organisms are biased towards their own survival. This commonly manifests in changes to the reward structure, monetary policy, or balances of power. 2. Mechanisms for Coordination Since it\u2019s unlikely all groups have 100% incentive alignment at all times, the ability for each group to coordinate around their common incentives is critical for them to affect change. If one group can coordinate better than another, it creates power imbalances in their favor. In practice, a major factor is how much coordination can be done on-chain vs. off-chain, where on-chain coordination makes coordinating easier. In some new blockchains (such as Tezos or Polkadot), on-chain coordination allows the rules or even the ledger history itself to be changed.","title":"Critical Components of Governance"},{"location":"ethereum-basics/governance/#on-chain-governance","text":"Current governance systems in Bitcoin and Ethereum are informal. They were designed using a decentralized ethos, first promulgated by Satoshi Nakamoto in his original paper. Improvement proposals to make changes to the blockchain are submitted by developers and a core group, consisting mostly of developers, is responsible for coordinating and achieving consensus between stakeholders. The stakeholders in this case are miners (who operate nodes), developers (who are responsible for core blockchain algorithms) and users (who use and invest in various coins).","title":"On-Chain Governance"},{"location":"ethereum-basics/governance/#what-is-on-chain-governance","text":"On-chain governance is a system for managing and implementing changes to cryptocurrency blockchains. In this type of governance, rules for instituting changes are encoded into the blockchain protocol. Developers propose changes through code updates and each node votes on whether to accept or reject the proposed change.","title":"What is on-chain governance?"},{"location":"ethereum-basics/governance/#how-does-it-work","text":"Unlike informal governance systems, which use a combination of offline coordination and online code modifications to effect changes, on-chain governance systems solely work online. Changes to a blockchain are proposed through code updates. Subsequently, nodes can vote to accept or decline the change. Not all nodes have equal voting power. Nodes with greater holdings of coins have more votes as compared to nodes that have a relatively lesser number of holdings. If the change is accepted, it is included in the blockchain and baselined. In some instances of on-chain governance implementation, the updated code may be rolled back to its version before a baseline, if the proposed change is unsuccessful.","title":"How does it work?"},{"location":"ethereum-basics/governance/#pros","text":"It is a decentralized form of governance Quicker turnaround times for changes Possibility of a hard fork is reduced significantly","title":"Pros"},{"location":"ethereum-basics/governance/#cons","text":"Low-voter turnout Tends towards plutocracy (users with greater stakes can manipulate votes)","title":"Cons"},{"location":"ethereum-basics/governance/#off-chain-governance","text":"","title":"Off-Chain Governance"},{"location":"ethereum-basics/governance/#what-is-off-chain-governance","text":"Off-chain governance looks and behaves a lot similar to politics in the existing world. Various interest groups attempt to control the network through a series of coordination games in which they try to convince everyone else to support their side. There is no code that binds these groups to specific behaviors, but rather, they choose what\u2019s in their best interest given the known preferences of the other stakeholders. There\u2019s a reason blockchain technology and game theory are so interwoven.","title":"What is off-chain governance?"},{"location":"ethereum-basics/governance/#how-does-it-work_1","text":"Improvement proposals to make changes to the blockchain are submitted by developers and a core group, consisting mostly of developers, is responsible for coordinating and achieving consensus between stakeholders. The stakeholders in this case are miners (who operate nodes), developers (who are responsible for core blockchain algorithms) and users (who use and invest in various coins). The various stakeholders signal their approval or disapproval for an improvement proposal through private and community discourse. Then, the core developers get a sense for whether or not node operators and miners will agree to upgrade their software. Ideally, all sides agree and the code changes are made smoothly. Everything is announced beforehand and stakeholders have time to update. In the case of disagreement, stakeholders have two options. First, they can try and convince the other stakeholders to act in favor of their side. If they can\u2019t reach consensus, they have the ability to hard fork the protocol and keep or change features they think are necessary. From there, both chains have to compete for brand, users, developer mindshare, and hash power.","title":"How does it work?"},{"location":"ethereum-basics/governance/#resources","text":"Why on-chain governance? On-chain governance explained Off-chain governance explained","title":"Resources"},{"location":"ethereum-basics/history-and-forks/","text":"History and Network Upgrades Initial Concept Vitalik Buterin first described the concept of Ethereum through the White Paper and first introduced the concept publicly at Bitcoin Miami 2014. The underlying impetus to develop Ethereum and consequently Ether was to utilize aspects of the technology initially developed as part of the Bitcoin blockchain and combine it with the capabilities of smart contract technology. The idea was that this marriage would lead to a platform that could sustain not only the money or medium of exchange use case, but also to add programmability to money, introducing conditional logic to the equation that would open up a world of possibilities with regards to decentralized financial applications and products, and additional decentralized applications. Initial ETH Distribution The Ethereum presale took place from Tuesday, 22 July 2014 to Tuesday, 2 September 2014, lasting a total of 42 days. The price of ether was initially set to a discounted price of 2000 ETH per BTC, and stayed that way for 14 days before linearly declining to a final rate of 1337 ETH per BTC. 60 Million ether was created for the presale of which 80% was available for purchase with 20% (or 12 Million) being retained by the Ethereum Foundations 'development fund' which consisted of early contributors to the project and developers. The presale ended with ~31,000 BTC (equivalent to ~$18.3 million) being raised by the Ethereum Foundation over the 42 days. Ether was not usable or transferable until the launch of the genesis block which occurred on July 30th, 2015. Network Upgrade History Name Block Date Frontier 1 2015-07-30 Frontier Thawing 200000 2015-09-07 Homestead 1150000 2016-03-14 DAO Fork 1920000 2016-07-20 Tangerine Whistle 2463000 2016-10-18 Spurious Dragon 2675000 2016-11-22 Byzantium 4370000 2017-10-16 Constantinople 7280000 ~2019-02-27 Resources Launching the Ether Sale A Statistical Overview of the Ether Sale","title":"History and Network Upgrades"},{"location":"ethereum-basics/history-and-forks/#history-and-network-upgrades","text":"","title":"History and Network Upgrades"},{"location":"ethereum-basics/history-and-forks/#initial-concept","text":"Vitalik Buterin first described the concept of Ethereum through the White Paper and first introduced the concept publicly at Bitcoin Miami 2014. The underlying impetus to develop Ethereum and consequently Ether was to utilize aspects of the technology initially developed as part of the Bitcoin blockchain and combine it with the capabilities of smart contract technology. The idea was that this marriage would lead to a platform that could sustain not only the money or medium of exchange use case, but also to add programmability to money, introducing conditional logic to the equation that would open up a world of possibilities with regards to decentralized financial applications and products, and additional decentralized applications.","title":"Initial Concept"},{"location":"ethereum-basics/history-and-forks/#initial-eth-distribution","text":"The Ethereum presale took place from Tuesday, 22 July 2014 to Tuesday, 2 September 2014, lasting a total of 42 days. The price of ether was initially set to a discounted price of 2000 ETH per BTC, and stayed that way for 14 days before linearly declining to a final rate of 1337 ETH per BTC. 60 Million ether was created for the presale of which 80% was available for purchase with 20% (or 12 Million) being retained by the Ethereum Foundations 'development fund' which consisted of early contributors to the project and developers. The presale ended with ~31,000 BTC (equivalent to ~$18.3 million) being raised by the Ethereum Foundation over the 42 days. Ether was not usable or transferable until the launch of the genesis block which occurred on July 30th, 2015.","title":"Initial ETH Distribution"},{"location":"ethereum-basics/history-and-forks/#network-upgrade-history","text":"Name Block Date Frontier 1 2015-07-30 Frontier Thawing 200000 2015-09-07 Homestead 1150000 2016-03-14 DAO Fork 1920000 2016-07-20 Tangerine Whistle 2463000 2016-10-18 Spurious Dragon 2675000 2016-11-22 Byzantium 4370000 2017-10-16 Constantinople 7280000 ~2019-02-27","title":"Network Upgrade History"},{"location":"ethereum-basics/history-and-forks/#resources","text":"Launching the Ether Sale A Statistical Overview of the Ether Sale","title":"Resources"},{"location":"ethereum-basics/monetary-policy/","text":"Monetary Policy Summary Ethereum's Monetary Policy is defined by the rewards that are paid out by the protocol at any given time. At time of writing, Ethereum's yearly network inflation is approximately 6.7% with 3 Ether per block and an additional 2.5 Ether per uncle block (plus fees) being rewarded to miners. Ethereum does not have an official Monetary Policy. Rather, the policy is decided upon by a wide range of stakeholders within the ecosystem - including: Developers Community members Ecosystem spokes/projects Miners and other network participants As Ethereum is a decentralized network, the Monetary Policy can only be successfully modified if there is overwhelming consensus from the aforementioned stakeholders. Ethereum follows an off-chain governance process meaning that any and all decisions on changes to the network happen extra-protocol. Important Events Genesis Block As part of the Ethereum genesis block, initial contributors to Ethereum sale were allocated 60,000,000 Ether. Another 12,000,000 Ether was given to the development fund which was distributed among early contributors and the Ethereum Foundation. Historical Issuance Impacts Block Reward Reductions Every block produced on the Ethereum network has an associated block reward which incentivizes miners to support the network. On top of the base block reward, miners that find an uncle blocks receive ~75% of the current block reward. This results in a growing supply of Ether across time. The history of the block reward are as follows: Block 0 to Block 4,369,999: 5 Ether Block 4,370,000 to current: 3 Ether (changed via EIP-649 ) The Constantinople hard fork, targeted for block 7,280,000, will cut block rewards to 2 Ether per block via EIP-1234 . Other Events Issuance rate is also impacted by the speed of blocks. There have been a few other events in Ethereum's history which has impacted the issuance rate. Some planned and some not planned. The Homestead fork in March 2016 saw a decrease in block times and therefore a temporarily increase in issuance rate. In late 2016, the network was under DDoS attack. This increased the uncle rate, therefore causing a temporary rise in issuance rate. In mid 2017, a mechanism called the difficulty bomb (or \"Ethereum Ice Age\") started to kick in. This mean that difficulty of mining a block rose, therefore slowing down blocks. This resulted in a dramatic decrease in issuance rate. In late 2017, Byzantium fork was released which delayed the difficulty bomb and also reduced block rewards from 5 to 3. Proof of Stake Impact According to the current Eth 2.0 spec , issuance rate will be greatly reduced as a part of Proof of Stake. There will be a sliding scale between total amount of Ether at stake and annual interest earned by stakers. The current spec would produce the following annual interest and inflation numbers based on total network stake: Historical and Future Supply Forecast There are three majors upcoming factors when it comes to Ethereum's issuance rate and supply curve. They are: Constantinople Hard Fork: block rewards drop from 3 to 2. Serenity Phase 0 : Slight bump in issuance due to Beacon Chain launch. Serenity Phase 2 : Strong drop in issuance due to the PoW chain fading away.","title":"Monetary Policy"},{"location":"ethereum-basics/monetary-policy/#monetary-policy","text":"","title":"Monetary Policy"},{"location":"ethereum-basics/monetary-policy/#summary","text":"Ethereum's Monetary Policy is defined by the rewards that are paid out by the protocol at any given time. At time of writing, Ethereum's yearly network inflation is approximately 6.7% with 3 Ether per block and an additional 2.5 Ether per uncle block (plus fees) being rewarded to miners. Ethereum does not have an official Monetary Policy. Rather, the policy is decided upon by a wide range of stakeholders within the ecosystem - including: Developers Community members Ecosystem spokes/projects Miners and other network participants As Ethereum is a decentralized network, the Monetary Policy can only be successfully modified if there is overwhelming consensus from the aforementioned stakeholders. Ethereum follows an off-chain governance process meaning that any and all decisions on changes to the network happen extra-protocol.","title":"Summary"},{"location":"ethereum-basics/monetary-policy/#important-events","text":"","title":"Important Events"},{"location":"ethereum-basics/monetary-policy/#genesis-block","text":"As part of the Ethereum genesis block, initial contributors to Ethereum sale were allocated 60,000,000 Ether. Another 12,000,000 Ether was given to the development fund which was distributed among early contributors and the Ethereum Foundation.","title":"Genesis Block"},{"location":"ethereum-basics/monetary-policy/#historical-issuance-impacts","text":"Block Reward Reductions Every block produced on the Ethereum network has an associated block reward which incentivizes miners to support the network. On top of the base block reward, miners that find an uncle blocks receive ~75% of the current block reward. This results in a growing supply of Ether across time. The history of the block reward are as follows: Block 0 to Block 4,369,999: 5 Ether Block 4,370,000 to current: 3 Ether (changed via EIP-649 ) The Constantinople hard fork, targeted for block 7,280,000, will cut block rewards to 2 Ether per block via EIP-1234 . Other Events Issuance rate is also impacted by the speed of blocks. There have been a few other events in Ethereum's history which has impacted the issuance rate. Some planned and some not planned. The Homestead fork in March 2016 saw a decrease in block times and therefore a temporarily increase in issuance rate. In late 2016, the network was under DDoS attack. This increased the uncle rate, therefore causing a temporary rise in issuance rate. In mid 2017, a mechanism called the difficulty bomb (or \"Ethereum Ice Age\") started to kick in. This mean that difficulty of mining a block rose, therefore slowing down blocks. This resulted in a dramatic decrease in issuance rate. In late 2017, Byzantium fork was released which delayed the difficulty bomb and also reduced block rewards from 5 to 3.","title":"Historical Issuance Impacts"},{"location":"ethereum-basics/monetary-policy/#proof-of-stake-impact","text":"According to the current Eth 2.0 spec , issuance rate will be greatly reduced as a part of Proof of Stake. There will be a sliding scale between total amount of Ether at stake and annual interest earned by stakers. The current spec would produce the following annual interest and inflation numbers based on total network stake:","title":"Proof of Stake Impact"},{"location":"ethereum-basics/monetary-policy/#historical-and-future-supply-forecast","text":"There are three majors upcoming factors when it comes to Ethereum's issuance rate and supply curve. They are: Constantinople Hard Fork: block rewards drop from 3 to 2. Serenity Phase 0 : Slight bump in issuance due to Beacon Chain launch. Serenity Phase 2 : Strong drop in issuance due to the PoW chain fading away.","title":"Historical and Future Supply Forecast"},{"location":"ethereum-basics/resources/","text":"Resources Getting Started Intro to Ethereum Complete Beginners Guide to Cryptocurrency Litepaper - Ethereum Ethereum Explained Ethereum Syllabus Cryptocurrency Explained How A Blockchain Works (6 min video) Blockchain for Babies Further Education Awesome Decentralized Finance Awesome Zeppelin Cryptocurrency Education Portal Blockchain.com Learning Portal Interactive Blockchain Demo Crypto and Blockchain Glossary Circle Research Cryptoeconomics.study Media News Subreddits /r/Ethereum /r/EthTrader /r/EtherMining /r/EthDev /r/EthereumNoobies The Block Token Daily Token Economy Podcasts Into the Ether Epicenter An Ethereum Podcast Unchained Unconfirmed Zero Knowledge 51pct Podcast The Smartest Contract Flippening for Crypto Investors Block Zero Digitally Rare Village Global Multicoin Capital The Third Web a16z Podcast Blockchain Curated Newsletters EthHub Weekly Newsletter Week In Ethereum Messari Diar Token Economy Token Daily The Block NFTY News Long Reads Sunday CryptoChat Proof of Work Tony Sheng Protocol Weekly Global Coin Research Social Media Who to Follow on Twitter Reading Crypto Reading List Beginners Guide Series on Cryptoassets Master Reading List by a16z Mastering Ethereum Cryptoassets: The Innovative Investor's Guide to Bitcoin and Beyond Ethereum Whitepaper Blogs Fred Ehrsam (Coinbase Co-Founder) Vitalik Buterin (Ethereum Founder) Vlad Zamfir (Ethereum Core Developer) The Control by Nick Tomaino Multicoin Capital Hacking, Distributed (Emin G\u00fcn Sirer) Simon de la Rouviere Tony Sheng Preethi Kasireddy (Blockchain Engineer) Technical Resources Ethereum Tools Block Explorers Etherscan Ethplorer BlockScout Trivial EnjinX Wallets EthHub Wallets Section MyEtherWallet MyCrypto MetaMask Dapp Explorers Loanscan - Ethereum Loan Explorer State of the dApps Settle - Decentralized Finance OS Ethereum Data Explorers ObservEth Ethtective Ethereum Network Statistics Gas Price History Chart Ethereum Gas Station Ethereum Blockchain on Kaggle Miscellaneous List of Ethereum Public Calls Flippening Watch Run an Ethereum node Run an Ethereum Node DAppNode QuikNode Blockdaemon Vipnode Ethereum Development Ethereum Github Page Go-Ethereum Gitter Intro to Smart Contracts Ethereum Research Forum Ethereum Sharding Roadmap Ethereum Developer Tools List Ethereum Stack Exchange Ethereum Bounties EthList: The Crowdsourced Ethereum Reading List Quickblocks LearnChannels VDF Research Awesome Cryptoeconomics Token Engineering Wiki Web3 Foundation Wiki Zero-Knowledge Proofs Starter Pack Awesome Ethreum Virtual Machine Security MyCrypto's Security Guide Hardware Wallet Guide Paper Wallet Guide Trading Decentralized Exchanges (DEXs) EthHub DEX Section List of all Decentralized Exchanges Uniswap Radar Relay IDEX ForkDelta Paradex DEX Watcher ICO/Token Resources ICO Treasury Watcher ConcourseQ - ICO Due Dilligence Market Data Nomics OpenMarketCap OnChainFX Coinlib CoinMarketCap BitInfoCharts Woobull Charts Cryptowat.ch All-time-high Coin Index All-time-high Data Bitgur Cryptofinance Portfolio Tracking Delta Blockfolio Vizualizations Token Sale History Coin 360 (CryptoMaps) Real time Ethereum transactions Cointracker Visualizations Security Tracker Infrastructure Dapp Resources Non-fungible Token (NFT) Resources Rare Bits (Digital Asset Marketplace) OpenSea (Digital Asset Marketplace) Emoon (Digital Asset Marketplace) Atomic Bazaar (Digital Asset Marketplace) Nifty Gateway Cryptogoods Gallery NFT Reading List Nonfungible - Market Discovery and Analysis The Creative Crypto Magazine Dapp Tools General Awesome Crypto Trackers Universal dApp Store Dapp Trackers dApp Radar dApp Store dAppBoard dApp.com dApp Review Chain Activity MakerDAO MakerDAO CDP Portal Maker Tools MakerScan Awesome MakerDAO Augur Guesser Veil - Markets on Everything Predictions.global - Augur Prediction Markets Explore Augur DEX Tools Uniswap Explorer 0x Tracker Misc InstaDApp Are we stable yet? ETH Locked in DeFi Aragon DAO Explorer Curious Giraffe - Blockchain Analytics Miscellaneous Definitive SEC Guide Bitcoin on Ethereum Ethereum Obituaries Crypto Subreddit Tracker Crypto Periodic Table KeySheet Zero-Knowledge Proofs Starter Pack Securify Etherean.org Did the Ethereum blockchain reach 1TB yet? What About Archive Nodes? Blockchain Security Contacts The Brooklyn Project Crypto Grant Programs Plasma Map","title":"Resources"},{"location":"ethereum-basics/resources/#resources","text":"","title":"Resources"},{"location":"ethereum-basics/resources/#getting-started","text":"","title":"Getting Started"},{"location":"ethereum-basics/resources/#intro-to-ethereum","text":"Complete Beginners Guide to Cryptocurrency Litepaper - Ethereum Ethereum Explained Ethereum Syllabus Cryptocurrency Explained How A Blockchain Works (6 min video) Blockchain for Babies","title":"Intro to Ethereum"},{"location":"ethereum-basics/resources/#further-education","text":"Awesome Decentralized Finance Awesome Zeppelin Cryptocurrency Education Portal Blockchain.com Learning Portal Interactive Blockchain Demo Crypto and Blockchain Glossary Circle Research Cryptoeconomics.study","title":"Further Education"},{"location":"ethereum-basics/resources/#media","text":"","title":"Media"},{"location":"ethereum-basics/resources/#news","text":"Subreddits /r/Ethereum /r/EthTrader /r/EtherMining /r/EthDev /r/EthereumNoobies The Block Token Daily Token Economy","title":"News"},{"location":"ethereum-basics/resources/#podcasts","text":"Into the Ether Epicenter An Ethereum Podcast Unchained Unconfirmed Zero Knowledge 51pct Podcast The Smartest Contract Flippening for Crypto Investors Block Zero Digitally Rare Village Global Multicoin Capital The Third Web a16z Podcast Blockchain Curated","title":"Podcasts"},{"location":"ethereum-basics/resources/#newsletters","text":"EthHub Weekly Newsletter Week In Ethereum Messari Diar Token Economy Token Daily The Block NFTY News Long Reads Sunday CryptoChat Proof of Work Tony Sheng Protocol Weekly Global Coin Research","title":"Newsletters"},{"location":"ethereum-basics/resources/#social-media","text":"Who to Follow on Twitter","title":"Social Media"},{"location":"ethereum-basics/resources/#reading","text":"Crypto Reading List Beginners Guide Series on Cryptoassets Master Reading List by a16z Mastering Ethereum Cryptoassets: The Innovative Investor's Guide to Bitcoin and Beyond Ethereum Whitepaper","title":"Reading"},{"location":"ethereum-basics/resources/#blogs","text":"Fred Ehrsam (Coinbase Co-Founder) Vitalik Buterin (Ethereum Founder) Vlad Zamfir (Ethereum Core Developer) The Control by Nick Tomaino Multicoin Capital Hacking, Distributed (Emin G\u00fcn Sirer) Simon de la Rouviere Tony Sheng Preethi Kasireddy (Blockchain Engineer)","title":"Blogs"},{"location":"ethereum-basics/resources/#technical-resources","text":"","title":"Technical Resources"},{"location":"ethereum-basics/resources/#ethereum-tools","text":"","title":"Ethereum Tools"},{"location":"ethereum-basics/resources/#block-explorers","text":"Etherscan Ethplorer BlockScout Trivial EnjinX","title":"Block Explorers"},{"location":"ethereum-basics/resources/#wallets","text":"EthHub Wallets Section MyEtherWallet MyCrypto MetaMask","title":"Wallets"},{"location":"ethereum-basics/resources/#dapp-explorers","text":"Loanscan - Ethereum Loan Explorer State of the dApps Settle - Decentralized Finance OS","title":"Dapp Explorers"},{"location":"ethereum-basics/resources/#ethereum-data-explorers","text":"ObservEth Ethtective Ethereum Network Statistics Gas Price History Chart Ethereum Gas Station Ethereum Blockchain on Kaggle","title":"Ethereum Data Explorers"},{"location":"ethereum-basics/resources/#miscellaneous","text":"List of Ethereum Public Calls Flippening Watch","title":"Miscellaneous"},{"location":"ethereum-basics/resources/#run-an-ethereum-node","text":"Run an Ethereum Node DAppNode QuikNode Blockdaemon Vipnode","title":"Run an Ethereum node"},{"location":"ethereum-basics/resources/#ethereum-development","text":"Ethereum Github Page Go-Ethereum Gitter Intro to Smart Contracts Ethereum Research Forum Ethereum Sharding Roadmap Ethereum Developer Tools List Ethereum Stack Exchange Ethereum Bounties EthList: The Crowdsourced Ethereum Reading List Quickblocks LearnChannels VDF Research Awesome Cryptoeconomics Token Engineering Wiki Web3 Foundation Wiki Zero-Knowledge Proofs Starter Pack Awesome Ethreum Virtual Machine","title":"Ethereum Development"},{"location":"ethereum-basics/resources/#security","text":"MyCrypto's Security Guide Hardware Wallet Guide Paper Wallet Guide","title":"Security"},{"location":"ethereum-basics/resources/#trading","text":"","title":"Trading"},{"location":"ethereum-basics/resources/#decentralized-exchanges-40dexs41","text":"EthHub DEX Section List of all Decentralized Exchanges Uniswap Radar Relay IDEX ForkDelta Paradex DEX Watcher","title":"Decentralized Exchanges (DEXs)"},{"location":"ethereum-basics/resources/#icotoken-resources","text":"ICO Treasury Watcher ConcourseQ - ICO Due Dilligence","title":"ICO/Token Resources"},{"location":"ethereum-basics/resources/#market-data","text":"Nomics OpenMarketCap OnChainFX Coinlib CoinMarketCap BitInfoCharts Woobull Charts Cryptowat.ch All-time-high Coin Index All-time-high Data Bitgur Cryptofinance","title":"Market Data"},{"location":"ethereum-basics/resources/#portfolio-tracking","text":"Delta Blockfolio","title":"Portfolio Tracking"},{"location":"ethereum-basics/resources/#vizualizations","text":"Token Sale History Coin 360 (CryptoMaps) Real time Ethereum transactions Cointracker Visualizations Security Tracker Infrastructure","title":"Vizualizations"},{"location":"ethereum-basics/resources/#dapp-resources","text":"","title":"Dapp Resources"},{"location":"ethereum-basics/resources/#non-fungible-token-40nft41-resources","text":"Rare Bits (Digital Asset Marketplace) OpenSea (Digital Asset Marketplace) Emoon (Digital Asset Marketplace) Atomic Bazaar (Digital Asset Marketplace) Nifty Gateway Cryptogoods Gallery NFT Reading List Nonfungible - Market Discovery and Analysis The Creative Crypto Magazine","title":"Non-fungible Token (NFT) Resources"},{"location":"ethereum-basics/resources/#dapp-tools","text":"","title":"Dapp Tools"},{"location":"ethereum-basics/resources/#general","text":"Awesome Crypto Trackers Universal dApp Store","title":"General"},{"location":"ethereum-basics/resources/#dapp-trackers","text":"dApp Radar dApp Store dAppBoard dApp.com dApp Review Chain Activity","title":"Dapp Trackers"},{"location":"ethereum-basics/resources/#makerdao","text":"MakerDAO CDP Portal Maker Tools MakerScan Awesome MakerDAO","title":"MakerDAO"},{"location":"ethereum-basics/resources/#augur","text":"Guesser Veil - Markets on Everything Predictions.global - Augur Prediction Markets Explore Augur","title":"Augur"},{"location":"ethereum-basics/resources/#dex-tools","text":"Uniswap Explorer 0x Tracker","title":"DEX Tools"},{"location":"ethereum-basics/resources/#misc","text":"InstaDApp Are we stable yet? ETH Locked in DeFi Aragon DAO Explorer Curious Giraffe - Blockchain Analytics","title":"Misc"},{"location":"ethereum-basics/resources/#miscellaneous_1","text":"Definitive SEC Guide Bitcoin on Ethereum Ethereum Obituaries Crypto Subreddit Tracker Crypto Periodic Table KeySheet Zero-Knowledge Proofs Starter Pack Securify Etherean.org Did the Ethereum blockchain reach 1TB yet? What About Archive Nodes? Blockchain Security Contacts The Brooklyn Project Crypto Grant Programs Plasma Map","title":"Miscellaneous"},{"location":"ethereum-basics/what-is-ether/","text":"What is Ether? Summary Ether (ETH or \u039e) is the native cryptocurrency used on the Ethereum network and is used to compensate miners who secure transactions. A planned upgrade to the Ethereum protocol in 2019-2021 would replace mining with a less computationally expensive Proof of Stake mechanism which will be secured by validators, who are also expected to receive a proportional compensation in Ether. Ether also has many current use cases, such as a store of value (e.g. in lending collateral), a medium of exchange (e.g. in trade and payments), and a unit of account (e.g. in digital marketplaces). Ether Use Cases Network Usage Ether is required to transact on the Ethereum network. As explained in the gas section , every transaction that occurs on the network requires a set amount of gas, which is a unit used to measure the computational power required to process the transaction. To process a transaction and include it in a block, miners expect to be compensated. This is accomplished by setting a gas price with every transaction, which is the cost of 1 unit of gas, denominated in Gwei (1 ETH = 1,000,000,000 Gwei). For example, when you simply send ETH from one account to another, this cost 21,000 gas. If you were to set a gas price of 1 Gwei, this transaction would cost 0.000021 ETH. Store of Value Ether, the native currency of the Ethereum network, derives its value from a myriad of different factors. It is used within the Ethereum network to perform a range of functions, including: used to pay Ethereum transaction fees (in the form of \u2018gas\u2019) used as collateral for a wide range of open finance applications (MakerDAO, Compound) can be lent or borrowed (Dharma) accepted as payment at certain retailers and service providers used to as a medium of exchange to purchase Ethereum-based tokens (via ICOs or exchanges), crypto-collectibles, in-game items, and other non-fungible tokens (NFTs) earned as a reward for completing bounties (Gitcoin, Bounties Network) Furthermore, in Ethereum 2.0 (Serenity), users will be able to become a validator and help secure the network by providing computational resources and locking up 32 Ether per validator. Due to this, it is expected that Proof of Stake will lock a substantial amount of the circulating supply of Ether. There are also discussions around introducing a \u2018fee-burn\u2019 model where a percentage of Ether used to pay transaction fees would be \u2018burned\u2019 and thus reduce the circulating supply of Ether. In addition to utility value, Ether also has speculative value. This is value that is derived from speculative activities (such as trading and investing) which currently accounts for most of the value behind all crypto-assets. As observed in 2017, crypto-assets can attract substantial speculative interest, with some assets increasing in value by 1000x over just a few months. This speculative interest often brings fresh capital into the ecosystem that can be reinvested into various verticals, but it can be damaging to the short-term market sentiment of all crypto-assets. Can\u2019t tokens on Ethereum be used instead of Ether? Theoretically, yes. Practically, no. The concept of using another asset to secure the Ethereum network is called \u2018economic abstraction\u2019 (a good primer can be found here . This would involve miners / validators accepting tokens other than Ether in exchange for adding valid transactions to new blocks. It is highly unlikely that the Ethereum protocol will ever implement economic abstraction as it could potentially reduce the security of the blockchain by compromising the value of Ether. How does valuable Ether help to secure the network? In Proof of Work systems, miners compete with each other to find a block and thus be rewarded for their work (in the form of the native crypto-asset of the protocol). As the price of the asset increases, it naturally brings with it more miners, which then increases the network difficulty. As the network difficulty increases, it becomes increasingly difficult for miners to find a block which results in large scale mining operations (commonly referred to as \u201cmining farms\u201d) being one of the only profitable ways to mine on a Proof of Work network (once it reaches a certain size). Miners can also join \u2018mining pools\u2019 in order to increase their chances of finding a block and thus increase their rewards. It would currently cost an individual or group a large amount of money to successfully attack or take control of either the Bitcoin or Ethereum PoW blockchains. When Ethereum transitions to Proof of stake under Ethereum 2.0, it is expected that users will be able to stake 32 Ether per validator and receive rewards for their work in the form of additional Ether (at a dynamic issuance rate , discussed later in this essay). Under Proof of Stake, the cost of attacking Ethereum will be tied to the cost of Ether. Instead of using energy intensive mining (as it is under Proof of Work), validators will \u201cstake\u201d Ether, and will lose part or all of their stake if they attempt to behave fraudulently. The more validators with staked Ether securing the network, the more Ether an attacker would need to purchase in order to carry out an attack. Such an attack would likely rapidly increase the price of Ether and thus make it prohibitively more expensive for the attacker. Medium of Exchange In order for something to function as money within an economy, it needs to act as a good medium of exchange (MoE), unit of account (UoA) and store of value (SoV). Ether is used as a medium of exchange within the Ethereum economy for a wide range of apps, with dApp providers accepting it in exchange for fungible / non-fungible tokens, or other services. It is also used as a unit of account by various parties (including companies that have raised Ether via ICOs). Finally, Ether has historically been used as a store of value, with investors and speculators purchasing Ether to hold for investment purposes, given its relative scarcity, predictable supply growth, and inherent utility. An object (physical or digital) must typically exhibit five distinct attributes in order to be considered money: portability, durability, divisibility, fungibility and established history (see the Lindy effect ). Ether is highly portable (because it\u2019s digital), durable (again, because it\u2019s digital), divisible (up to 18 decimal places), but has limited fungibility as ETH tokens are interchangeable with one another, but accounts/addresses can be blacklisted quite easily. Privacy protocols such as zk-SNARKs will eventually improve this property for Ethereum. Ethereum has been in operation since 2015 and continues to build a strong established history. The Ethereum network (and Ether) have functioned as expected for 99.99% of its life. The other 0.01% includes surviving The DAO, multiple large hacks of smart contracts, multiple protocol-level exploits, the Shanghai DoS attacks, constant negative remarks from the wider crypto community and multiple bear markets (including a recent 94% drop in price). On top of this, Ether has additional properties such as being censorship-resistant, permission-less, pseudonymous and interoperable with other crypto-networks. The supply scheme of crypto-assets is hotly debated among various parties (especially those in the Bitcoin community) and there are currently two main approaches: a capped supply (like Bitcoin) or a low, predictable and hard to change issuance rate (like what is planned for Ethereum 2.0). In Ethereum 2.0 (with Sharding and Proof of Stake implemented), while a low inflation rate will always guarantee the validators are rewarded for securing the network, it suffers from the fact that it may dilute the value of Ether for those that are not validators. Though, this is offset by Ether being taken out of the circulating supply through staking, various open finance applications, fee burning, and people simply losing access to their Ether. Resources Wikipedia Why Ether is Valuable Why Ether is Valuable","title":"What is Ether?"},{"location":"ethereum-basics/what-is-ether/#what-is-ether","text":"","title":"What is Ether?"},{"location":"ethereum-basics/what-is-ether/#summary","text":"Ether (ETH or \u039e) is the native cryptocurrency used on the Ethereum network and is used to compensate miners who secure transactions. A planned upgrade to the Ethereum protocol in 2019-2021 would replace mining with a less computationally expensive Proof of Stake mechanism which will be secured by validators, who are also expected to receive a proportional compensation in Ether. Ether also has many current use cases, such as a store of value (e.g. in lending collateral), a medium of exchange (e.g. in trade and payments), and a unit of account (e.g. in digital marketplaces).","title":"Summary"},{"location":"ethereum-basics/what-is-ether/#ether-use-cases","text":"","title":"Ether Use Cases"},{"location":"ethereum-basics/what-is-ether/#network-usage","text":"Ether is required to transact on the Ethereum network. As explained in the gas section , every transaction that occurs on the network requires a set amount of gas, which is a unit used to measure the computational power required to process the transaction. To process a transaction and include it in a block, miners expect to be compensated. This is accomplished by setting a gas price with every transaction, which is the cost of 1 unit of gas, denominated in Gwei (1 ETH = 1,000,000,000 Gwei). For example, when you simply send ETH from one account to another, this cost 21,000 gas. If you were to set a gas price of 1 Gwei, this transaction would cost 0.000021 ETH.","title":"Network Usage"},{"location":"ethereum-basics/what-is-ether/#store-of-value","text":"Ether, the native currency of the Ethereum network, derives its value from a myriad of different factors. It is used within the Ethereum network to perform a range of functions, including: used to pay Ethereum transaction fees (in the form of \u2018gas\u2019) used as collateral for a wide range of open finance applications (MakerDAO, Compound) can be lent or borrowed (Dharma) accepted as payment at certain retailers and service providers used to as a medium of exchange to purchase Ethereum-based tokens (via ICOs or exchanges), crypto-collectibles, in-game items, and other non-fungible tokens (NFTs) earned as a reward for completing bounties (Gitcoin, Bounties Network) Furthermore, in Ethereum 2.0 (Serenity), users will be able to become a validator and help secure the network by providing computational resources and locking up 32 Ether per validator. Due to this, it is expected that Proof of Stake will lock a substantial amount of the circulating supply of Ether. There are also discussions around introducing a \u2018fee-burn\u2019 model where a percentage of Ether used to pay transaction fees would be \u2018burned\u2019 and thus reduce the circulating supply of Ether. In addition to utility value, Ether also has speculative value. This is value that is derived from speculative activities (such as trading and investing) which currently accounts for most of the value behind all crypto-assets. As observed in 2017, crypto-assets can attract substantial speculative interest, with some assets increasing in value by 1000x over just a few months. This speculative interest often brings fresh capital into the ecosystem that can be reinvested into various verticals, but it can be damaging to the short-term market sentiment of all crypto-assets. Can\u2019t tokens on Ethereum be used instead of Ether? Theoretically, yes. Practically, no. The concept of using another asset to secure the Ethereum network is called \u2018economic abstraction\u2019 (a good primer can be found here . This would involve miners / validators accepting tokens other than Ether in exchange for adding valid transactions to new blocks. It is highly unlikely that the Ethereum protocol will ever implement economic abstraction as it could potentially reduce the security of the blockchain by compromising the value of Ether. How does valuable Ether help to secure the network? In Proof of Work systems, miners compete with each other to find a block and thus be rewarded for their work (in the form of the native crypto-asset of the protocol). As the price of the asset increases, it naturally brings with it more miners, which then increases the network difficulty. As the network difficulty increases, it becomes increasingly difficult for miners to find a block which results in large scale mining operations (commonly referred to as \u201cmining farms\u201d) being one of the only profitable ways to mine on a Proof of Work network (once it reaches a certain size). Miners can also join \u2018mining pools\u2019 in order to increase their chances of finding a block and thus increase their rewards. It would currently cost an individual or group a large amount of money to successfully attack or take control of either the Bitcoin or Ethereum PoW blockchains. When Ethereum transitions to Proof of stake under Ethereum 2.0, it is expected that users will be able to stake 32 Ether per validator and receive rewards for their work in the form of additional Ether (at a dynamic issuance rate , discussed later in this essay). Under Proof of Stake, the cost of attacking Ethereum will be tied to the cost of Ether. Instead of using energy intensive mining (as it is under Proof of Work), validators will \u201cstake\u201d Ether, and will lose part or all of their stake if they attempt to behave fraudulently. The more validators with staked Ether securing the network, the more Ether an attacker would need to purchase in order to carry out an attack. Such an attack would likely rapidly increase the price of Ether and thus make it prohibitively more expensive for the attacker.","title":"Store of Value"},{"location":"ethereum-basics/what-is-ether/#medium-of-exchange","text":"In order for something to function as money within an economy, it needs to act as a good medium of exchange (MoE), unit of account (UoA) and store of value (SoV). Ether is used as a medium of exchange within the Ethereum economy for a wide range of apps, with dApp providers accepting it in exchange for fungible / non-fungible tokens, or other services. It is also used as a unit of account by various parties (including companies that have raised Ether via ICOs). Finally, Ether has historically been used as a store of value, with investors and speculators purchasing Ether to hold for investment purposes, given its relative scarcity, predictable supply growth, and inherent utility. An object (physical or digital) must typically exhibit five distinct attributes in order to be considered money: portability, durability, divisibility, fungibility and established history (see the Lindy effect ). Ether is highly portable (because it\u2019s digital), durable (again, because it\u2019s digital), divisible (up to 18 decimal places), but has limited fungibility as ETH tokens are interchangeable with one another, but accounts/addresses can be blacklisted quite easily. Privacy protocols such as zk-SNARKs will eventually improve this property for Ethereum. Ethereum has been in operation since 2015 and continues to build a strong established history. The Ethereum network (and Ether) have functioned as expected for 99.99% of its life. The other 0.01% includes surviving The DAO, multiple large hacks of smart contracts, multiple protocol-level exploits, the Shanghai DoS attacks, constant negative remarks from the wider crypto community and multiple bear markets (including a recent 94% drop in price). On top of this, Ether has additional properties such as being censorship-resistant, permission-less, pseudonymous and interoperable with other crypto-networks. The supply scheme of crypto-assets is hotly debated among various parties (especially those in the Bitcoin community) and there are currently two main approaches: a capped supply (like Bitcoin) or a low, predictable and hard to change issuance rate (like what is planned for Ethereum 2.0). In Ethereum 2.0 (with Sharding and Proof of Stake implemented), while a low inflation rate will always guarantee the validators are rewarded for securing the network, it suffers from the fact that it may dilute the value of Ether for those that are not validators. Though, this is offset by Ether being taken out of the circulating supply through staking, various open finance applications, fee burning, and people simply losing access to their Ether.","title":"Medium of Exchange"},{"location":"ethereum-basics/what-is-ether/#resources","text":"Wikipedia Why Ether is Valuable Why Ether is Valuable","title":"Resources"},{"location":"ethereum-basics/what-is-ethereum/","text":"What is Ethereum? Ethereum is an open-source, permissionless blockchain-based distributed ledger with decentralized governance that provides infrastructure for distributed computing and economic activities. It enables developers to build and deploy decentralized applications, products, and services on the Ethereum network and leverage logic-based transaction automation programs called 'smart contracts'. This smart contract technology enables developers to create unique programs and business logic that execute in a trustless environment, while leveraging the high availability of the global Ethereum network. Resources What is Ethereum What is Ethereum. Guide for Beginners Ethereum - Wikipedia","title":"What is Ethereum?"},{"location":"ethereum-basics/what-is-ethereum/#what-is-ethereum","text":"Ethereum is an open-source, permissionless blockchain-based distributed ledger with decentralized governance that provides infrastructure for distributed computing and economic activities. It enables developers to build and deploy decentralized applications, products, and services on the Ethereum network and leverage logic-based transaction automation programs called 'smart contracts'. This smart contract technology enables developers to create unique programs and business logic that execute in a trustless environment, while leveraging the high availability of the global Ethereum network.","title":"What is Ethereum?"},{"location":"ethereum-basics/what-is-ethereum/#resources","text":"What is Ethereum What is Ethereum. Guide for Beginners Ethereum - Wikipedia","title":"Resources"},{"location":"ethereum-basics/development/ethereum-development-basics/","text":"Development Summary Ethereum is a blockchain, first-and-foremost. Its primary artifact is the smart contract, written in the programming language Solidity, a language with syntax similar to JavaScript. Currently Vyper is being developed to offer another choice when developing smart contracts, with syntax similar to Python. Languages Solidity - Most commonly used language Docs GitHub Community Audited Contracts by OpenZeppelin Vyper - Newer language focused on security on auditability Docs GitHub Clients go-ethereum - Official Go Implementation Docs GitHub Parity Ethereum - Rust Implementation Docs GitHub Development Chats/Forums Ethereum Gitter Solidity Gitter Web3.js Gitter ETH 2.0 Gitter ETH Research Discourse Ethereum Developer Discord Resources Mastering Ethereum by Andreas M. Antonopoulos, Gavin Wood Ethereum Developer Tools List Awesome Solidity List Awesome Ethereum Security List Best Practices by Consensys Ethereum Development with Golang Awesome Ethereum Virtual Machine List More resources can be found here","title":"Ethereum Development Basics"},{"location":"ethereum-basics/development/ethereum-development-basics/#development","text":"","title":"Development"},{"location":"ethereum-basics/development/ethereum-development-basics/#summary","text":"Ethereum is a blockchain, first-and-foremost. Its primary artifact is the smart contract, written in the programming language Solidity, a language with syntax similar to JavaScript. Currently Vyper is being developed to offer another choice when developing smart contracts, with syntax similar to Python.","title":"Summary"},{"location":"ethereum-basics/development/ethereum-development-basics/#languages","text":"Solidity - Most commonly used language Docs GitHub Community Audited Contracts by OpenZeppelin Vyper - Newer language focused on security on auditability Docs GitHub","title":"Languages"},{"location":"ethereum-basics/development/ethereum-development-basics/#clients","text":"go-ethereum - Official Go Implementation Docs GitHub Parity Ethereum - Rust Implementation Docs GitHub","title":"Clients"},{"location":"ethereum-basics/development/ethereum-development-basics/#development-chatsforums","text":"Ethereum Gitter Solidity Gitter Web3.js Gitter ETH 2.0 Gitter ETH Research Discourse Ethereum Developer Discord","title":"Development Chats/Forums"},{"location":"ethereum-basics/development/ethereum-development-basics/#resources","text":"Mastering Ethereum by Andreas M. Antonopoulos, Gavin Wood Ethereum Developer Tools List Awesome Solidity List Awesome Ethereum Security List Best Practices by Consensys Ethereum Development with Golang Awesome Ethereum Virtual Machine List More resources can be found here","title":"Resources"},{"location":"ethereum-basics/development/patterns/","text":"Patterns Data modelling Augur-style data encapsulation. Characteristics library defined for a named entity. e.g. Order struct Data {} within the library is the abstract data type to be passed around. e.g. Order.Data function create which returns an instance of Data . other related types (such as enum's and constants) are also encapsulated by this library. e.g. Order.Types pure helper functions that compute higher-level information on this entity. e.g. getOrderId which computes the ID from the hash of the data Example library Order { struct Data { // Contracts IOrders orders; IMarket market; IAugur augur; // Order bytes32 id; address creator; uint256 outcome; Order.Types orderType; uint256 amount; uint256 price; uint256 sharesEscrowed; uint256 moneyEscrowed; bytes32 betterOrderId; bytes32 worseOrderId; } enum Types { Bid, Ask } function create(IController _controller, address _creator, uint256 _outcome, Order.Types _type, uint256 _attoshares, uint256 _price, IMarket _market, bytes32 _betterOrderId, bytes32 _worseOrderId) internal view returns (Data) { require(_outcome _market.getNumberOfOutcomes()); require(_price _market.getNumTicks()); require(_attoshares 0); IOrders _orders = IOrders(_controller.lookup( Orders )); IAugur _augur = _controller.getAugur(); return Data({ orders: _orders, market: _market, augur: _augur, id: 0, creator: _creator, outcome: _outcome, orderType: _type, amount: _attoshares, price: _price, sharesEscrowed: 0, moneyEscrowed: 0, betterOrderId: _betterOrderId, worseOrderId: _worseOrderId }); } function getOrderId(Order.Data _orderData) internal view returns (bytes32) { if (_orderData.id == bytes32(0)) { bytes32 _orderId = _orderData.orders.getOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed); require(_orderData.orders.getAmount(_orderId) == 0); _orderData.id = _orderId; } return _orderData.id; } }","title":"Patterns"},{"location":"ethereum-basics/development/patterns/#patterns","text":"","title":"Patterns"},{"location":"ethereum-basics/development/patterns/#data-modelling","text":"Augur-style data encapsulation.","title":"Data modelling"},{"location":"ethereum-basics/development/patterns/#characteristics","text":"library defined for a named entity. e.g. Order struct Data {} within the library is the abstract data type to be passed around. e.g. Order.Data function create which returns an instance of Data . other related types (such as enum's and constants) are also encapsulated by this library. e.g. Order.Types pure helper functions that compute higher-level information on this entity. e.g. getOrderId which computes the ID from the hash of the data","title":"Characteristics"},{"location":"ethereum-basics/development/patterns/#example","text":"library Order { struct Data { // Contracts IOrders orders; IMarket market; IAugur augur; // Order bytes32 id; address creator; uint256 outcome; Order.Types orderType; uint256 amount; uint256 price; uint256 sharesEscrowed; uint256 moneyEscrowed; bytes32 betterOrderId; bytes32 worseOrderId; } enum Types { Bid, Ask } function create(IController _controller, address _creator, uint256 _outcome, Order.Types _type, uint256 _attoshares, uint256 _price, IMarket _market, bytes32 _betterOrderId, bytes32 _worseOrderId) internal view returns (Data) { require(_outcome _market.getNumberOfOutcomes()); require(_price _market.getNumTicks()); require(_attoshares 0); IOrders _orders = IOrders(_controller.lookup( Orders )); IAugur _augur = _controller.getAugur(); return Data({ orders: _orders, market: _market, augur: _augur, id: 0, creator: _creator, outcome: _outcome, orderType: _type, amount: _attoshares, price: _price, sharesEscrowed: 0, moneyEscrowed: 0, betterOrderId: _betterOrderId, worseOrderId: _worseOrderId }); } function getOrderId(Order.Data _orderData) internal view returns (bytes32) { if (_orderData.id == bytes32(0)) { bytes32 _orderId = _orderData.orders.getOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed); require(_orderData.orders.getAmount(_orderId) == 0); _orderData.id = _orderId; } return _orderData.id; } }","title":"Example"},{"location":"ethereum-basics/development/testing/","text":"Testing Not only does Test-Driven Development make your codebase stellar, it's extremely useful when interacting with a new language with different semantics. And surprisingly, it's actually not so hard in Ethereum development to get started with it! The Truffle framework makes it very easy to test contracts with Solidity and JS. Beware: while you can test contracts in Solidity, I highly advise you don't. The tooling is very nascent, and Solidity itself has very few libraries already - you won't be able to load test data (fixtures) from files for example, since Solidity doesn't have an FS API like JS/Node does. for unit testing simple functions, Solidity comes in handy. However you might find using Remix IDE just as quick for accomplishing this to start with (although you won't reap the benefits of having a test later when your code breaks ;)). Running a persistent test blockchain A persistent chain is often useful when you want to test a frontend UI, and you need to persist the data you've transacted onto a blockchain. You can use Ganache (n\u00e9e testrpc) CLI to do this: ganache-cli -d --db ./ganache --gasPrice 1 --gasLimit 10000000 --networkId 123 -u 0 -u 1 This will persist data to ./ganache and most importantly set the network ID (otherwise this is generated from system time on startup, and is not 'persistent' otherwise). Connecting MetaMask with your test blockchain wallets When you run Ganache CLI, it will list private keys on first launch in hex form. You can import these into Metamask and then access your 100 ETH issued by default. Gas You will probably encounter issues with gas. Note that contracts cannot be bigger than 24,000 bytes, and transactions no bigger than 32kb ( source ). Contract creations take gas, which you can estimate with estimateGas . Gas is the internal Ethereum unit for pricing computation, and is converted at a fixed rate to Ether (set by clients), termed the gasPrice . It is measured in the smallest unit, which is gwei. The gasLimit is the maximum amount of gas that can be used in one setting. An example of some gas arithmetic: estimateGas(YourContract) = 286056 # if we run a test blockchain with a gas price of 2 (2 units for 1 gwei) ganache-cli --gasLimit 100000000000 --gasPrice 2 then the minimum amount to send with the transaction is: 286056 * 2 = 572,112 gwei 0.000572112 ETH You might be tempted to set gasLimit to something like 1000000000000000 . This will break Metamask, as it can't encode that value into 53 bits for BigNumber ( see here ). Gas Units Unit Amount per ETH ETH 1 Finney 1,000 Szabo 1,000,000 Gwei 1,000,000,000 Mwei 1,000,000,000,000 Kwei 1,000,000,000,000,000 Wei 1,000,000,000,000,000,000 Debugging Testing is important, but you will never ascertain as much information as to the execution of a contract as by using the official debugger tooling, the Remix IDE ( demo , docs ). Remix is a big of a hack piece put together, but it works very well once you're using it correctly. It can run Solidity in a JavaScript VM, an injected Web3 provider (e.g. Metamask) or connect to your local Ganache / other setup on http://localhost:8545 . Using Remix like a pro Remix is a web app, so it doesn't have access to your file system (whether you access it from remix.ethereum.org or as an Electron desktop app). While you can copy-paste code in, it's much better to install remixd , which will expose a local folder to Remix. Install it globally and save the dep - npm install -g -S remixd Add this to your package.json . javascript { \"scripts\": { \"remix\": \"remixd -s .\", } } Run yarn remix remixd knows to look into node_modules for imported contracts (e.g. SafeMath) from packages like OpenZeppelin, so we run it in our project root . rather than in ./contracts as you might assume. Unit testing Unit testing is for testing individual functions of your contracts. Integration testing Integration testing generally requires multiple interactions from various users/contracts. Since this requires the use of multiple addresses, it is unsuitable to accomplish in Solidity as above. Exposing contracts You may encounter difficulty testing contracts due to the (in)visibility of methods/types, the lack of insertion point for validating data being returned, and so on. It is possible to test not the contract itself, but a wrapped contract for testing purposes only. contract Market { uint[] private orders; function doSomething() {} } How would we access Market.orders here? contract MarketForTesting is Market { function getOrdersCount() public returns (uint8) { return orders.length; } } Testing return values When you call a method on a contract, and it updates state (i.e. is not view / pure ), it must be transacted upon the network. In such case, the Web3 interfaces do not give you the return value of the method. This can be frustrating if you're trying to test such a value, so you can do something like so:; async function txWithReturnValue(method, ...args) { let [retval, tx] = await Promise.all([ method.call(...args), method.sendTransaction(...args) ]); return retval; } await txWithReturnValue(Contract.method, 1, 0x123 , { from: 0x12312 , value: 2 }); Testing with various 'users' You will want to test the contract's interaction from the POV of multiple users with different addresses (whether it be human or other contracts). This is quite easy to achieve. Whenever you transact with a contract in calling a method, you have the option to specify the from address of who will be funding the tx. Below is a Truffle test which combines this with access to accounts , which is the same output as web3.personal.getListAccounts: const MyContract = artifacts.require( ./MyContract.sol ); contract('MyContract', async (accounts) = { it('tests with various users', async () = { let instance = await MyContract.new(); for(let i = 0; i 5; i++) { let from = accounts[i]; console.log(`Submitting tx from addr: ${from}`); let txid = await instance.yourMethod.sendTransaction(arg1, arg2, { from, }); } }) })","title":"Testing"},{"location":"ethereum-basics/development/testing/#testing","text":"Not only does Test-Driven Development make your codebase stellar, it's extremely useful when interacting with a new language with different semantics. And surprisingly, it's actually not so hard in Ethereum development to get started with it! The Truffle framework makes it very easy to test contracts with Solidity and JS. Beware: while you can test contracts in Solidity, I highly advise you don't. The tooling is very nascent, and Solidity itself has very few libraries already - you won't be able to load test data (fixtures) from files for example, since Solidity doesn't have an FS API like JS/Node does. for unit testing simple functions, Solidity comes in handy. However you might find using Remix IDE just as quick for accomplishing this to start with (although you won't reap the benefits of having a test later when your code breaks ;)).","title":"Testing"},{"location":"ethereum-basics/development/testing/#running-a-persistent-test-blockchain","text":"A persistent chain is often useful when you want to test a frontend UI, and you need to persist the data you've transacted onto a blockchain. You can use Ganache (n\u00e9e testrpc) CLI to do this: ganache-cli -d --db ./ganache --gasPrice 1 --gasLimit 10000000 --networkId 123 -u 0 -u 1 This will persist data to ./ganache and most importantly set the network ID (otherwise this is generated from system time on startup, and is not 'persistent' otherwise).","title":"Running a persistent test blockchain"},{"location":"ethereum-basics/development/testing/#connecting-metamask-with-your-test-blockchain-wallets","text":"When you run Ganache CLI, it will list private keys on first launch in hex form. You can import these into Metamask and then access your 100 ETH issued by default.","title":"Connecting MetaMask with your test blockchain wallets"},{"location":"ethereum-basics/development/testing/#gas","text":"You will probably encounter issues with gas. Note that contracts cannot be bigger than 24,000 bytes, and transactions no bigger than 32kb ( source ). Contract creations take gas, which you can estimate with estimateGas . Gas is the internal Ethereum unit for pricing computation, and is converted at a fixed rate to Ether (set by clients), termed the gasPrice . It is measured in the smallest unit, which is gwei. The gasLimit is the maximum amount of gas that can be used in one setting. An example of some gas arithmetic: estimateGas(YourContract) = 286056 # if we run a test blockchain with a gas price of 2 (2 units for 1 gwei) ganache-cli --gasLimit 100000000000 --gasPrice 2 then the minimum amount to send with the transaction is: 286056 * 2 = 572,112 gwei 0.000572112 ETH You might be tempted to set gasLimit to something like 1000000000000000 . This will break Metamask, as it can't encode that value into 53 bits for BigNumber ( see here ).","title":"Gas"},{"location":"ethereum-basics/development/testing/#gas-units","text":"Unit Amount per ETH ETH 1 Finney 1,000 Szabo 1,000,000 Gwei 1,000,000,000 Mwei 1,000,000,000,000 Kwei 1,000,000,000,000,000 Wei 1,000,000,000,000,000,000","title":"Gas Units"},{"location":"ethereum-basics/development/testing/#debugging","text":"Testing is important, but you will never ascertain as much information as to the execution of a contract as by using the official debugger tooling, the Remix IDE ( demo , docs ). Remix is a big of a hack piece put together, but it works very well once you're using it correctly. It can run Solidity in a JavaScript VM, an injected Web3 provider (e.g. Metamask) or connect to your local Ganache / other setup on http://localhost:8545 .","title":"Debugging"},{"location":"ethereum-basics/development/testing/#using-remix-like-a-pro","text":"Remix is a web app, so it doesn't have access to your file system (whether you access it from remix.ethereum.org or as an Electron desktop app). While you can copy-paste code in, it's much better to install remixd , which will expose a local folder to Remix. Install it globally and save the dep - npm install -g -S remixd Add this to your package.json . javascript { \"scripts\": { \"remix\": \"remixd -s .\", } } Run yarn remix remixd knows to look into node_modules for imported contracts (e.g. SafeMath) from packages like OpenZeppelin, so we run it in our project root . rather than in ./contracts as you might assume.","title":"Using Remix like a pro"},{"location":"ethereum-basics/development/testing/#unit-testing","text":"Unit testing is for testing individual functions of your contracts.","title":"Unit testing"},{"location":"ethereum-basics/development/testing/#integration-testing","text":"Integration testing generally requires multiple interactions from various users/contracts. Since this requires the use of multiple addresses, it is unsuitable to accomplish in Solidity as above.","title":"Integration testing"},{"location":"ethereum-basics/development/testing/#exposing-contracts","text":"You may encounter difficulty testing contracts due to the (in)visibility of methods/types, the lack of insertion point for validating data being returned, and so on. It is possible to test not the contract itself, but a wrapped contract for testing purposes only. contract Market { uint[] private orders; function doSomething() {} } How would we access Market.orders here? contract MarketForTesting is Market { function getOrdersCount() public returns (uint8) { return orders.length; } }","title":"Exposing contracts"},{"location":"ethereum-basics/development/testing/#testing-return-values","text":"When you call a method on a contract, and it updates state (i.e. is not view / pure ), it must be transacted upon the network. In such case, the Web3 interfaces do not give you the return value of the method. This can be frustrating if you're trying to test such a value, so you can do something like so:; async function txWithReturnValue(method, ...args) { let [retval, tx] = await Promise.all([ method.call(...args), method.sendTransaction(...args) ]); return retval; } await txWithReturnValue(Contract.method, 1, 0x123 , { from: 0x12312 , value: 2 });","title":"Testing return values"},{"location":"ethereum-basics/development/testing/#testing-with-various-users","text":"You will want to test the contract's interaction from the POV of multiple users with different addresses (whether it be human or other contracts). This is quite easy to achieve. Whenever you transact with a contract in calling a method, you have the option to specify the from address of who will be funding the tx. Below is a Truffle test which combines this with access to accounts , which is the same output as web3.personal.getListAccounts: const MyContract = artifacts.require( ./MyContract.sol ); contract('MyContract', async (accounts) = { it('tests with various users', async () = { let instance = await MyContract.new(); for(let i = 0; i 5; i++) { let from = accounts[i]; console.log(`Submitting tx from addr: ${from}`); let txid = await instance.yourMethod.sendTransaction(arg1, arg2, { from, }); } }) })","title":"Testing with various 'users'"},{"location":"ethereum-basics/development/tooling/","text":"Tooling For those who wish to tackle smart contract development on Ethereum, there are a vast amount of tools one can use to leverage their smart contracts even further. IDEs Remix - (Great for starters!) Web IDE with built in static analysis, test blockchain VM. Superblocks Lab - Web IDE. Built in browser blochain VM, Metamask integration (one click deployments to Testnet/Mainnet), transaction logger and live code your WebApp among many other features. Atom Solidity Linter , Etheratom Pragma - Very simple web IDE for solidity, and auto-generated interfaces for smart contracts. autocomplete-solidity , and language-solidity packages Vim solidity - Vim syntax file for solidity Solidity VS Code - Visual Studio Code extension that adds support for Solidity Intellij-Solidity Plugin Open-source plug-in for IntelliJ. YAKINDU Solidity Tools - Eclipse based IDE. Features context sensitive code completion and help, code navigation, syntax coloring, build in compiler, quick fixes and templates. Eth Fiddle - IDE developed by The Loom Network that allows you to write, compile and debug your smart contract. Easy to share and find code snippets. Frameworks Truffle - Most popular smart contract development, testing, and deployment framework. The Truffle suite includes Truffle, Ganache , and Drizzle . Deep dive on Truffle here Embark - Framework for DApp development Dapp - Framework for DApp development, successor to DApple Populus - The Ethereum development framework with the most cute animal pictures Etherlime - ethers.js based framework for Dapp deployment Parasol - Agile smart contract development environment with testing, INFURA deployment, automatic contract documentation and more. It features a a flexible and unopinionated design with unlimited customizability. Test blockchain networks Ganache - App for test Ethereum blockchain with visual UI and logs Kaleido - Use Kaleido for spinning up a consortium blockchain network. Great for PoCs and testing Pantheon Private Network - Run a private network of Pantheon nodes in a Docker container Local Raiden - Run a local Raiden network in docker containers for demo and testing purposes Private networks deployment scripts - Out-of-the-box deployment scripts for private PoA networks Local Ethereum Network - Out-of-the-box deployment scripts for private PoW networks Ethereum on Azure - Deployment and governance of consortium Ethereum PoA networks getho - DApp development platform including PoA private blockchain and Smart Contract testing tool.","title":"Tooling"},{"location":"ethereum-basics/development/tooling/#tooling","text":"For those who wish to tackle smart contract development on Ethereum, there are a vast amount of tools one can use to leverage their smart contracts even further.","title":"Tooling"},{"location":"ethereum-basics/development/tooling/#ides","text":"Remix - (Great for starters!) Web IDE with built in static analysis, test blockchain VM. Superblocks Lab - Web IDE. Built in browser blochain VM, Metamask integration (one click deployments to Testnet/Mainnet), transaction logger and live code your WebApp among many other features. Atom Solidity Linter , Etheratom Pragma - Very simple web IDE for solidity, and auto-generated interfaces for smart contracts. autocomplete-solidity , and language-solidity packages Vim solidity - Vim syntax file for solidity Solidity VS Code - Visual Studio Code extension that adds support for Solidity Intellij-Solidity Plugin Open-source plug-in for IntelliJ. YAKINDU Solidity Tools - Eclipse based IDE. Features context sensitive code completion and help, code navigation, syntax coloring, build in compiler, quick fixes and templates. Eth Fiddle - IDE developed by The Loom Network that allows you to write, compile and debug your smart contract. Easy to share and find code snippets.","title":"IDEs"},{"location":"ethereum-basics/development/tooling/#frameworks","text":"Truffle - Most popular smart contract development, testing, and deployment framework. The Truffle suite includes Truffle, Ganache , and Drizzle . Deep dive on Truffle here Embark - Framework for DApp development Dapp - Framework for DApp development, successor to DApple Populus - The Ethereum development framework with the most cute animal pictures Etherlime - ethers.js based framework for Dapp deployment Parasol - Agile smart contract development environment with testing, INFURA deployment, automatic contract documentation and more. It features a a flexible and unopinionated design with unlimited customizability.","title":"Frameworks"},{"location":"ethereum-basics/development/tooling/#test-blockchain-networks","text":"Ganache - App for test Ethereum blockchain with visual UI and logs Kaleido - Use Kaleido for spinning up a consortium blockchain network. Great for PoCs and testing Pantheon Private Network - Run a private network of Pantheon nodes in a Docker container Local Raiden - Run a local Raiden network in docker containers for demo and testing purposes Private networks deployment scripts - Out-of-the-box deployment scripts for private PoA networks Local Ethereum Network - Out-of-the-box deployment scripts for private PoW networks Ethereum on Azure - Deployment and governance of consortium Ethereum PoA networks getho - DApp development platform including PoA private blockchain and Smart Contract testing tool.","title":"Test blockchain networks"},{"location":"ethereum-roadmap/ethereum-1.x/","text":"Ethereum 1.x Summary A group of Ethereum core developers and friends talked at Devcon IV and realized that they all share similar view - that Ethereum mainnet, if left unchanged, would become very hard or impossible to use due to severe performance degradation, and increased storage requirements. Performance degradation mostly due to the large (and increasing) state. Increased storage requirements mostly due to keeping blocks, event logs (receipts), and state history (currently prunable in major clients). Pre-History October 2017, Devcon3 in Cancun Vitalik Buterin presents \"Modest proposal for Ethereum 2.0\" , suggesting that Layer 1 of Ethereum 1.0 should stay \u201csafe and conservative\u201d, and most of the innovation go into Layer 2 and into shards. May 2018, EDCON in Toronto Vitalik Buterin gives a talk \u201cSo you want to become Casper validator?\u201d , signaling that Casper FFG validators may be running on laptops and rollout is getting close. June 2018 Pivot in Casper research from Casper FFG to full Casper and merging with sharding, due to challenges of implementing Casper FFG as a contract, and due to large overlap with Sharding research, as discussed at the Core Dev Meeting 40 . October-November 2018, Devcon IV in Prague It becomes apparent that Serenity (full Casper + Sharding) is not going to functionally supersede Ethereum 1.0 for another 3-5 years. Main Objectives Develop, formalize, and implement set of measures, deployable on the Ethereum 1.0 mainnet, within the next 2 years, to ensure that the chain stays viable and usable. That mainly means curbing the state growth or limiting the state size. Emphasize focus on these measures and de-emphasize introduction of specific \u201cfeatures\u201d. This is one of the places where eWASM engine comes in. Current computational pre-compiles are seen as features requiring case-by-case work. Introduction of eWASM engine would first enable \u201cpre-compile\u201d factory, where more pre-compiles are introduced faster. Later it would enable any contracts written in eWASM, obviating need in pre-compiles altogether. Working groups State rent eWASM Storage pruning Simulation and emulation State Rent Proposal framework Since State rent is a potentially higher impact change (and therefore more controversial, unpopular) than any other changes within Ethereum 1x, it requires a clear logical framework for designing, evaluating, and comparing proposals. This framework attempts to ensure, as much as possible, that the change plan eventually chosen is likely close to the best available. It defines the path of reasoning from \u201cWhat is the problem (what happens if we do nothing)?\u201d to \u201cHow exactly we are doing it\u201d. Current location of the proposal framework document (Work in progress) Reasoning questions Why is state a valuable resource and to whom? (can this value be replicated) Why state size needs to be managed? (effect on system performance + possible partial mitigations) How can state size be managed? (feedforward vs feedback control) What metrics need to be regulated? (state size, state growth, or both) Do metrics need to be in-state or off-state? What parameters (control inputs) do we use? (cost of state expansion, charge per size unit per block) Can controlled system weaken or evade control? (dark rent, miner rebates) Current proposals Introduce rent on all accounts (contracts and non-contracts), existing and newly created ones, with the ability to restore evicted contracts. Current location Introduce fund lock-up when state is expanded (creation of accounts, adding store items), which is partially released when the state is cleared. Apply rent only on the pre-existing state. Current location Increase the cost of state expansion in \u201cshort term\u201d, to enable block gas limit increase before state rent is implemented Do nothing Challenges inherent to most proposals How will existing dapps be affected. Will they become too expensive/cumbersome to use? Will they need to be optimised/rewritten completely? Denomination of the extra state expansion charge or rent - should it be priced in gas, ETH, and how should be the price be determined (feedback loop on the state size?). Will volatility of ETH price affect those charges too much? Will miners help users evade charges? Classes of contracts and impacts Part of the state rent research is to identify main classes of contracts that are likely to be affected by the changes in the protocol, and provide guidelines on what they can do about it. Likely important classes: ERC20 token contracts and applications managing them (DAI, Augur) On-chain order books (DEXs) ENS Non-fungible token contracts Multi-signature wallets Gaming contracts Gambling contracts Resources State Rent Proposal eWASM Main unresolved questions Gas metering Memory allocation Interaction with the rest of EVM state (e.g. contract storage, balances) Interpreter/compiler guarantees on compilation time and runtime Gas metering Two main approaches: Injection. Wasm bytecode gets pre-processed. An extra register is added to serve as a gas counter. It gets incremented at certain points (jumps, calls) and out-of-gas check is performed. Pro: generic. Con: performance overhead. Automatic upper bound estimation. Static analysis is performed on the bytecode, and, for some subset of codes, upper bound of executed instructions (virtual gas) can be calculated. Pro: no performance overhead. Con: only subset of codes Current approach for the 1st phase (pre-compiles) is upper-bound based. Memory allocation Wasm semantics dictates that Wasm execution has a linear memory (only one in the current version of the spec) that can be grown on demand. Will that linear memory be allocated every time the engine is called, and then torn down at the end of the execution? If yes, how more efficient is this compared to the current EVM model (which does this allocation and tearing down at each CALL opcode). Interaction with the rest of EVM state Was proposed via external functions, for example (name made up): function_SLOAD(storage_index: uint256) Alternative approach is not to have Ewasm code access EVM state, but only exchange input/output when called. This, of course, makes maintaining large persistent data structures difficult. Interpreter/compiler guarantees Initially, this problem has been brought up in the context of JITs (Just In Time) compilers. JIT compilers were one of the reasons why WebAssembly was a big performance improvement over JavaScript. JIT compilers might be problematic in an adversarial environment, because it is usually possible to find a program that takes an unusually long time to compile, and algorithms that decide what to compile \u201cjust in time\u201d can be targeted too. AOT (Ahead of Time) compilers can be used for Core Dev-controlled pre-compiles (Phase 1). For Phase 2, the plan was to initially use very straightforward interpreters, and then develop AOT compilers with necessary guarantees. The idea of first introducing interpreters is to make sure eWASM is there, giving people more motivation to work on the compilers (which is harder than interpreter) Storage Pruning The questions to be answered are: What do we absolutely have to keep to comply with the Ethereum protocol? Do we always need to keep all the blocks? (maybe not, if we use backward sync, for example) Do we need to keep receipts, or just logs, how much (in Gb), or for how long? Do we need to always download the entire header chain or can we compress it (with STARK proofs for example)? Can we improve snapshot sync procedures (fast sync, warp sync) so that they prevent invalid state transitions (with Validity Proofs, for example)? Simulation and Emulation Simulation handles models of the software agents (in our case Ethereum client software instances), coarse enough to be performant, and fine enough to capture the important facets of the agents. Emulation handles the actual software agents (in our case the actual implementations of Ethereum like geth and parity), placed into the virtual environments with lots of freedom to change parameters of virtual machines and the network connecting them. Potential questions that simulation may be able to answer: Will uncle rate become much less of an indicator of the network congestion if most of the Ethereum nodes propagate blocks straight after verifying Proof Of Work (instead of fully processing the block as they used to do)? Potential questions that emulations may be able to answer: What is the function that describes the relationship between the rate of success for snapshot synchornisations (fast sync, warp sync) and things like prevailing bandwidth and state history pruning threshold? Deliverables Measures requiring hard-forks: State rent (or state growth limiting) Ewasm Measures likely not requiring hard-forks, but requiring client code coordination on the network protocol: Storage pruning Simulation and Emulation group produces data for making projections, benchmarks, and parameter calibrations for other groups.","title":"Ethereum 1.x"},{"location":"ethereum-roadmap/ethereum-1.x/#ethereum-1x","text":"","title":"Ethereum 1.x"},{"location":"ethereum-roadmap/ethereum-1.x/#summary","text":"A group of Ethereum core developers and friends talked at Devcon IV and realized that they all share similar view - that Ethereum mainnet, if left unchanged, would become very hard or impossible to use due to severe performance degradation, and increased storage requirements. Performance degradation mostly due to the large (and increasing) state. Increased storage requirements mostly due to keeping blocks, event logs (receipts), and state history (currently prunable in major clients).","title":"Summary"},{"location":"ethereum-roadmap/ethereum-1.x/#pre-history","text":"","title":"Pre-History"},{"location":"ethereum-roadmap/ethereum-1.x/#october-2017-devcon3-in-cancun","text":"Vitalik Buterin presents \"Modest proposal for Ethereum 2.0\" , suggesting that Layer 1 of Ethereum 1.0 should stay \u201csafe and conservative\u201d, and most of the innovation go into Layer 2 and into shards.","title":"October 2017, Devcon3 in Cancun"},{"location":"ethereum-roadmap/ethereum-1.x/#may-2018-edcon-in-toronto","text":"Vitalik Buterin gives a talk \u201cSo you want to become Casper validator?\u201d , signaling that Casper FFG validators may be running on laptops and rollout is getting close.","title":"May 2018, EDCON in Toronto"},{"location":"ethereum-roadmap/ethereum-1.x/#june-2018","text":"Pivot in Casper research from Casper FFG to full Casper and merging with sharding, due to challenges of implementing Casper FFG as a contract, and due to large overlap with Sharding research, as discussed at the Core Dev Meeting 40 .","title":"June 2018"},{"location":"ethereum-roadmap/ethereum-1.x/#october-november-2018-devcon-iv-in-prague","text":"It becomes apparent that Serenity (full Casper + Sharding) is not going to functionally supersede Ethereum 1.0 for another 3-5 years.","title":"October-November 2018, Devcon IV in Prague"},{"location":"ethereum-roadmap/ethereum-1.x/#main-objectives","text":"Develop, formalize, and implement set of measures, deployable on the Ethereum 1.0 mainnet, within the next 2 years, to ensure that the chain stays viable and usable. That mainly means curbing the state growth or limiting the state size. Emphasize focus on these measures and de-emphasize introduction of specific \u201cfeatures\u201d. This is one of the places where eWASM engine comes in. Current computational pre-compiles are seen as features requiring case-by-case work. Introduction of eWASM engine would first enable \u201cpre-compile\u201d factory, where more pre-compiles are introduced faster. Later it would enable any contracts written in eWASM, obviating need in pre-compiles altogether.","title":"Main Objectives"},{"location":"ethereum-roadmap/ethereum-1.x/#working-groups","text":"State rent eWASM Storage pruning Simulation and emulation","title":"Working groups"},{"location":"ethereum-roadmap/ethereum-1.x/#state-rent","text":"","title":"State Rent"},{"location":"ethereum-roadmap/ethereum-1.x/#proposal-framework","text":"Since State rent is a potentially higher impact change (and therefore more controversial, unpopular) than any other changes within Ethereum 1x, it requires a clear logical framework for designing, evaluating, and comparing proposals. This framework attempts to ensure, as much as possible, that the change plan eventually chosen is likely close to the best available. It defines the path of reasoning from \u201cWhat is the problem (what happens if we do nothing)?\u201d to \u201cHow exactly we are doing it\u201d. Current location of the proposal framework document (Work in progress)","title":"Proposal framework"},{"location":"ethereum-roadmap/ethereum-1.x/#reasoning-questions","text":"Why is state a valuable resource and to whom? (can this value be replicated) Why state size needs to be managed? (effect on system performance + possible partial mitigations) How can state size be managed? (feedforward vs feedback control) What metrics need to be regulated? (state size, state growth, or both) Do metrics need to be in-state or off-state? What parameters (control inputs) do we use? (cost of state expansion, charge per size unit per block) Can controlled system weaken or evade control? (dark rent, miner rebates)","title":"Reasoning questions"},{"location":"ethereum-roadmap/ethereum-1.x/#current-proposals","text":"Introduce rent on all accounts (contracts and non-contracts), existing and newly created ones, with the ability to restore evicted contracts. Current location Introduce fund lock-up when state is expanded (creation of accounts, adding store items), which is partially released when the state is cleared. Apply rent only on the pre-existing state. Current location Increase the cost of state expansion in \u201cshort term\u201d, to enable block gas limit increase before state rent is implemented Do nothing","title":"Current proposals"},{"location":"ethereum-roadmap/ethereum-1.x/#challenges-inherent-to-most-proposals","text":"How will existing dapps be affected. Will they become too expensive/cumbersome to use? Will they need to be optimised/rewritten completely? Denomination of the extra state expansion charge or rent - should it be priced in gas, ETH, and how should be the price be determined (feedback loop on the state size?). Will volatility of ETH price affect those charges too much? Will miners help users evade charges?","title":"Challenges inherent to most proposals"},{"location":"ethereum-roadmap/ethereum-1.x/#classes-of-contracts-and-impacts","text":"Part of the state rent research is to identify main classes of contracts that are likely to be affected by the changes in the protocol, and provide guidelines on what they can do about it. Likely important classes: ERC20 token contracts and applications managing them (DAI, Augur) On-chain order books (DEXs) ENS Non-fungible token contracts Multi-signature wallets Gaming contracts Gambling contracts","title":"Classes of contracts and impacts"},{"location":"ethereum-roadmap/ethereum-1.x/#resources","text":"State Rent Proposal","title":"Resources"},{"location":"ethereum-roadmap/ethereum-1.x/#ewasm","text":"","title":"eWASM"},{"location":"ethereum-roadmap/ethereum-1.x/#main-unresolved-questions","text":"Gas metering Memory allocation Interaction with the rest of EVM state (e.g. contract storage, balances) Interpreter/compiler guarantees on compilation time and runtime","title":"Main unresolved questions"},{"location":"ethereum-roadmap/ethereum-1.x/#gas-metering","text":"Two main approaches: Injection. Wasm bytecode gets pre-processed. An extra register is added to serve as a gas counter. It gets incremented at certain points (jumps, calls) and out-of-gas check is performed. Pro: generic. Con: performance overhead. Automatic upper bound estimation. Static analysis is performed on the bytecode, and, for some subset of codes, upper bound of executed instructions (virtual gas) can be calculated. Pro: no performance overhead. Con: only subset of codes Current approach for the 1st phase (pre-compiles) is upper-bound based.","title":"Gas metering"},{"location":"ethereum-roadmap/ethereum-1.x/#memory-allocation","text":"Wasm semantics dictates that Wasm execution has a linear memory (only one in the current version of the spec) that can be grown on demand. Will that linear memory be allocated every time the engine is called, and then torn down at the end of the execution? If yes, how more efficient is this compared to the current EVM model (which does this allocation and tearing down at each CALL opcode).","title":"Memory allocation"},{"location":"ethereum-roadmap/ethereum-1.x/#interaction-with-the-rest-of-evm-state","text":"Was proposed via external functions, for example (name made up): function_SLOAD(storage_index: uint256) Alternative approach is not to have Ewasm code access EVM state, but only exchange input/output when called. This, of course, makes maintaining large persistent data structures difficult.","title":"Interaction with the rest of EVM state"},{"location":"ethereum-roadmap/ethereum-1.x/#interpretercompiler-guarantees","text":"Initially, this problem has been brought up in the context of JITs (Just In Time) compilers. JIT compilers were one of the reasons why WebAssembly was a big performance improvement over JavaScript. JIT compilers might be problematic in an adversarial environment, because it is usually possible to find a program that takes an unusually long time to compile, and algorithms that decide what to compile \u201cjust in time\u201d can be targeted too. AOT (Ahead of Time) compilers can be used for Core Dev-controlled pre-compiles (Phase 1). For Phase 2, the plan was to initially use very straightforward interpreters, and then develop AOT compilers with necessary guarantees. The idea of first introducing interpreters is to make sure eWASM is there, giving people more motivation to work on the compilers (which is harder than interpreter)","title":"Interpreter/compiler guarantees"},{"location":"ethereum-roadmap/ethereum-1.x/#storage-pruning","text":"","title":"Storage Pruning"},{"location":"ethereum-roadmap/ethereum-1.x/#the-questions-to-be-answered-are","text":"What do we absolutely have to keep to comply with the Ethereum protocol? Do we always need to keep all the blocks? (maybe not, if we use backward sync, for example) Do we need to keep receipts, or just logs, how much (in Gb), or for how long? Do we need to always download the entire header chain or can we compress it (with STARK proofs for example)? Can we improve snapshot sync procedures (fast sync, warp sync) so that they prevent invalid state transitions (with Validity Proofs, for example)?","title":"The questions to be answered are:"},{"location":"ethereum-roadmap/ethereum-1.x/#simulation-and-emulation","text":"Simulation handles models of the software agents (in our case Ethereum client software instances), coarse enough to be performant, and fine enough to capture the important facets of the agents. Emulation handles the actual software agents (in our case the actual implementations of Ethereum like geth and parity), placed into the virtual environments with lots of freedom to change parameters of virtual machines and the network connecting them. Potential questions that simulation may be able to answer: Will uncle rate become much less of an indicator of the network congestion if most of the Ethereum nodes propagate blocks straight after verifying Proof Of Work (instead of fully processing the block as they used to do)? Potential questions that emulations may be able to answer: What is the function that describes the relationship between the rate of success for snapshot synchornisations (fast sync, warp sync) and things like prevailing bandwidth and state history pruning threshold?","title":"Simulation and Emulation"},{"location":"ethereum-roadmap/ethereum-1.x/#deliverables","text":"","title":"Deliverables"},{"location":"ethereum-roadmap/ethereum-1.x/#measures-requiring-hard-forks","text":"State rent (or state growth limiting) Ewasm","title":"Measures requiring hard-forks:"},{"location":"ethereum-roadmap/ethereum-1.x/#measures-likely-not-requiring-hard-forks-but-requiring-client-code-coordination-on-the-network-protocol","text":"Storage pruning Simulation and Emulation group produces data for making projections, benchmarks, and parameter calibrations for other groups.","title":"Measures likely not requiring hard-forks, but requiring client code coordination on the network protocol:"},{"location":"ethereum-roadmap/planned-upgrades/","text":"Planned Network Upgrades The Ethereum network goes through planned network upgrades via hard forks every nine months. The names given to future planned network upgrades. Constantinople The Constantinople hard fork will occur at block 7,280,000 on approximately 2/27/2019. The Constantinople fork consists of 4 EIPS: EIP 145: Bitwise shifting instructions in EVM EIP 1014: Skinny CREATE2 EIP 1052: EXTCODEHASH Opcode EIP 1234: Constantinople Difficulty Bomb Delay and Block Reward Adjustment Istanbul Istanbul is the name given to the hard fork expected to occur nine months after Constantinople. This will be approximately 2019-11-27. Resources Constantinople Progress Tracker","title":"Planned Upgrades"},{"location":"ethereum-roadmap/planned-upgrades/#planned-network-upgrades","text":"The Ethereum network goes through planned network upgrades via hard forks every nine months. The names given to future planned network upgrades.","title":"Planned Network Upgrades"},{"location":"ethereum-roadmap/planned-upgrades/#constantinople","text":"The Constantinople hard fork will occur at block 7,280,000 on approximately 2/27/2019. The Constantinople fork consists of 4 EIPS: EIP 145: Bitwise shifting instructions in EVM EIP 1014: Skinny CREATE2 EIP 1052: EXTCODEHASH Opcode EIP 1234: Constantinople Difficulty Bomb Delay and Block Reward Adjustment","title":"Constantinople"},{"location":"ethereum-roadmap/planned-upgrades/#istanbul","text":"Istanbul is the name given to the hard fork expected to occur nine months after Constantinople. This will be approximately 2019-11-27.","title":"Istanbul"},{"location":"ethereum-roadmap/planned-upgrades/#resources","text":"Constantinople Progress Tracker","title":"Resources"},{"location":"ethereum-roadmap/privacy/","text":"Privacy Summary Privacy on Ethereum is being actively worked on by a number of different teams. There are a couple of key technologies to know about: Zero Knowledge-based zk-SNARKs (used in Zcash) zk-STARKs Aztec Protocol is building an efficient zero-knowledge privacy protocol and decentralised exchange. The protocol is already live on Ethereum's mainnet. Starkware Industries is using STARK technology to improve scalability and privacy on Ethereum. Enigma Protocol are building 'secret contracts' which enable computation over encrypted data . Resources: Private DAI transactions on Ethereum using Zk-SNARKs Explain Like I\u2019m 5: Zero Knowledge Proof","title":"Privacy"},{"location":"ethereum-roadmap/privacy/#privacy","text":"","title":"Privacy"},{"location":"ethereum-roadmap/privacy/#summary","text":"Privacy on Ethereum is being actively worked on by a number of different teams.","title":"Summary"},{"location":"ethereum-roadmap/privacy/#there-are-a-couple-of-key-technologies-to-know-about","text":"Zero Knowledge-based zk-SNARKs (used in Zcash) zk-STARKs Aztec Protocol is building an efficient zero-knowledge privacy protocol and decentralised exchange. The protocol is already live on Ethereum's mainnet. Starkware Industries is using STARK technology to improve scalability and privacy on Ethereum. Enigma Protocol are building 'secret contracts' which enable computation over encrypted data .","title":"There are a couple of key technologies to know about:"},{"location":"ethereum-roadmap/privacy/#resources","text":"Private DAI transactions on Ethereum using Zk-SNARKs Explain Like I\u2019m 5: Zero Knowledge Proof","title":"Resources:"},{"location":"ethereum-roadmap/ethereum-2.0/eth-1.0-to-2.0-migration/","text":"Eth 1.0 to 2.0 Migration Introduction There are two important factors to consider when it comes to migrating from the Eth 1.0 chain to the Eth 2.0 chain. First we have the need to migrate existing Ether over and second we have to transition the state of the chain over. Ether Migration The current proposal is that in Phase 0 , users on the Eth 1.0 chain will be able to lock their Ether up in a contract and will be credited with that same amount of Ether on the Beacon Chain in Eth 2.0. At that point, they can stake that Ether and begin to earn interest. However, there is also some community interest in creating a two way bridge for that Ether between the 1.0 and 2.0 chains. Here we will weigh the pros and cons of each in order to help stimulate discussion. One-way bridge Pros Cons Steady security, deposits can only go up High lockup risk for early stakers Less complexity for early stages Potential for two coins via futures market Keeps forks isolated to each chain Fragmented community/economics Two-way bridge Pros Cons Less risk of lockup, more deposit inflow High volatility of total stake Keeps just a single ETH coin Additional code complexity in early stages If issues arise with Eth 2.0, can bring coins back Risk of lockup is absent, will likely see more games played on early code State Migration The current proposal is that in Phase 2 , the state of the current Eth 1.0 chain will be transferred into a shard on the Eth 2.0 chain. At this point, all information from the Eth 1.0 chain will be available on the Eth 2.0 chain. However, there is also some community interest in not doing this state transition. Here we will weight the pros and cons of each in order to help stimulate discussion. State migration in Phase 2 Pros Cons No state migration in Phase 2 Pros Cons","title":"Ethereum 1.0 to 2.0 Migration"},{"location":"ethereum-roadmap/ethereum-2.0/eth-1.0-to-2.0-migration/#eth-10-to-20-migration","text":"","title":"Eth 1.0 to 2.0 Migration"},{"location":"ethereum-roadmap/ethereum-2.0/eth-1.0-to-2.0-migration/#introduction","text":"There are two important factors to consider when it comes to migrating from the Eth 1.0 chain to the Eth 2.0 chain. First we have the need to migrate existing Ether over and second we have to transition the state of the chain over.","title":"Introduction"},{"location":"ethereum-roadmap/ethereum-2.0/eth-1.0-to-2.0-migration/#ether-migration","text":"The current proposal is that in Phase 0 , users on the Eth 1.0 chain will be able to lock their Ether up in a contract and will be credited with that same amount of Ether on the Beacon Chain in Eth 2.0. At that point, they can stake that Ether and begin to earn interest. However, there is also some community interest in creating a two way bridge for that Ether between the 1.0 and 2.0 chains. Here we will weigh the pros and cons of each in order to help stimulate discussion. One-way bridge Pros Cons Steady security, deposits can only go up High lockup risk for early stakers Less complexity for early stages Potential for two coins via futures market Keeps forks isolated to each chain Fragmented community/economics Two-way bridge Pros Cons Less risk of lockup, more deposit inflow High volatility of total stake Keeps just a single ETH coin Additional code complexity in early stages If issues arise with Eth 2.0, can bring coins back Risk of lockup is absent, will likely see more games played on early code","title":"Ether Migration"},{"location":"ethereum-roadmap/ethereum-2.0/eth-1.0-to-2.0-migration/#state-migration","text":"The current proposal is that in Phase 2 , the state of the current Eth 1.0 chain will be transferred into a shard on the Eth 2.0 chain. At this point, all information from the Eth 1.0 chain will be available on the Eth 2.0 chain. However, there is also some community interest in not doing this state transition. Here we will weight the pros and cons of each in order to help stimulate discussion. State migration in Phase 2 Pros Cons No state migration in Phase 2 Pros Cons","title":"State Migration"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-economics/","text":"Eth 2.0 Economics Introduction The Ethereum Serenity upgrade will bring with it a switch from Proof of Work to Proof of Stake. This means that rather than pay miners to secure the network, we will be paying validators to secure the network. It's vitally important to get the economics of staking right so that the network stays healthy and secure. If the incentive to stake is too low, the network will not get the minimum amount of validators needed to keep many shards going. If the incentive is too high, the network is overpaying for security and inflating at a rate that is detrimental to the economics of the network as a whole. There are a few considerations when it comes to how many validators the network \"needs\". According to the latest spec, the recommended minimum validators per committee is 111. At 1024 shards that would be 113,664 validators and 3,637,248 total ETH staked. To achieve crosslinks on all shards within 1 epoch, the committee size would be 256. That equates to 8,388,608 total ETH at stake on the network. Having less is fine it just means crosslinks become rarer. Terms NOTE: Some of these are taken from https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md Validator - a participant in the Casper/sharding consensus system. You can become one by depositing 32 ETH into the Casper mechanism. Committee - a (pseudo-) randomly sampled subset of active validators. When a committee is referred to collectively, as in \"this committee attests to X\", this is assumed to mean \"some subset of that committee that contains enough validators that the protocol recognizes it as representing the committee\". Issuance Rate - The annualized rate at which ETH supply grows. Interest - The annualized rate at which validators are rewarded (in ETH). Validator Economic Incentive There are many things that a user will consider when wanting to become a validator. In the base case, some users may believe in the Ethereum network so much that they would stake at a loss if need be. A good example of this is the 12,000 Ethereum nodes running today. However, in the simplest case we can break down the thought process as follows: Total Incentive to Stake = Validator Rewards + Network Fees - Cost to run a Validator *One factor discussed later that validators will consider as well is competition. Staking Rewards In order to incentivize those that have ETH to stake in the network, there must be some type of reward. It's unlikely that many people would stake their ETH for no reward. Serenity accomplishes this by paying validators a reward for every block they successfully propose. In the latest spec this is a sliding scale based on total network stake. So if total ETH stake is low, the interest rate goes up and as stake rises, it starts to fall. We can calculate this scale using the spec. There are a lot of variables in doing this. First up are the constants : Constant Value ETH stake 32 Shards 1024 Slot time (in seconds) 6 Epoch Length (in slots) 64 Base Reward Quotient 1024 From here we can start to calculate the outputs using a single assumption which is total network stake. (Let's assume 10,000,000 in the example) Output Calculation Network Validators 10000000/32 = 312,500 Validators/Shard 10000000/(32*1024) = 305 Epoch/year 31536000/(6*64) = 82125 Reward Quotient 1024*INT(SQRT(10000000)) = 3,237,888 Reward/epoch 10000000/3237888 = 3.088 Generated ETH/Year 82125*3.088 = 253638 Validator Interest/Year 253638/10000000 = 2.54% Issuance Rate/Year 253638/104000000 = 0.24% So here we can see that with 10,000,000 total network stake, validators are gaining 2.54% a year and the network is inflating at 0.24% a year. We can now take these formulas and generate the sliding scale: Total Network Stake Validator Interest Network Issuance 1,000,000 8.02% 0.08% 2,000,000 5.67% 0.11% 3,000,000 4.63% 0.13% 5,000,000 3.59% 0.17% 10,000,000 2.54% 0.24% 20,000,000 1.79% 0.34% 30,000,000 1.46% 0.42% 50,000,000 1.13% 0.55% 100,000,000 0.80% 0.77% Fees Validators earn a cut of the transaction fees that people pay to use the network. This is one area that needs more research but currently, the Ethereum network is paying about 600 ETH a day in fees. At current rate that's 219,000 ETH a year. How this will scale up as we add shards and throughput to the network will be important because it goes into the reward calculation. Staking Costs and Risks Validating and earning rewards is not a free lunch. There are many things to consider for one to become a validator. These factors will be considered by every validator when contemplating if the staking rewards are \"worth it\". They are: Computing cost Users will need to run validators clients at a minimum and likely a beacon node as well. This requires computing resources. The specifics around how much as far as HDD, bandwidth and more are still being figured out . Beacon Node: similar to running geth/parity today Validator client: lightweight and need one per 32 ETH stake Capital acquisition and lockup The user must acquire the necessary 32 Ether either via purchase or mining. Stakers can't directly sell staked Ether while it's staked. If the user wants to withdraw funds, there is a set amount of time they must wait to get their ETH back. However, this time has come down considerably in the latest versions of the spec. The minimum withdraw queue wait is 18 hours. This could go up if a lot of people are exiting at the same time but 18 hours will likely be the norm. Code Risk There is some code risk involved in staking that users will take into account. This will be more of a concern early on and likely dissipate over time. It's important to distinguish between client side code risk and consensus code risk. If the network runs into a consensus code break, the network will hard fork and fix it, so that's less of a concern. However, client side code risk is more serious because it'll be hard to distinguish that from a malicious fault. General uptime and maintenance cost Users need to make sure their validator doesn't have downtime or they risk a quadratic leak on their stake. If a user has multiple validators, maintenance cost and worry of the infrastructure comes into play. Security risk Beyond failures in the client code, stakers are responsible for the security environment of their validator clients (internet connection, operating system, hardware, etc.). If their validator client gets hacked due to a security failure, leading to forced downtime and/or misbehavior, there's currently no way to recover funds. This risk is similar to the risk of getting Ether stolen from a wallet due to a hacked laptop or smartphone. With decentralized autonomy comes responsibility. Competition A very important factor in determining if staking ETH is worth it is comparing the net reward versus competition. We should assume that stakers do not necessarily care about securing the Ethereum network but rather they are motivated by profit. There are many different categories of competition to consider: Decentralized Finance Decentralized finance applications such as Compound Finance , Dharma and Maker . These applications offer ways for users to lock up ETH and gain a reward (interest). Trying to understand what these offerings are or will be is something that should be considered. Other Investment Vehicles More traditional investment alternatives such as bonds, certificates of deposit, savings account, etc. can be considered competition to staking as well. While not as directly influential to the decent as DeFi apps, they need to be considered. Alternative Staking Coins There is over 500 alternative PoS coins , with a reward structure. Why stake ETH, when one can earn more, with potentially less infrastructure and risk, on another coin? Spreadsheet Examples Basic: Click here to see calculations of network and personal staking variables given the latest spec. Advanced: Building on the above, this sheet analyzes the financial return when utilizing different validator architectures.","title":"Ethereum 2.0 Economics"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-economics/#eth-20-economics","text":"","title":"Eth 2.0 Economics"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-economics/#introduction","text":"The Ethereum Serenity upgrade will bring with it a switch from Proof of Work to Proof of Stake. This means that rather than pay miners to secure the network, we will be paying validators to secure the network. It's vitally important to get the economics of staking right so that the network stays healthy and secure. If the incentive to stake is too low, the network will not get the minimum amount of validators needed to keep many shards going. If the incentive is too high, the network is overpaying for security and inflating at a rate that is detrimental to the economics of the network as a whole. There are a few considerations when it comes to how many validators the network \"needs\". According to the latest spec, the recommended minimum validators per committee is 111. At 1024 shards that would be 113,664 validators and 3,637,248 total ETH staked. To achieve crosslinks on all shards within 1 epoch, the committee size would be 256. That equates to 8,388,608 total ETH at stake on the network. Having less is fine it just means crosslinks become rarer.","title":"Introduction"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-economics/#terms","text":"NOTE: Some of these are taken from https://github.com/ethereum/eth2.0-specs/blob/master/specs/core/0_beacon-chain.md Validator - a participant in the Casper/sharding consensus system. You can become one by depositing 32 ETH into the Casper mechanism. Committee - a (pseudo-) randomly sampled subset of active validators. When a committee is referred to collectively, as in \"this committee attests to X\", this is assumed to mean \"some subset of that committee that contains enough validators that the protocol recognizes it as representing the committee\". Issuance Rate - The annualized rate at which ETH supply grows. Interest - The annualized rate at which validators are rewarded (in ETH).","title":"Terms"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-economics/#validator-economic-incentive","text":"There are many things that a user will consider when wanting to become a validator. In the base case, some users may believe in the Ethereum network so much that they would stake at a loss if need be. A good example of this is the 12,000 Ethereum nodes running today. However, in the simplest case we can break down the thought process as follows: Total Incentive to Stake = Validator Rewards + Network Fees - Cost to run a Validator *One factor discussed later that validators will consider as well is competition.","title":"Validator Economic Incentive"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-economics/#staking-rewards","text":"In order to incentivize those that have ETH to stake in the network, there must be some type of reward. It's unlikely that many people would stake their ETH for no reward. Serenity accomplishes this by paying validators a reward for every block they successfully propose. In the latest spec this is a sliding scale based on total network stake. So if total ETH stake is low, the interest rate goes up and as stake rises, it starts to fall. We can calculate this scale using the spec. There are a lot of variables in doing this. First up are the constants : Constant Value ETH stake 32 Shards 1024 Slot time (in seconds) 6 Epoch Length (in slots) 64 Base Reward Quotient 1024 From here we can start to calculate the outputs using a single assumption which is total network stake. (Let's assume 10,000,000 in the example) Output Calculation Network Validators 10000000/32 = 312,500 Validators/Shard 10000000/(32*1024) = 305 Epoch/year 31536000/(6*64) = 82125 Reward Quotient 1024*INT(SQRT(10000000)) = 3,237,888 Reward/epoch 10000000/3237888 = 3.088 Generated ETH/Year 82125*3.088 = 253638 Validator Interest/Year 253638/10000000 = 2.54% Issuance Rate/Year 253638/104000000 = 0.24% So here we can see that with 10,000,000 total network stake, validators are gaining 2.54% a year and the network is inflating at 0.24% a year. We can now take these formulas and generate the sliding scale: Total Network Stake Validator Interest Network Issuance 1,000,000 8.02% 0.08% 2,000,000 5.67% 0.11% 3,000,000 4.63% 0.13% 5,000,000 3.59% 0.17% 10,000,000 2.54% 0.24% 20,000,000 1.79% 0.34% 30,000,000 1.46% 0.42% 50,000,000 1.13% 0.55% 100,000,000 0.80% 0.77%","title":"Staking Rewards"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-economics/#fees","text":"Validators earn a cut of the transaction fees that people pay to use the network. This is one area that needs more research but currently, the Ethereum network is paying about 600 ETH a day in fees. At current rate that's 219,000 ETH a year. How this will scale up as we add shards and throughput to the network will be important because it goes into the reward calculation.","title":"Fees"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-economics/#staking-costs-and-risks","text":"Validating and earning rewards is not a free lunch. There are many things to consider for one to become a validator. These factors will be considered by every validator when contemplating if the staking rewards are \"worth it\". They are: Computing cost Users will need to run validators clients at a minimum and likely a beacon node as well. This requires computing resources. The specifics around how much as far as HDD, bandwidth and more are still being figured out . Beacon Node: similar to running geth/parity today Validator client: lightweight and need one per 32 ETH stake Capital acquisition and lockup The user must acquire the necessary 32 Ether either via purchase or mining. Stakers can't directly sell staked Ether while it's staked. If the user wants to withdraw funds, there is a set amount of time they must wait to get their ETH back. However, this time has come down considerably in the latest versions of the spec. The minimum withdraw queue wait is 18 hours. This could go up if a lot of people are exiting at the same time but 18 hours will likely be the norm. Code Risk There is some code risk involved in staking that users will take into account. This will be more of a concern early on and likely dissipate over time. It's important to distinguish between client side code risk and consensus code risk. If the network runs into a consensus code break, the network will hard fork and fix it, so that's less of a concern. However, client side code risk is more serious because it'll be hard to distinguish that from a malicious fault. General uptime and maintenance cost Users need to make sure their validator doesn't have downtime or they risk a quadratic leak on their stake. If a user has multiple validators, maintenance cost and worry of the infrastructure comes into play. Security risk Beyond failures in the client code, stakers are responsible for the security environment of their validator clients (internet connection, operating system, hardware, etc.). If their validator client gets hacked due to a security failure, leading to forced downtime and/or misbehavior, there's currently no way to recover funds. This risk is similar to the risk of getting Ether stolen from a wallet due to a hacked laptop or smartphone. With decentralized autonomy comes responsibility.","title":"Staking Costs and Risks"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-economics/#competition","text":"A very important factor in determining if staking ETH is worth it is comparing the net reward versus competition. We should assume that stakers do not necessarily care about securing the Ethereum network but rather they are motivated by profit. There are many different categories of competition to consider: Decentralized Finance Decentralized finance applications such as Compound Finance , Dharma and Maker . These applications offer ways for users to lock up ETH and gain a reward (interest). Trying to understand what these offerings are or will be is something that should be considered. Other Investment Vehicles More traditional investment alternatives such as bonds, certificates of deposit, savings account, etc. can be considered competition to staking as well. While not as directly influential to the decent as DeFi apps, they need to be considered. Alternative Staking Coins There is over 500 alternative PoS coins , with a reward structure. Why stake ETH, when one can earn more, with potentially less infrastructure and risk, on another coin?","title":"Competition"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-economics/#spreadsheet-examples","text":"Basic: Click here to see calculations of network and personal staking variables given the latest spec. Advanced: Building on the above, this sheet analyzes the financial return when utilizing different validator architectures.","title":"Spreadsheet Examples"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/","text":"Ethereum 2.0 (Serenity) Phases This page is a WIP. Introduction Ethereum\u2019s Serenity upgrade will bring Sharding, Proof of Stake, a new virtual machine (eWASM) and more. It\u2019s important to understand that this upgrade will not take place at a single point in time. Instead, it will be rolled out in phases. This document attempts to be a reference point for these phases and what each includes. To start, here is a nice visual from Hsiao-Wei Wang on what the different layers and phases look like. Design Goals Ethereum researcher Danny Ryan has stipulated 5 distinct design goals for Ethereum 2.0: Decentralisation: to allow for a typical consumer laptop with O(C) resources to process/validate O(1) shards (including any system level validation such as the beacon chain). Resilience: to remain live through major network partitions and when very large portions of nodes go offline. Security: to utilize crypto and design techniques that allow for a large participation of validators in total and per unit time. Simplicity: to minimize complexity, even at the cost of some losses in efficiency. Longevity: to select all components such that they are either quantum secure or can be easily swapped out for quantum secure counterparts when available. Phase 0 - Beacon Chain (~Late 2019) What is included? Phase 0 is the name given to the launch of the Beacon Chain. The Beacon Chain will manage the Casper Proof of Stake protocol. As Ben Edgington puts it , \u201cThere are a number of aspects to this: managing validators and their stakes; nominating the chosen block proposer for each shard at each step; organising validators into committees to vote on the proposed blocks; applying the consensus rules; applying rewards and penalties to validators; and, being an anchor point on which the shards register their states to facilitate cross-shard transactions.\u201d Phase 0 will use Casper FFG for finality and RANDAO to select block proposers and committees. What will the network look like? Once Phase 0 is complete, there will be two active Ethereum chains. For the sake of clarity let\u2019s call them the Eth 1.0 chain (current, PoW mainchain) and the Eth 2.0 chain (new beacon chain). During this phase, users will be able to migrate their ETH from the Eth 1.0 chain to the Eth 2.0 chain and become validators. However, they will NOT be able to migrate this ETH back. The reason someone may want to do this is that they could be earning interest paid in ETH on the Eth 2.0 chain. Important Considerations There will be a minimum amount of ETH stake needed in order to first bootstrap the beacon chain. This is defined as CHAIN_START_FULL_DEPOSIT_THRESHOLD in the deposit contract that will live on the Eth 1.0 chain . Currently, this is set to 16384 validators needed. That would mean 524,288 ETH in total stake is needed. This would pay ~11% interest to stakers. ETH rewards earned by validators won\u2019t be transferable until Phase 2 of the Serenity roll-out as that is when state execution is implemented. During Phase 0, all user transactions and smart contract computations will still occur on the Eth 1.0 chain. Phase 1 - Shard Chains What is included? Phase 1 will bring shard chains to the Eth 2.0 side. Shard chains are the key to future scalability as they allow parallel transaction throughput. In Phase 1, the Beacon Chain will now start to manage multiple shards at once. What will the network look like? The Eth 1.0 and 2.0 chains will still operate in parallel after Phase 1. Important Considerations In Phase 0, 1, and 2 the main PoW chain will remain live while testing and transitioning is happening on the Eth 2.0 chain. This means that rewards will be paid to both Ethereum 2.0 validators as well as the normal PoW block rewards. Therefore, the combined inflation of the 2 chains may spike a bit initially but then start to trend towards the 0-1% range as the PoW chain is gradually deemphasized. Phase 2 - State Execution What is included? Phase 2 is where the functionality will start to come together. At this point, the Beacon Chain and shards chains are live, but they are somewhat useless from an end user perspective until smart contracts and transactions can be executed. This will be added in Phase 2. Important Considerations This phase will endow shards with eWASM as the EVM. It is an open question when and how Ethereum 1.0 accounts and contracts will be migrated to Ethereum 2.0. Resources Sharding Roadmap State of Ethereum Protocol Eth 2.0 Specs Ethereum 2.0 Design Goals","title":"Ethereum 2.0 Phases"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#ethereum-20-40serenity41-phases","text":"This page is a WIP.","title":"Ethereum 2.0 (Serenity) Phases"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#introduction","text":"Ethereum\u2019s Serenity upgrade will bring Sharding, Proof of Stake, a new virtual machine (eWASM) and more. It\u2019s important to understand that this upgrade will not take place at a single point in time. Instead, it will be rolled out in phases. This document attempts to be a reference point for these phases and what each includes. To start, here is a nice visual from Hsiao-Wei Wang on what the different layers and phases look like.","title":"Introduction"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#design-goals","text":"Ethereum researcher Danny Ryan has stipulated 5 distinct design goals for Ethereum 2.0: Decentralisation: to allow for a typical consumer laptop with O(C) resources to process/validate O(1) shards (including any system level validation such as the beacon chain). Resilience: to remain live through major network partitions and when very large portions of nodes go offline. Security: to utilize crypto and design techniques that allow for a large participation of validators in total and per unit time. Simplicity: to minimize complexity, even at the cost of some losses in efficiency. Longevity: to select all components such that they are either quantum secure or can be easily swapped out for quantum secure counterparts when available.","title":"Design Goals"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#phase-0-beacon-chain-40late-201941","text":"","title":"Phase 0 - Beacon Chain (~Late 2019)"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#what-is-included","text":"Phase 0 is the name given to the launch of the Beacon Chain. The Beacon Chain will manage the Casper Proof of Stake protocol. As Ben Edgington puts it , \u201cThere are a number of aspects to this: managing validators and their stakes; nominating the chosen block proposer for each shard at each step; organising validators into committees to vote on the proposed blocks; applying the consensus rules; applying rewards and penalties to validators; and, being an anchor point on which the shards register their states to facilitate cross-shard transactions.\u201d Phase 0 will use Casper FFG for finality and RANDAO to select block proposers and committees.","title":"What is included?"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#what-will-the-network-look-like","text":"Once Phase 0 is complete, there will be two active Ethereum chains. For the sake of clarity let\u2019s call them the Eth 1.0 chain (current, PoW mainchain) and the Eth 2.0 chain (new beacon chain). During this phase, users will be able to migrate their ETH from the Eth 1.0 chain to the Eth 2.0 chain and become validators. However, they will NOT be able to migrate this ETH back. The reason someone may want to do this is that they could be earning interest paid in ETH on the Eth 2.0 chain. Important Considerations There will be a minimum amount of ETH stake needed in order to first bootstrap the beacon chain. This is defined as CHAIN_START_FULL_DEPOSIT_THRESHOLD in the deposit contract that will live on the Eth 1.0 chain . Currently, this is set to 16384 validators needed. That would mean 524,288 ETH in total stake is needed. This would pay ~11% interest to stakers. ETH rewards earned by validators won\u2019t be transferable until Phase 2 of the Serenity roll-out as that is when state execution is implemented. During Phase 0, all user transactions and smart contract computations will still occur on the Eth 1.0 chain.","title":"What will the network look like?"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#phase-1-shard-chains","text":"","title":"Phase 1 - Shard Chains"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#what-is-included_1","text":"Phase 1 will bring shard chains to the Eth 2.0 side. Shard chains are the key to future scalability as they allow parallel transaction throughput. In Phase 1, the Beacon Chain will now start to manage multiple shards at once.","title":"What is included?"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#what-will-the-network-look-like_1","text":"The Eth 1.0 and 2.0 chains will still operate in parallel after Phase 1.","title":"What will the network look like?"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#important-considerations","text":"In Phase 0, 1, and 2 the main PoW chain will remain live while testing and transitioning is happening on the Eth 2.0 chain. This means that rewards will be paid to both Ethereum 2.0 validators as well as the normal PoW block rewards. Therefore, the combined inflation of the 2 chains may spike a bit initially but then start to trend towards the 0-1% range as the PoW chain is gradually deemphasized.","title":"Important Considerations"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#phase-2-state-execution","text":"","title":"Phase 2 - State Execution"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#what-is-included_2","text":"Phase 2 is where the functionality will start to come together. At this point, the Beacon Chain and shards chains are live, but they are somewhat useless from an end user perspective until smart contracts and transactions can be executed. This will be added in Phase 2.","title":"What is included?"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#important-considerations_1","text":"This phase will endow shards with eWASM as the EVM. It is an open question when and how Ethereum 1.0 accounts and contracts will be migrated to Ethereum 2.0.","title":"Important Considerations"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#resources","text":"Sharding Roadmap State of Ethereum Protocol Eth 2.0 Specs Ethereum 2.0 Design Goals","title":"Resources"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/","text":"Proof of Stake What is Proof of Stake Proof of Stake (PoS) is a category of consensus algorithms for public blockchains that depend on a validator's economic stake in the network. In proof of work (PoW) based public blockchains (e.g. Bitcoin and the current implementation of Ethereum), the algorithm rewards participants who solve cryptographic puzzles in order to validate transactions and create new blocks (i.e. mining). In PoS-based public blockchains (e.g. Ethereum's upcoming Casper implementation), a set of validators take turns proposing and voting on the next block, and the weight of each validator's vote depends on the size of its deposit (i.e. stake). Significant advantages of PoS include security, reduced risk of centralization, and energy efficiency. In general, a proof of stake algorithm looks as follows. The blockchain keeps track of a set of validators, and anyone who holds the blockchain's base cryptocurrency (in Ethereum's case, ether) can become a validator by sending a special type of transaction that locks up their ether into a deposit. The process of creating and agreeing to new blocks is then done through a consensus algorithm that all current validators can participate in. There are many kinds of consensus algorithms, and many ways to assign rewards to validators who participate in the consensus algorithm, so there are many \"flavors\" of proof of stake. From an algorithmic perspective, there are two major types: chain-based proof of stake and BFT-style proof of stake. In chain-based proof of stake, the algorithm pseudo-randomly selects a validator during each time slot (e.g. every period of 10 seconds might be a time slot), and assigns that validator the right to create a single block, and this block must point to some previous block (normally the block at the end of the previously longest chain), and so over time most blocks converge into a single constantly growing chain. In BFT-style proof of stake, validators are randomly assigned the right to propose blocks, but agreeing on which block is canonical is done through a multi-round process where every validator sends a \"vote\" for some specific block during each round, and at the end of the process all (honest and online) validators permanently agree on whether or not any given block is part of the chain. Note that blocks may still be chained together; the key difference is that consensus on a block can come within one block, and does not depend on the length or size of the chain after it. What are the benefits of proof of stake as opposed to proof of work? No need to consume large quantities of electricity in order to secure a blockchain (e.g. it's estimated that both Bitcoin and Ethereum burn over $1 million worth of electricity and hardware costs per day as part of their consensus mechanism). Because of the lack of high electricity consumption, there is not as much need to issue as many new coins in order to motivate participants to keep participating in the network. It may theoretically even be possible to have negative net issuance, where a portion of transaction fees is \"burned\" and so the supply goes down over time. Proof of stake opens the door to a wider array of techniques that use game-theoretic mechanism design in order to better discourage centralized cartels from forming and, if they do form, from acting in ways that are harmful to the network (e.g. like selfish mining in proof of work). Reduced centralization risks, as economies of scale are much less of an issue. $10 million of coins will get you exactly 10 times higher returns than $1 million of coins, without any additional disproportionate gains because at the higher level you can afford better mass-production equipment, which is an advantage for Proof-of-Work. Ability to use economic penalties to make various forms of 51% attacks vastly more expensive to carry out than proof of work - to paraphrase Vlad Zamfir, \"it's as though your ASIC farm burned down if you participated in a 51% attack\". What would the equivalent of a 51% attack against Casper look like? There are four basic types of 51% attack: Finality reversion: validators that already finalized block A then finalize some competing block A', thereby breaking the blockchain's finality guarantee. Invalid chain finalization: validators finalize an invalid (or unavailable) block. Liveness denial: validators stop finalizing blocks. Censorship: validators block some or all transactions or blocks from entering the chain. In the first case, users can socially coordinate out-of-band to agree which finalized block came first, and favor that block. The second case can be solved with fraud proofs and data availability proofs. The third case can be solved by a modification to proof of stake algorithms that gradually reduces (\"leaks\") non-participating nodes' weights in the validator set if they do not participate in consensus; the Casper FFG paper includes a description of this. The fourth is most difficult. The fourth can be recovered from via a \"minority soft fork\", where a minority of honest validators agree the majority is censoring them, and stop building on their chain. Instead, they continue their own chain, and eventually the \"leak\" mechanism described above ensures that this honest minority becomes a 2/3 supermajority on the new chain. At that point, the market is expected to favor the chain controlled by honest nodes over the chain controlled by dishonest nodes. Staking Logistics Why would I want to stake my Ether? For staking your ETH and attesting to correct blocks, you will be rewarded with ETH through a network wide interest rate as well as receive a portion of network transaction fees. Details can be found here . What are the minimum requirements to stake? A minimum of 32 ETH per validator Computer Internet connection What software do I need to run to stake? There are two main types of software to be aware of when considering staking on Ethereum: Beacon nodes: This is the hub for your validators. Stores canonical state, handles peers and incoming sync, propagates blocks and attestations. Has a gRPC server that clients can connect to and provides a public API. Validator clients: Talks to your beacon node and signs blocks. You can have multiple of these at 32 ETH each. Stores important secrets such as RANDAO reveal, proof of custody for shared data and BLS private key. Can swap underlying beacon nodes efficiently Tracks shared state execution data and data blobs the validator has signed. This means that there are three possible combinations of software to run: Beacon node only Beacon node + validator client Beacon node + multiple validator clients What are the hardware requirements to run this software? Still TBD. Ideally we can get minimum requirements for all three setups mentioned above. What happens if I lose my internet connection while staking? The key to being a validator is making sure you are only voting for blocks and therefore securing the network. Therefore, there is a slight penalty if your validator client goes offline at any point. There are two scenarios where this can happen: If blocks are finalizing and you're offline, you can lose x% of your deposit over a year where x=current_interest For example, if the current interest rate is 5%, you would lose 0.0137% of your deposit every day, but gain that for every day you're online. If blocks aren't finalizing ( 33% of validators are offline) and you're offline, you can lose 60% in 18 days. If at any point your deposit drops below 16 ETH, you will be removed from the validator set entirely. How long is my Ether locked up if I stake? There is a withdraw queue that you are placed into when wanting to withdraw ETH from your validator. If there is no queue, then the minimum withdraw time is 18 hours and adjusts dynamically depending on how many people are withdrawing at that time. Resources Proof of Stake FAQ Beacon and Validator explanations Some details around staking from Vitalik","title":"Proof of Stake"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#proof-of-stake","text":"","title":"Proof of Stake"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#what-is-proof-of-stake","text":"Proof of Stake (PoS) is a category of consensus algorithms for public blockchains that depend on a validator's economic stake in the network. In proof of work (PoW) based public blockchains (e.g. Bitcoin and the current implementation of Ethereum), the algorithm rewards participants who solve cryptographic puzzles in order to validate transactions and create new blocks (i.e. mining). In PoS-based public blockchains (e.g. Ethereum's upcoming Casper implementation), a set of validators take turns proposing and voting on the next block, and the weight of each validator's vote depends on the size of its deposit (i.e. stake). Significant advantages of PoS include security, reduced risk of centralization, and energy efficiency. In general, a proof of stake algorithm looks as follows. The blockchain keeps track of a set of validators, and anyone who holds the blockchain's base cryptocurrency (in Ethereum's case, ether) can become a validator by sending a special type of transaction that locks up their ether into a deposit. The process of creating and agreeing to new blocks is then done through a consensus algorithm that all current validators can participate in. There are many kinds of consensus algorithms, and many ways to assign rewards to validators who participate in the consensus algorithm, so there are many \"flavors\" of proof of stake. From an algorithmic perspective, there are two major types: chain-based proof of stake and BFT-style proof of stake. In chain-based proof of stake, the algorithm pseudo-randomly selects a validator during each time slot (e.g. every period of 10 seconds might be a time slot), and assigns that validator the right to create a single block, and this block must point to some previous block (normally the block at the end of the previously longest chain), and so over time most blocks converge into a single constantly growing chain. In BFT-style proof of stake, validators are randomly assigned the right to propose blocks, but agreeing on which block is canonical is done through a multi-round process where every validator sends a \"vote\" for some specific block during each round, and at the end of the process all (honest and online) validators permanently agree on whether or not any given block is part of the chain. Note that blocks may still be chained together; the key difference is that consensus on a block can come within one block, and does not depend on the length or size of the chain after it.","title":"What is Proof of Stake"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#what-are-the-benefits-of-proof-of-stake-as-opposed-to-proof-of-work","text":"No need to consume large quantities of electricity in order to secure a blockchain (e.g. it's estimated that both Bitcoin and Ethereum burn over $1 million worth of electricity and hardware costs per day as part of their consensus mechanism). Because of the lack of high electricity consumption, there is not as much need to issue as many new coins in order to motivate participants to keep participating in the network. It may theoretically even be possible to have negative net issuance, where a portion of transaction fees is \"burned\" and so the supply goes down over time. Proof of stake opens the door to a wider array of techniques that use game-theoretic mechanism design in order to better discourage centralized cartels from forming and, if they do form, from acting in ways that are harmful to the network (e.g. like selfish mining in proof of work). Reduced centralization risks, as economies of scale are much less of an issue. $10 million of coins will get you exactly 10 times higher returns than $1 million of coins, without any additional disproportionate gains because at the higher level you can afford better mass-production equipment, which is an advantage for Proof-of-Work. Ability to use economic penalties to make various forms of 51% attacks vastly more expensive to carry out than proof of work - to paraphrase Vlad Zamfir, \"it's as though your ASIC farm burned down if you participated in a 51% attack\".","title":"What are the benefits of proof of stake as opposed to proof of work?"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#what-would-the-equivalent-of-a-51-attack-against-casper-look-like","text":"There are four basic types of 51% attack: Finality reversion: validators that already finalized block A then finalize some competing block A', thereby breaking the blockchain's finality guarantee. Invalid chain finalization: validators finalize an invalid (or unavailable) block. Liveness denial: validators stop finalizing blocks. Censorship: validators block some or all transactions or blocks from entering the chain. In the first case, users can socially coordinate out-of-band to agree which finalized block came first, and favor that block. The second case can be solved with fraud proofs and data availability proofs. The third case can be solved by a modification to proof of stake algorithms that gradually reduces (\"leaks\") non-participating nodes' weights in the validator set if they do not participate in consensus; the Casper FFG paper includes a description of this. The fourth is most difficult. The fourth can be recovered from via a \"minority soft fork\", where a minority of honest validators agree the majority is censoring them, and stop building on their chain. Instead, they continue their own chain, and eventually the \"leak\" mechanism described above ensures that this honest minority becomes a 2/3 supermajority on the new chain. At that point, the market is expected to favor the chain controlled by honest nodes over the chain controlled by dishonest nodes.","title":"What would the equivalent of a 51% attack against Casper look like?"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#staking-logistics","text":"","title":"Staking Logistics"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#why-would-i-want-to-stake-my-ether","text":"For staking your ETH and attesting to correct blocks, you will be rewarded with ETH through a network wide interest rate as well as receive a portion of network transaction fees. Details can be found here .","title":"Why would I want to stake my Ether?"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#what-are-the-minimum-requirements-to-stake","text":"A minimum of 32 ETH per validator Computer Internet connection","title":"What are the minimum requirements to stake?"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#what-software-do-i-need-to-run-to-stake","text":"There are two main types of software to be aware of when considering staking on Ethereum: Beacon nodes: This is the hub for your validators. Stores canonical state, handles peers and incoming sync, propagates blocks and attestations. Has a gRPC server that clients can connect to and provides a public API. Validator clients: Talks to your beacon node and signs blocks. You can have multiple of these at 32 ETH each. Stores important secrets such as RANDAO reveal, proof of custody for shared data and BLS private key. Can swap underlying beacon nodes efficiently Tracks shared state execution data and data blobs the validator has signed. This means that there are three possible combinations of software to run: Beacon node only Beacon node + validator client Beacon node + multiple validator clients","title":"What software do I need to run to stake?"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#what-are-the-hardware-requirements-to-run-this-software","text":"Still TBD. Ideally we can get minimum requirements for all three setups mentioned above.","title":"What are the hardware requirements to run this software?"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#what-happens-if-i-lose-my-internet-connection-while-staking","text":"The key to being a validator is making sure you are only voting for blocks and therefore securing the network. Therefore, there is a slight penalty if your validator client goes offline at any point. There are two scenarios where this can happen: If blocks are finalizing and you're offline, you can lose x% of your deposit over a year where x=current_interest For example, if the current interest rate is 5%, you would lose 0.0137% of your deposit every day, but gain that for every day you're online. If blocks aren't finalizing ( 33% of validators are offline) and you're offline, you can lose 60% in 18 days. If at any point your deposit drops below 16 ETH, you will be removed from the validator set entirely.","title":"What happens if I lose my internet connection while staking?"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#how-long-is-my-ether-locked-up-if-i-stake","text":"There is a withdraw queue that you are placed into when wanting to withdraw ETH from your validator. If there is no queue, then the minimum withdraw time is 18 hours and adjusts dynamically depending on how many people are withdrawing at that time.","title":"How long is my Ether locked up if I stake?"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#resources","text":"Proof of Stake FAQ Beacon and Validator explanations Some details around staking from Vitalik","title":"Resources"},{"location":"ethereum-roadmap/ethereum-2.0/sharding/","text":"Sharding The Scalability Trilemma The Scalability Trilemma claims that blockchain systems can only at most have two of the following three properties: Decentralization (defined as the system being able to run in a scenario where each participant only has access to O(c) resources, i.e. a regular laptop or small VPS) Scalability (defined as being able to process many transactions) Security (defined as being secure against attackers with up to O(n) resources) The key challenge of scalability is finding a way to achieve all three at the base layer of a blockchain - sharding is one such attempt at solving this challenge. What is sharding? Currently, in all blockchain protocols each node stores the entire state (account balances, contract code and storage, etc.) and processes all transactions. This provides a large amount of security, but greatly limits scalability: a blockchain cannot process more transactions than a single node can. In large part because of this, Bitcoin is limited to ~3-7 transactions per second, Ethereum to 7-15, etc. However, this poses a question: are there ways to create a new mechanism, where only a small subset of nodes verifies each transaction? As long as there are sufficiently many nodes verifying each transaction that the system is still highly secure, but a sufficiently small percentage of the total validator set that the system can process many transactions in parallel, could we not split up transaction processing between smaller groups of nodes to greatly increase a blockchain's total throughput? What is the basic idea behind sharding? We split the state and history of Ethereum up into partitions that we call \u201cshards\u201d. For example, a sharding scheme on Ethereum might put all addresses starting with 0x00 into one shard, all addresses starting with 0x01 into another shard, etc. In the simplest form of sharding, each shard also has its own transaction history, and the effect of transactions in some shard are limited to the state of shard of that same shard. One simple example would be a multi-asset blockchain, where there are many shards and each shard stores the balances and processes the transactions associated with one particular asset. In more advanced forms of sharding, some form of cross-shard communication capability, where transactions on one shard can trigger events on other shards, is also included. What might a basic design of a sharded blockchain look like? There exists a set of validators (ie. proof of stake nodes), who randomly get assigned the right to create shard blocks. During each slot (eg. an 8-second period of time), for each shard in [0...999] a random validator gets selected, and given the right to create a block on a shard, which might contain up to, say, 32 kb of data. Also, for each shard, a set of 100 validators get selected as attesters. The header of a block together with at least 67 of the attesting signatures can be published as an object that gets included in the \"main chain\" (also called the beacon chain). Note that there are now several \"levels\" of nodes that can exist in such a system: Super-full node - downloads the full data of the beacon chain and every shard block referenced in the beacon chain. Top-level node - processes the beacon chain blocks only, including the headers and signatures of the shard blocks, but does not download all the data of the shard blocks. Single-shard node - acts as a top-level node, but also fully downloads and verifies every collation on some specific shard that it cares more about. Light node - downloads and verifies the block headers of main chain blocks only; does not process any collation headers or transactions unless it needs to read some specific entry in the state of some specific shard, in which case it downloads the Merkle branch to the most recent collation header for that shard and from there downloads the Merkle proof of the desired value in the state. Resources Sharding FAQ Sharding Roadmap","title":"Sharding"},{"location":"ethereum-roadmap/ethereum-2.0/sharding/#sharding","text":"","title":"Sharding"},{"location":"ethereum-roadmap/ethereum-2.0/sharding/#the-scalability-trilemma","text":"The Scalability Trilemma claims that blockchain systems can only at most have two of the following three properties: Decentralization (defined as the system being able to run in a scenario where each participant only has access to O(c) resources, i.e. a regular laptop or small VPS) Scalability (defined as being able to process many transactions) Security (defined as being secure against attackers with up to O(n) resources) The key challenge of scalability is finding a way to achieve all three at the base layer of a blockchain - sharding is one such attempt at solving this challenge.","title":"The Scalability Trilemma"},{"location":"ethereum-roadmap/ethereum-2.0/sharding/#what-is-sharding","text":"Currently, in all blockchain protocols each node stores the entire state (account balances, contract code and storage, etc.) and processes all transactions. This provides a large amount of security, but greatly limits scalability: a blockchain cannot process more transactions than a single node can. In large part because of this, Bitcoin is limited to ~3-7 transactions per second, Ethereum to 7-15, etc. However, this poses a question: are there ways to create a new mechanism, where only a small subset of nodes verifies each transaction? As long as there are sufficiently many nodes verifying each transaction that the system is still highly secure, but a sufficiently small percentage of the total validator set that the system can process many transactions in parallel, could we not split up transaction processing between smaller groups of nodes to greatly increase a blockchain's total throughput?","title":"What is sharding?"},{"location":"ethereum-roadmap/ethereum-2.0/sharding/#what-is-the-basic-idea-behind-sharding","text":"We split the state and history of Ethereum up into partitions that we call \u201cshards\u201d. For example, a sharding scheme on Ethereum might put all addresses starting with 0x00 into one shard, all addresses starting with 0x01 into another shard, etc. In the simplest form of sharding, each shard also has its own transaction history, and the effect of transactions in some shard are limited to the state of shard of that same shard. One simple example would be a multi-asset blockchain, where there are many shards and each shard stores the balances and processes the transactions associated with one particular asset. In more advanced forms of sharding, some form of cross-shard communication capability, where transactions on one shard can trigger events on other shards, is also included.","title":"What is the basic idea behind sharding?"},{"location":"ethereum-roadmap/ethereum-2.0/sharding/#what-might-a-basic-design-of-a-sharded-blockchain-look-like","text":"There exists a set of validators (ie. proof of stake nodes), who randomly get assigned the right to create shard blocks. During each slot (eg. an 8-second period of time), for each shard in [0...999] a random validator gets selected, and given the right to create a block on a shard, which might contain up to, say, 32 kb of data. Also, for each shard, a set of 100 validators get selected as attesters. The header of a block together with at least 67 of the attesting signatures can be published as an object that gets included in the \"main chain\" (also called the beacon chain). Note that there are now several \"levels\" of nodes that can exist in such a system: Super-full node - downloads the full data of the beacon chain and every shard block referenced in the beacon chain. Top-level node - processes the beacon chain blocks only, including the headers and signatures of the shard blocks, but does not download all the data of the shard blocks. Single-shard node - acts as a top-level node, but also fully downloads and verifies every collation on some specific shard that it cares more about. Light node - downloads and verifies the block headers of main chain blocks only; does not process any collation headers or transactions unless it needs to read some specific entry in the state of some specific shard, in which case it downloads the Merkle branch to the most recent collation header for that shard and from there downloads the Merkle proof of the desired value in the state.","title":"What might a basic design of a sharded blockchain look like?"},{"location":"ethereum-roadmap/ethereum-2.0/sharding/#resources","text":"Sharding FAQ Sharding Roadmap","title":"Resources"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/artemis/","text":"PegaSys Background PegaSys (Protocol Engineering Groups and Systems) is a 50-person team dedicated to enterprise grade blockchain at ConsenSys. Alongside supporting the public Ethereum Mainnet, the team works on privacy, permissioning, scalability, and other features to make Ethereum production-ready for enterprise adoption. Implementation Details The PegaSys Ethereum 2.0 client is called Artemis. It is being built alongside Pantheon, an Ethereum 1.0 and enterprise-grade client written in the Java programming language. Both Artemis and Pantheon are Apache 2.0 licensed. Resources: Website Github Gitter Twitter","title":"Artemis"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/artemis/#pegasys","text":"","title":"PegaSys"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/artemis/#background","text":"PegaSys (Protocol Engineering Groups and Systems) is a 50-person team dedicated to enterprise grade blockchain at ConsenSys. Alongside supporting the public Ethereum Mainnet, the team works on privacy, permissioning, scalability, and other features to make Ethereum production-ready for enterprise adoption.","title":"Background"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/artemis/#implementation-details","text":"The PegaSys Ethereum 2.0 client is called Artemis. It is being built alongside Pantheon, an Ethereum 1.0 and enterprise-grade client written in the Java programming language. Both Artemis and Pantheon are Apache 2.0 licensed.","title":"Implementation Details"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/artemis/#resources","text":"Website Github Gitter Twitter","title":"Resources:"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/harmony/","text":"Harmony Background Harmony is ethereum\u2019s original Java client formerly maintained by a group of independent developers. Implementation Details Harmony is building an Ethereum 2.0 client written in the Java programming language and acts as an alternative to the enterprise-focused Pantheon client. Harmony operates under a General Public License (GPL) designed to ensure any implementations of the code remain \"free software and stay free software\". Resources: Github","title":"Harmony"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/harmony/#harmony","text":"","title":"Harmony"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/harmony/#background","text":"Harmony is ethereum\u2019s original Java client formerly maintained by a group of independent developers.","title":"Background"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/harmony/#implementation-details","text":"Harmony is building an Ethereum 2.0 client written in the Java programming language and acts as an alternative to the enterprise-focused Pantheon client. Harmony operates under a General Public License (GPL) designed to ensure any implementations of the code remain \"free software and stay free software\".","title":"Implementation Details"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/harmony/#resources","text":"Github","title":"Resources:"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/lighthouse/","text":"Sigma Background Founded in 2016, Sigma Prime is an information security and blockchain technology consulting company. Implementation Details Sigma Prime is building an Ethereum 2.0 client called Lighthouse written in the programming language Rust. Resources: Website Github Twitter Blog","title":"Lighthouse"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/lighthouse/#sigma","text":"","title":"Sigma"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/lighthouse/#background","text":"Founded in 2016, Sigma Prime is an information security and blockchain technology consulting company.","title":"Background"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/lighthouse/#implementation-details","text":"Sigma Prime is building an Ethereum 2.0 client called Lighthouse written in the programming language Rust.","title":"Implementation Details"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/lighthouse/#resources","text":"Website Github Twitter Blog","title":"Resources:"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/lodestar/","text":"ChainSafe Systems Background Based in Toronto, ChainSafe Systems is a blockchain research and development firm offering consulting services to a number of different ethereum-based projects including Bunz, Shyft, Aion, and Polymath. Implementation Details The team is currently building an Ethereum 2.0 client written in JavasScript/TypeScript called Lodestar. In addition to the beacon chain client, the team is also working on Simple Serialize (SSZ) in JS, Fixed Sized BigNumbers in TS, and BLS Signatures and Signature Aggregation in JS. Resources: Website Github Gitter Twitter","title":"Lodestar"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/lodestar/#chainsafe-systems","text":"","title":"ChainSafe Systems"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/lodestar/#background","text":"Based in Toronto, ChainSafe Systems is a blockchain research and development firm offering consulting services to a number of different ethereum-based projects including Bunz, Shyft, Aion, and Polymath.","title":"Background"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/lodestar/#implementation-details","text":"The team is currently building an Ethereum 2.0 client written in JavasScript/TypeScript called Lodestar. In addition to the beacon chain client, the team is also working on Simple Serialize (SSZ) in JS, Fixed Sized BigNumbers in TS, and BLS Signatures and Signature Aggregation in JS.","title":"Implementation Details"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/lodestar/#resources","text":"Website Github Gitter Twitter","title":"Resources:"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/nimbus/","text":"Status Background Status is a company building various blockchain-based applications. Their most popular product is a messaging app called Status - an open source, Ethereum-based app that gives people the power to chat, transact, and access a revolutionary world of DApps from their mobile device. Implementation Details Status is building Nimbus - an Ethereum 2.0 client written in the programming language Nim. Nimbus is expected to be Ethereum's first mobile-native client. Resources: Website Github Twitter","title":"Nimbus"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/nimbus/#status","text":"","title":"Status"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/nimbus/#background","text":"Status is a company building various blockchain-based applications. Their most popular product is a messaging app called Status - an open source, Ethereum-based app that gives people the power to chat, transact, and access a revolutionary world of DApps from their mobile device.","title":"Background"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/nimbus/#implementation-details","text":"Status is building Nimbus - an Ethereum 2.0 client written in the programming language Nim. Nimbus is expected to be Ethereum's first mobile-native client.","title":"Implementation Details"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/nimbus/#resources","text":"Website Github Twitter","title":"Resources:"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/prysm/","text":"Prysmatic Labs Background Prysmatic Labs was founded in January of 2018 with the goal of helping the Ethereum blockchain reach scalability. Implementation Details Prysmatic Labs are developing Prysm - an Ethereum 2.0 client written in the programming language Go. The Prysm client will act as a counterpart to the already popular Go client, Geth. Resources: Website Github Twitter Blog","title":"Prysm"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/prysm/#prysmatic-labs","text":"","title":"Prysmatic Labs"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/prysm/#background","text":"Prysmatic Labs was founded in January of 2018 with the goal of helping the Ethereum blockchain reach scalability.","title":"Background"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/prysm/#implementation-details","text":"Prysmatic Labs are developing Prysm - an Ethereum 2.0 client written in the programming language Go. The Prysm client will act as a counterpart to the already popular Go client, Geth.","title":"Implementation Details"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/prysm/#resources","text":"Website Github Twitter Blog","title":"Resources:"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/shasper/","text":"Substrate Shasper Background Parity Technologies is a blockchain infrastructure company responsible for maintaining the popular Ethereum client, Parity Ethereum . Implementation Details Parity is developing Parity Ethereum - a legacy Ethereum 1.0 client written in the Rust programming language and built for mission-critical use. In addition, Parity is developing the Serenity client called Substrate Shasper . Resources: Website Github Twitter","title":"Shasper"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/shasper/#substrate-shasper","text":"","title":"Substrate Shasper"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/shasper/#background","text":"Parity Technologies is a blockchain infrastructure company responsible for maintaining the popular Ethereum client, Parity Ethereum .","title":"Background"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/shasper/#implementation-details","text":"Parity is developing Parity Ethereum - a legacy Ethereum 1.0 client written in the Rust programming language and built for mission-critical use. In addition, Parity is developing the Serenity client called Substrate Shasper .","title":"Implementation Details"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/shasper/#resources","text":"Website Github Twitter","title":"Resources:"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/teams-building-eth2.0/","text":"Teams Building Eth 2.0 There are currently nine independent development teams building Ethereum 2.0 clients: Team Client Language Funding Prysmatic Labs Prysm Go $500k - EF Grant Wave 4 $200k - WXblockchain $100k - Grant Wave 1 $100k - Aragon Nest $100k - ECF grant $100k - Vitalik YOLO fund $50k - District0x $25k - SpankChain Funded by Gitcoin Grant Donation address ChainSafe Lodestar JavaScript $100k - Vitalik YOLO fund $10k for team member Mikerah from EF Funded by Gitcoin Grant PegaSys Artemis Java Funded by ConsenSys Harmony Harmony Java $90k - EF funded Grant Wave 3 Parity Technologies Substrate Shasper Rust $5mil - EF Special Grant Funded by Parity Technologies Sigma Prime Lighthouse Rust $150k - EF Grant Wave 4 $100k - Vitalik YOLO fund Funded by Sigma Prime Funded via Gitcoin grant Status Nimbus Nim $500k - EF Grant Wave 4 Ethereum Foundation Trinity Python $80k - EF Funding Yeeth Yeeth Swift Funded via Gitcoin Grant","title":"Teams Building Eth 2.0"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/teams-building-eth2.0/#teams-building-eth-20","text":"There are currently nine independent development teams building Ethereum 2.0 clients: Team Client Language Funding Prysmatic Labs Prysm Go $500k - EF Grant Wave 4 $200k - WXblockchain $100k - Grant Wave 1 $100k - Aragon Nest $100k - ECF grant $100k - Vitalik YOLO fund $50k - District0x $25k - SpankChain Funded by Gitcoin Grant Donation address ChainSafe Lodestar JavaScript $100k - Vitalik YOLO fund $10k for team member Mikerah from EF Funded by Gitcoin Grant PegaSys Artemis Java Funded by ConsenSys Harmony Harmony Java $90k - EF funded Grant Wave 3 Parity Technologies Substrate Shasper Rust $5mil - EF Special Grant Funded by Parity Technologies Sigma Prime Lighthouse Rust $150k - EF Grant Wave 4 $100k - Vitalik YOLO fund Funded by Sigma Prime Funded via Gitcoin grant Status Nimbus Nim $500k - EF Grant Wave 4 Ethereum Foundation Trinity Python $80k - EF Funding Yeeth Yeeth Swift Funded via Gitcoin Grant","title":"Teams Building Eth 2.0"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/trinity/","text":"Trinity Background The Trinity team is comprised of six developers all except one of whom are contracted to work by the Ethereum Foundation. Implementation Details The team are building Trinity - an Ethereum 1.0 and 2.0 client written in the programming language Python. Resources: Website Github","title":"Trinity"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/trinity/#trinity","text":"","title":"Trinity"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/trinity/#background","text":"The Trinity team is comprised of six developers all except one of whom are contracted to work by the Ethereum Foundation.","title":"Background"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/trinity/#implementation-details","text":"The team are building Trinity - an Ethereum 1.0 and 2.0 client written in the programming language Python.","title":"Implementation Details"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/trinity/#resources","text":"Website Github","title":"Resources:"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/yeeth/","text":"Yeeth Background Dean announced the Swift implementation on Twitter . Implementation Details Dean Eric Tu are building an Ethereum 2.0 client written in the Swift programming language. Resources: Github Twitter Website","title":"Yeeth"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/yeeth/#yeeth","text":"","title":"Yeeth"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/yeeth/#background","text":"Dean announced the Swift implementation on Twitter .","title":"Background"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/yeeth/#implementation-details","text":"Dean Eric Tu are building an Ethereum 2.0 client written in the Swift programming language.","title":"Implementation Details"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/yeeth/#resources","text":"Github Twitter Website","title":"Resources:"},{"location":"ethereum-roadmap/layer-2-scaling/payment-channels/","text":"Payment Channels Summary Payment Channels are one implementation of State Channel technology. Payment channels allow for practically unlimited, bidirectional transfers between two participants, as long as the net sum of their transfers does not exceed the deposited tokens. These transfers can be performed instantaneously and without any involvement of the actual blockchain itself, except for an initial one-time on-chain creation and an eventual closing of the channel. The Raiden Network The Raiden Network is an off-chain scaling solution for performing ERC20-compliant token transfers on the Ethereum blockchain. It is Ethereum's version of Bitcoin's Lightning Network, enabling near-instant, low-fee, scalable, and privacy-preserving payments. The Raiden Network allows secure transfers of tokens between participants without the need for global consensus. This is achieved using digitally signed and hash-locked transfers, called balance proofs, fully collateralized by previously setup on-chain deposits. This concept, illustrated below, is known as payment channel technology. The true strength of Raiden lies in its network protocol. Since opening and closing a payment channel between two peers still requires on-chain transactions, creating channels between all possible peers becomes infeasible. As it turns out, however, you do not need a direct payment channel between a payer and a payee if there exists at least one route through a network of channels that connects the two parties, as shown in figure 2. This network and its associated protocol for routing and interlocking channel transfers is called the Raiden Network. In addition, payment channel transfers, in contrast to on-chain transactions, do not require any fees. Intermediaries within the greater network, however, will want to charge fees on a low percentage basis for providing their own channels to the network, leading to complex routing and a competitive channel fee market. The Raiden protocol aims to facilitate this market by using both protocol-level features and optional auxiliary services. Resources Raiden Network","title":"Payment Channels"},{"location":"ethereum-roadmap/layer-2-scaling/payment-channels/#payment-channels","text":"","title":"Payment Channels"},{"location":"ethereum-roadmap/layer-2-scaling/payment-channels/#summary","text":"Payment Channels are one implementation of State Channel technology. Payment channels allow for practically unlimited, bidirectional transfers between two participants, as long as the net sum of their transfers does not exceed the deposited tokens. These transfers can be performed instantaneously and without any involvement of the actual blockchain itself, except for an initial one-time on-chain creation and an eventual closing of the channel.","title":"Summary"},{"location":"ethereum-roadmap/layer-2-scaling/payment-channels/#the-raiden-network","text":"The Raiden Network is an off-chain scaling solution for performing ERC20-compliant token transfers on the Ethereum blockchain. It is Ethereum's version of Bitcoin's Lightning Network, enabling near-instant, low-fee, scalable, and privacy-preserving payments. The Raiden Network allows secure transfers of tokens between participants without the need for global consensus. This is achieved using digitally signed and hash-locked transfers, called balance proofs, fully collateralized by previously setup on-chain deposits. This concept, illustrated below, is known as payment channel technology. The true strength of Raiden lies in its network protocol. Since opening and closing a payment channel between two peers still requires on-chain transactions, creating channels between all possible peers becomes infeasible. As it turns out, however, you do not need a direct payment channel between a payer and a payee if there exists at least one route through a network of channels that connects the two parties, as shown in figure 2. This network and its associated protocol for routing and interlocking channel transfers is called the Raiden Network. In addition, payment channel transfers, in contrast to on-chain transactions, do not require any fees. Intermediaries within the greater network, however, will want to charge fees on a low percentage basis for providing their own channels to the network, leading to complex routing and a competitive channel fee market. The Raiden protocol aims to facilitate this market by using both protocol-level features and optional auxiliary services.","title":"The Raiden Network"},{"location":"ethereum-roadmap/layer-2-scaling/payment-channels/#resources","text":"Raiden Network","title":"Resources"},{"location":"ethereum-roadmap/layer-2-scaling/plasma/","text":"Plasma What is Plasma? Plasma is a layer 2 scaling solution that was originally proposed by Vitalik Buterin and Joseph Poon in the original paper 'Plasma: Scalable Autonomous Smart Contracts' . Since then, many flavours of Plasma have been proposed that come with different sets of trade-offs. Plasma is a technique for conducting off-chain (layer 2) operations while relying on the underlying Ethereum blockchain (layer 1) to ground its security. You may also see Plasma (and similar constructs) referred to as 'child chains'. How does Plasma work? In order to understand how Plasma works, let\u2019s take a look at how the technology could be used in a real-world example. Let\u2019s imagine that you are creating a digital-collectibles game on Ethereum. The collectibles will be ERC 721 non-fungible tokens (like Cryptokitties), but have certain features and attributes that lets users play against each other \u2014 like Pokemon Go. These kinds of complex operations are expensive to do on-chain, so you decide to use Plasma instead for your application. Initially, smart-contracts are created on the Ethereum main-chain. These smart contracts serve as the \u201croot\u201d of the Plasma child-chain. This main chain entry contains the basic rules of the child-chain, records state hashes of the child-chain, and allows users to move assets between the Ethereum main-chain and the child-chain. After rooting the child-chain in the main chain, a child-chain is created. This child-chain features its own consensus algorithm, independently from the Ethereum main-chain. Let\u2019s use Proof of Stake (PoS) for this example. This consensus mechanism does not rely on miners using electricity to run a hashing algorithm but rather the block producers are economically incentivized to remain truthful by a collateral that will be destroyed in case of a bad actor behaving fraudulently. This consensus algorithm generally allows for faster block-creation times than PoW. Now that the child-chain is initialized, the basic rules of the game can be set, deploying the actual game application smart contracts on the child-chain, which contains all of the game logic and rules. The collectibles are still ERC721 tokens, created on the Ethereum main-chain, and then transferred onto the child-chain using the plasma root. Once the child-chain is active, the block producers periodically commit a validation to the main-chain, essentailly proofing that the current state of the child-chain is valid according to the consensus rules. When a user plays this game, they are executing the application, without ever interacting with the main-chain directly. What are the main benefits of Plasma? Plasma will help the Ethereum blockchain scale by taking operations off-chain. Because only a much smaller number of nodes (i.e. block producers) have to process transactions, fees can be much lower and operations can be faster. Plasma will help to get rid of unnecessary data in the main-chain. Plasma is compatible with various on-chain scaling solutions such as sharding, various block sizes, etc. Does Plasma have drawbacks? The main concern related to the current Plasma proposal is what would happen if everyone using a child-chain tried to exit the sidechain at the same time. In the case of a mass withdrawal, there might not be enough capacity on the Ethereum main-chain to process everyone\u2019s transactions within the challenge period, meaning users could lose funds. Fortunately, there are many possible techniques for preventing this, e.g. by extending the challenge period in a way that is responsive to demand for withdrawals. Resources Ethereum Plasma Explained Construction of a Plasma Chain Plasma Design Comparison An Introduction to Application-Specific Sidechains Scaling Ethereum with Plasma: Georgios Konstantopoulos of Loom (Podcast)","title":"Plasma"},{"location":"ethereum-roadmap/layer-2-scaling/plasma/#plasma","text":"","title":"Plasma"},{"location":"ethereum-roadmap/layer-2-scaling/plasma/#what-is-plasma","text":"Plasma is a layer 2 scaling solution that was originally proposed by Vitalik Buterin and Joseph Poon in the original paper 'Plasma: Scalable Autonomous Smart Contracts' . Since then, many flavours of Plasma have been proposed that come with different sets of trade-offs. Plasma is a technique for conducting off-chain (layer 2) operations while relying on the underlying Ethereum blockchain (layer 1) to ground its security. You may also see Plasma (and similar constructs) referred to as 'child chains'.","title":"What is Plasma?"},{"location":"ethereum-roadmap/layer-2-scaling/plasma/#how-does-plasma-work","text":"In order to understand how Plasma works, let\u2019s take a look at how the technology could be used in a real-world example. Let\u2019s imagine that you are creating a digital-collectibles game on Ethereum. The collectibles will be ERC 721 non-fungible tokens (like Cryptokitties), but have certain features and attributes that lets users play against each other \u2014 like Pokemon Go. These kinds of complex operations are expensive to do on-chain, so you decide to use Plasma instead for your application. Initially, smart-contracts are created on the Ethereum main-chain. These smart contracts serve as the \u201croot\u201d of the Plasma child-chain. This main chain entry contains the basic rules of the child-chain, records state hashes of the child-chain, and allows users to move assets between the Ethereum main-chain and the child-chain. After rooting the child-chain in the main chain, a child-chain is created. This child-chain features its own consensus algorithm, independently from the Ethereum main-chain. Let\u2019s use Proof of Stake (PoS) for this example. This consensus mechanism does not rely on miners using electricity to run a hashing algorithm but rather the block producers are economically incentivized to remain truthful by a collateral that will be destroyed in case of a bad actor behaving fraudulently. This consensus algorithm generally allows for faster block-creation times than PoW. Now that the child-chain is initialized, the basic rules of the game can be set, deploying the actual game application smart contracts on the child-chain, which contains all of the game logic and rules. The collectibles are still ERC721 tokens, created on the Ethereum main-chain, and then transferred onto the child-chain using the plasma root. Once the child-chain is active, the block producers periodically commit a validation to the main-chain, essentailly proofing that the current state of the child-chain is valid according to the consensus rules. When a user plays this game, they are executing the application, without ever interacting with the main-chain directly.","title":"How does Plasma work?"},{"location":"ethereum-roadmap/layer-2-scaling/plasma/#what-are-the-main-benefits-of-plasma","text":"Plasma will help the Ethereum blockchain scale by taking operations off-chain. Because only a much smaller number of nodes (i.e. block producers) have to process transactions, fees can be much lower and operations can be faster. Plasma will help to get rid of unnecessary data in the main-chain. Plasma is compatible with various on-chain scaling solutions such as sharding, various block sizes, etc.","title":"What are the main benefits of Plasma?"},{"location":"ethereum-roadmap/layer-2-scaling/plasma/#does-plasma-have-drawbacks","text":"The main concern related to the current Plasma proposal is what would happen if everyone using a child-chain tried to exit the sidechain at the same time. In the case of a mass withdrawal, there might not be enough capacity on the Ethereum main-chain to process everyone\u2019s transactions within the challenge period, meaning users could lose funds. Fortunately, there are many possible techniques for preventing this, e.g. by extending the challenge period in a way that is responsive to demand for withdrawals.","title":"Does Plasma have drawbacks?"},{"location":"ethereum-roadmap/layer-2-scaling/plasma/#resources","text":"Ethereum Plasma Explained Construction of a Plasma Chain Plasma Design Comparison An Introduction to Application-Specific Sidechains Scaling Ethereum with Plasma: Georgios Konstantopoulos of Loom (Podcast)","title":"Resources"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/","text":"State Channels What Are State Channels? State channels are a very broad and simple way to think about blockchain interactions which could occur on the blockchain, but instead get conducted off of the blockchain, without significantly increasing the risk of any participant. The most well known example of this strategy is the idea of payment channels in Bitcoin, which allow for instant fee-less payments to be sent directly between two parties. State channels are very similar to the concept of payment channels in Bitcoin\u2019s Lightning Network, but instead of only supporting payments, they also support general \u2018state updates.\u2019 For example, moves conducted in a game of Chess could be updated in a state channel and only broadcasted to the Ethereum network once the game is finished. This allows ethereum applications to \"move\" transactions off-chain, increasing the usefulness of the network as a whole. How do State Channels work? State channels work by \u201clocking up\u201d some portion of blockchain state into a multisig contract, controlled by a defined set of participants. The state that is \u201clocked up\u201d is called a state deposit. For instance, this might be an amount of ether or an ERC20 token, but could also be a cryptokitty or an ENS domain name. After the state deposit is locked, channel participants use off-chain messaging to exchange and sign valid ethereum transactions without deploying them to chain. These are transactions that could be put on chain anytime, but are not. A basic breakdown: Part of the blockchain state is locked via multisignature or some sort of smart contract, so that a specific set of participants must completely agree with each other to update it. Participants update the state amongst themselves by constructing and signing transactions that could be submitted to the blockchain, but instead are merely held onto for now. Each new update \u201ctrumps\u201d previous updates. Finally, participants submit the state back to the blockchain, which closes the state channel and unlocks the state again (usually in a different configuration than it started with). Since all exchanged transactions are equally valid as far as the blockchain is concerned, state channels need a mechanism to ensure that the latest off-chain state (i.e., the latest move in our chess game) is the one that ultimately gets settled on the main chain. Thus, if a party attempts to unilaterally close a channel, other parties in the channel have a period of time \u2014 a \"dispute window\" \u2014 in which they have an opportunity to submit a more recent state, thereby proving that fraud was attempted. Once an infraction is proven, the contract handles the resolution process, which typically involves punishing the guilty party by slashing their deposited funds (though one could also simply update to the valid state and proceed accordingly). If the \u201cstate\u201d being updated between participants was a digital currency balance, then we would have a payment channel. Steps 1 and 3, which open and close the channel, involve blockchain operations. But in step 2 an unlimited number of updates can be rapidly made without the need to involve the blockchain at all \u2014 and this is where the power of state channels comes into play, because only steps 1 and 3 need to be published to the network, pay fees, or wait for confirmations. In fact, with careful planning and design, state channels can remain open almost indefinitely, and be used as part of larger hub and spoke systems to power an entire economy or ecosystem. Difference between State Channels and Sidechains State Channel pros State channels have strong privacy properties: This is because everything is happening \u201cinside\u201d a channel between participants, rather than broadcast publicly and recorded on-chain. Only the opening and closing transactions must be public. Whereas in sidechains every transaction is published on the sidechain which is received by every participant on the sidechain irrespective of the fact that you are not interacting with all of the participants on the sidechain. State channels have instant finality, meaning that as soon as both parties sign a state update, it can be considered final. Both parties have a very high guarantee that, if necessary, they can \u201cenforce\u201d that state on-chain. State Channel cons State Channels need 100% availability of all the participants involved: As we have discussed above that if anyone the participants goes unavailable, then this could prove costly to him. The participants can use a third party service to represent him if he goes unavailable (see, for instance, http://hackingdistributed.com/2018/05/22/pisa/ ), but the possibility of the representative getting attacked or bribed makes it a problem for state channels. Whereas in sidechains you don\u2019t have to be available all the time you are on the sidechain. State channels are best used for applications with a defined set of participants: This is because the state deposit contract(the contract used to lock the state) must always know the participants/entities (i.e. addresses) that are part of a given channel. We can add and remove people, but it requires a change to the contract each time. Whereas in sidechains there is no such limitation on the movement of the participants. State Channels are particularly useful where participants are going to be exchanging many state updates over a long period of time: This is because there is an initial cost to creating a channel in deploying the state deposit contract. But once it is deployed, the cost per state update inside that channel is extremely low. Sidechain pros Sidechains are permanent. You don\u2019t have create your own sidechain for specific purpose if there is one present: Sidechains are created and maintained once made. We don\u2019t close sidechains, rather we lock the assets on sidechain to move back to the mainchain. This can be helpful in the way that anyone who is doing a specific task off blockchain/mainchain (for eg. transacting in dogecoin) will come to the same sidechain. So, you don\u2019t have to create separate chains for every new participant. Whereas in state channels, an on-chain operation is required to add a participant to an existing channel. But projects such as Raiden network, and more generally the technique of meta-channels, offer a partial solution to this. They create a mesh of participants so you don\u2019t have to create a new channel for every new participant you interact with. You can interact with participants indirectly creating a channel between you and recipient through some other participant who is common to both: you and the recipient. Sidechains allow cryptocurrencies to interact with one another: They add flexibility and allow developers to experiment with Beta releases of Altcoins or software updates before pushing them on to the main chain. Traditional banking functions like issuing and tracking ownership of shares can be tested on sidechains before moving them onto main chains. Sidechain cons Sidechains do not benefit from the security of the main-chain. A user interacting on a side-chain must trust the security properties of that sidechain, because if it compromised or malevolent, a user has no guarantee of withdrawl to mainchain. In contrast, participants in a state channel can always return to main-chain so long as they follow the protocol. Sidechains need a lot of initial investment to start off: To create a sidechain we need to have enough miners so that the network is safe from attackers. Also, we have to make sure that they are up and running. Whereas there is no blockchain involved in state channels. So, no such requirement is needed. A Federation is needed for sidechains: This adds another layer between the mainchain and the sidechain. This could prove as another weak point for the attackers to attack by bribing or attacking the federation. Whereas in state channel we just need a smart contract to do this for us. Resources Making Sense of Ethereum's Layer 2 Scaling Solutions (Josh Stark) Generalized State Channels on Ethereum (Jeff Coleman, Liam Horne, and Xuanji Li) Difference Between SideChains and State Channels (Vasa) State Channel Applications (Liam Horne)","title":"State Channels"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/#state-channels","text":"","title":"State Channels"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/#what-are-state-channels","text":"State channels are a very broad and simple way to think about blockchain interactions which could occur on the blockchain, but instead get conducted off of the blockchain, without significantly increasing the risk of any participant. The most well known example of this strategy is the idea of payment channels in Bitcoin, which allow for instant fee-less payments to be sent directly between two parties. State channels are very similar to the concept of payment channels in Bitcoin\u2019s Lightning Network, but instead of only supporting payments, they also support general \u2018state updates.\u2019 For example, moves conducted in a game of Chess could be updated in a state channel and only broadcasted to the Ethereum network once the game is finished. This allows ethereum applications to \"move\" transactions off-chain, increasing the usefulness of the network as a whole.","title":"What Are State Channels?"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/#how-do-state-channels-work","text":"State channels work by \u201clocking up\u201d some portion of blockchain state into a multisig contract, controlled by a defined set of participants. The state that is \u201clocked up\u201d is called a state deposit. For instance, this might be an amount of ether or an ERC20 token, but could also be a cryptokitty or an ENS domain name. After the state deposit is locked, channel participants use off-chain messaging to exchange and sign valid ethereum transactions without deploying them to chain. These are transactions that could be put on chain anytime, but are not. A basic breakdown: Part of the blockchain state is locked via multisignature or some sort of smart contract, so that a specific set of participants must completely agree with each other to update it. Participants update the state amongst themselves by constructing and signing transactions that could be submitted to the blockchain, but instead are merely held onto for now. Each new update \u201ctrumps\u201d previous updates. Finally, participants submit the state back to the blockchain, which closes the state channel and unlocks the state again (usually in a different configuration than it started with). Since all exchanged transactions are equally valid as far as the blockchain is concerned, state channels need a mechanism to ensure that the latest off-chain state (i.e., the latest move in our chess game) is the one that ultimately gets settled on the main chain. Thus, if a party attempts to unilaterally close a channel, other parties in the channel have a period of time \u2014 a \"dispute window\" \u2014 in which they have an opportunity to submit a more recent state, thereby proving that fraud was attempted. Once an infraction is proven, the contract handles the resolution process, which typically involves punishing the guilty party by slashing their deposited funds (though one could also simply update to the valid state and proceed accordingly). If the \u201cstate\u201d being updated between participants was a digital currency balance, then we would have a payment channel. Steps 1 and 3, which open and close the channel, involve blockchain operations. But in step 2 an unlimited number of updates can be rapidly made without the need to involve the blockchain at all \u2014 and this is where the power of state channels comes into play, because only steps 1 and 3 need to be published to the network, pay fees, or wait for confirmations. In fact, with careful planning and design, state channels can remain open almost indefinitely, and be used as part of larger hub and spoke systems to power an entire economy or ecosystem.","title":"How do State Channels work?"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/#difference-between-state-channels-and-sidechains","text":"","title":"Difference between State Channels and Sidechains"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/#state-channel-pros","text":"State channels have strong privacy properties: This is because everything is happening \u201cinside\u201d a channel between participants, rather than broadcast publicly and recorded on-chain. Only the opening and closing transactions must be public. Whereas in sidechains every transaction is published on the sidechain which is received by every participant on the sidechain irrespective of the fact that you are not interacting with all of the participants on the sidechain. State channels have instant finality, meaning that as soon as both parties sign a state update, it can be considered final. Both parties have a very high guarantee that, if necessary, they can \u201cenforce\u201d that state on-chain.","title":"State Channel pros"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/#state-channel-cons","text":"State Channels need 100% availability of all the participants involved: As we have discussed above that if anyone the participants goes unavailable, then this could prove costly to him. The participants can use a third party service to represent him if he goes unavailable (see, for instance, http://hackingdistributed.com/2018/05/22/pisa/ ), but the possibility of the representative getting attacked or bribed makes it a problem for state channels. Whereas in sidechains you don\u2019t have to be available all the time you are on the sidechain. State channels are best used for applications with a defined set of participants: This is because the state deposit contract(the contract used to lock the state) must always know the participants/entities (i.e. addresses) that are part of a given channel. We can add and remove people, but it requires a change to the contract each time. Whereas in sidechains there is no such limitation on the movement of the participants. State Channels are particularly useful where participants are going to be exchanging many state updates over a long period of time: This is because there is an initial cost to creating a channel in deploying the state deposit contract. But once it is deployed, the cost per state update inside that channel is extremely low.","title":"State Channel cons"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/#sidechain-pros","text":"Sidechains are permanent. You don\u2019t have create your own sidechain for specific purpose if there is one present: Sidechains are created and maintained once made. We don\u2019t close sidechains, rather we lock the assets on sidechain to move back to the mainchain. This can be helpful in the way that anyone who is doing a specific task off blockchain/mainchain (for eg. transacting in dogecoin) will come to the same sidechain. So, you don\u2019t have to create separate chains for every new participant. Whereas in state channels, an on-chain operation is required to add a participant to an existing channel. But projects such as Raiden network, and more generally the technique of meta-channels, offer a partial solution to this. They create a mesh of participants so you don\u2019t have to create a new channel for every new participant you interact with. You can interact with participants indirectly creating a channel between you and recipient through some other participant who is common to both: you and the recipient. Sidechains allow cryptocurrencies to interact with one another: They add flexibility and allow developers to experiment with Beta releases of Altcoins or software updates before pushing them on to the main chain. Traditional banking functions like issuing and tracking ownership of shares can be tested on sidechains before moving them onto main chains.","title":"Sidechain pros"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/#sidechain-cons","text":"Sidechains do not benefit from the security of the main-chain. A user interacting on a side-chain must trust the security properties of that sidechain, because if it compromised or malevolent, a user has no guarantee of withdrawl to mainchain. In contrast, participants in a state channel can always return to main-chain so long as they follow the protocol. Sidechains need a lot of initial investment to start off: To create a sidechain we need to have enough miners so that the network is safe from attackers. Also, we have to make sure that they are up and running. Whereas there is no blockchain involved in state channels. So, no such requirement is needed. A Federation is needed for sidechains: This adds another layer between the mainchain and the sidechain. This could prove as another weak point for the attackers to attack by bribing or attacking the federation. Whereas in state channel we just need a smart contract to do this for us.","title":"Sidechain cons"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/#resources","text":"Making Sense of Ethereum's Layer 2 Scaling Solutions (Josh Stark) Generalized State Channels on Ethereum (Jeff Coleman, Liam Horne, and Xuanji Li) Difference Between SideChains and State Channels (Vasa) State Channel Applications (Liam Horne)","title":"Resources"},{"location":"ethereum-roadmap/layer-2-scaling/zk-starks/","text":"ZK-STARKs Summary ZK-STARKs (Zero-Knowledge Scalable Transparent ARguments of Knowledge) are a type of cryptographic proof technology that enables users to share validated data or perform computations with a third party without the data or computation being revealed to the third-party, also known as a zero-knowledge proof, in a way that is publicly verifiable. In simpler terms, a zero-knowledge proof can prove something is true without having to reveal what exactly it is proving. For example, ZK-STARKs would allow Alice to verify Bob's banking information using a zero-knowledge cryptographic proof instead of revealing the confidential information to Alice. Prior to the creation of ZK-STARKs, ZK-SNARKs were used to create ZK proof systems, but required a trusted party or parties to initially setup the ZK proof system which introduced the vulnerability of those trusted parties compromising the privacy of the entire system. ZK-STARKs improve upon this technology by removing the need for a trusted setup. Scaling benefits of using STARKs STARKs improve two of problems of permissionless blockchains: scalability and privacy. The pioneer in STARK technology StarkWare Industries' current ZK-STARK research is focusing on scalability first and then privacy later on. STARKs improve scalability by allowing developers to move computations and storage off-chain. Off-chain services will be able to generate STARK proofs that attest the integrity of off-chain computations. These proofs are then placed back on chain for any interested party to validate the computation. Moving the bulk of computational work off-chain using STARKs allows existing blockchain infrastructure to scale exponentially while trustlessly maintaining computational integrity. Differences between ZK-SNARKs and ZK-STARKs ZK-SNARKs require a trusted setup phase whereas ZK-STARKs use publicly verifiable randomness to create trustlessly verifiable computation systems. ZK-STARKs are more scalable in terms of computational speed and size when compared to ZK-SNARKs. ZK-SNARKs are vulnerable to attacks from quantum computers due to the cryptography they use. ZK-STARKs are currently quantum-resistant. Resources ZK-STARKs Whitepaper libSTARK - a C++ library for ZK-STARK systems StarkWare Industries site - The leading researchers pioneering ZK-STARKs StarkWare Industries blog Vitalik's series on ZK-STARKs - Part 1 , Part 2 , Part 3 STARKs presentation at Web3 Summit 2018 - Eli Ben-Sasson and Avihu Levy present Stark vs. Snark Bulletproofs Adam Luciano on ZK-STARKS - A simple breakdown of the STARK whitepaper and differences from SNARKs Zero Knowledge FM - a podcast made for developers and people looking to learn about ZK tech","title":"ZK-STARKs"},{"location":"ethereum-roadmap/layer-2-scaling/zk-starks/#zk-starks","text":"","title":"ZK-STARKs"},{"location":"ethereum-roadmap/layer-2-scaling/zk-starks/#summary","text":"ZK-STARKs (Zero-Knowledge Scalable Transparent ARguments of Knowledge) are a type of cryptographic proof technology that enables users to share validated data or perform computations with a third party without the data or computation being revealed to the third-party, also known as a zero-knowledge proof, in a way that is publicly verifiable. In simpler terms, a zero-knowledge proof can prove something is true without having to reveal what exactly it is proving. For example, ZK-STARKs would allow Alice to verify Bob's banking information using a zero-knowledge cryptographic proof instead of revealing the confidential information to Alice. Prior to the creation of ZK-STARKs, ZK-SNARKs were used to create ZK proof systems, but required a trusted party or parties to initially setup the ZK proof system which introduced the vulnerability of those trusted parties compromising the privacy of the entire system. ZK-STARKs improve upon this technology by removing the need for a trusted setup.","title":"Summary"},{"location":"ethereum-roadmap/layer-2-scaling/zk-starks/#scaling-benefits-of-using-starks","text":"STARKs improve two of problems of permissionless blockchains: scalability and privacy. The pioneer in STARK technology StarkWare Industries' current ZK-STARK research is focusing on scalability first and then privacy later on. STARKs improve scalability by allowing developers to move computations and storage off-chain. Off-chain services will be able to generate STARK proofs that attest the integrity of off-chain computations. These proofs are then placed back on chain for any interested party to validate the computation. Moving the bulk of computational work off-chain using STARKs allows existing blockchain infrastructure to scale exponentially while trustlessly maintaining computational integrity.","title":"Scaling benefits of using STARKs"},{"location":"ethereum-roadmap/layer-2-scaling/zk-starks/#differences-between-zk-snarks-and-zk-starks","text":"ZK-SNARKs require a trusted setup phase whereas ZK-STARKs use publicly verifiable randomness to create trustlessly verifiable computation systems. ZK-STARKs are more scalable in terms of computational speed and size when compared to ZK-SNARKs. ZK-SNARKs are vulnerable to attacks from quantum computers due to the cryptography they use. ZK-STARKs are currently quantum-resistant.","title":"Differences between ZK-SNARKs and ZK-STARKs"},{"location":"ethereum-roadmap/layer-2-scaling/zk-starks/#resources","text":"ZK-STARKs Whitepaper libSTARK - a C++ library for ZK-STARK systems StarkWare Industries site - The leading researchers pioneering ZK-STARKs StarkWare Industries blog Vitalik's series on ZK-STARKs - Part 1 , Part 2 , Part 3 STARKs presentation at Web3 Summit 2018 - Eli Ben-Sasson and Avihu Levy present Stark vs. Snark Bulletproofs Adam Luciano on ZK-STARKS - A simple breakdown of the STARK whitepaper and differences from SNARKs Zero Knowledge FM - a podcast made for developers and people looking to learn about ZK tech","title":"Resources"},{"location":"glossary/crypto-acronyms/","text":"Crypto Acronyms Consensus/Sybil-control PoW - Proof of Work PoS - Proof of Stake PoA - Proof of Authority DPoS - Delegated Proof of Stake LPoS - Liquid Proof of Stake BFT - Byzantine Fault Tolerance dBFT - Delegated Byzantine Fault Tolerance pBFT - Practical Byzantine Fault Tolerance iBFT - Istanbul Byzantine Fault Tolerance Ethereum-related DeFi - Decentralized Finance DAPP - Decentralized Application ERC - Ethereum Request for Comments EIP - Ethereum Improvement Proposal DAO - Decentralized Autonomous Organization EVM - Ethereum Virtual Machine WASM - Web Assembly VDF - Verifiable Delay Function SC - Smart Contract NFT - Non-Fungible Token Bitcoin-related BIP - Bitcoin Improvement Proposal SegWit - Segregated Witness SPV - Simple Payment Verification UTXO - Unspent Transaction Output LN - Lightning Network RSK - RootStock SC Platform MW - MimbleWimble RBF - Replace By Fee UAHF - User Activated Hard Fork UASF - User Activated Soft Fork Money-related SoV - Store of Value MoE - Medium of Exchange UoA - Unit of Account FIAT - Government-issued currency Trading ETF - Exchange Traded Fund TA - Technical Analysis FA - Fundamental Analysis DCA - Dollar Cost Averaging OTC - Over the Counter CEX - Centralized Exchange DEX - Decentralized Exchange PnD - Pump and Dump ICO - Initial Coin Offering STO - Security Token Offering SAFT - Simple Agreement for Future Tokens ROI - Return on Investment SATS - Satoshis ATH/L - All Time High ATL - All Time Low MCAP - Market Capilization BB - Bollinger Bands MACD - Moving Average Convergence Divergence RSI - Relative Strength Index SMA - Simply Moving Average EMA - Exponential Moving Average Mining CPU - Central Processing Unit GPU - Graphics Processing Unit ASIC - Application-Specific Integrated Circuit FPGA - Field Programmable Gate Array HPS - Hashes Per Second Memes HODL - A spelling error FOMO - Fear of Missing Out BTFD - Buy The Fucking Dip DYOR - Do Your Own Research FUD - Fear, Uncertainty and Doubt SFYL - Sorry For Your Loss U.S Regulatory-related SEC - Securities Exchange Commission FTC - Federal Trade Commision CFTC - Commodity Futures Trading Commission FDIC - Federal Deposit Insurance Corporation DOJ - Department of Justice FinCEN - Financial Crimes Enforcement Network FINRA - Financial Industry Regulatory Authority KYC - Know Your Customer AML - Anti-money Laundering Misc BP - Block Producer TXID - Transaction ID TPS - Transactions Per Second ZK - Zero Knowledge P2P - Peer to Peer ALT - Alternative Cryptocurrency HF - Hard Fork SF - Soft Fork WP - Whitepaper 2FA - Two Factor Authentication DDoS - Distributed Denial of Service IPFS - Interplanetary File System PKI - Public Key Infrastructure CT - Crypto Twitter NONCE - Number Only Once HW - Hardware Wallet MCD - Multi-collateral Dai CDP - Collateralized Debt Position EEA - Enterprise Ethereum Alliance HTLC - Hashed Timelock Contract VRF - Verfiable Random Function DAG - Directed Acyclic Graph Security and Privacy SNARKs - Succinct Non-Interactive ARguments of Knowledge STARKs - Scalable Transparent ARguments of Knowledge MPC - Multi-Party Computation Resources A Glossary of Common Terms in the Ethereum / Crypto Space","title":"Acronyms"},{"location":"glossary/crypto-acronyms/#crypto-acronyms","text":"","title":"Crypto Acronyms"},{"location":"glossary/crypto-acronyms/#consensussybil-control","text":"PoW - Proof of Work PoS - Proof of Stake PoA - Proof of Authority DPoS - Delegated Proof of Stake LPoS - Liquid Proof of Stake BFT - Byzantine Fault Tolerance dBFT - Delegated Byzantine Fault Tolerance pBFT - Practical Byzantine Fault Tolerance iBFT - Istanbul Byzantine Fault Tolerance","title":"Consensus/Sybil-control"},{"location":"glossary/crypto-acronyms/#ethereum-related","text":"DeFi - Decentralized Finance DAPP - Decentralized Application ERC - Ethereum Request for Comments EIP - Ethereum Improvement Proposal DAO - Decentralized Autonomous Organization EVM - Ethereum Virtual Machine WASM - Web Assembly VDF - Verifiable Delay Function SC - Smart Contract NFT - Non-Fungible Token","title":"Ethereum-related"},{"location":"glossary/crypto-acronyms/#bitcoin-related","text":"BIP - Bitcoin Improvement Proposal SegWit - Segregated Witness SPV - Simple Payment Verification UTXO - Unspent Transaction Output LN - Lightning Network RSK - RootStock SC Platform MW - MimbleWimble RBF - Replace By Fee UAHF - User Activated Hard Fork UASF - User Activated Soft Fork","title":"Bitcoin-related"},{"location":"glossary/crypto-acronyms/#money-related","text":"SoV - Store of Value MoE - Medium of Exchange UoA - Unit of Account FIAT - Government-issued currency","title":"Money-related"},{"location":"glossary/crypto-acronyms/#trading","text":"ETF - Exchange Traded Fund TA - Technical Analysis FA - Fundamental Analysis DCA - Dollar Cost Averaging OTC - Over the Counter CEX - Centralized Exchange DEX - Decentralized Exchange PnD - Pump and Dump ICO - Initial Coin Offering STO - Security Token Offering SAFT - Simple Agreement for Future Tokens ROI - Return on Investment SATS - Satoshis ATH/L - All Time High ATL - All Time Low MCAP - Market Capilization BB - Bollinger Bands MACD - Moving Average Convergence Divergence RSI - Relative Strength Index SMA - Simply Moving Average EMA - Exponential Moving Average","title":"Trading"},{"location":"glossary/crypto-acronyms/#mining","text":"CPU - Central Processing Unit GPU - Graphics Processing Unit ASIC - Application-Specific Integrated Circuit FPGA - Field Programmable Gate Array HPS - Hashes Per Second","title":"Mining"},{"location":"glossary/crypto-acronyms/#memes","text":"HODL - A spelling error FOMO - Fear of Missing Out BTFD - Buy The Fucking Dip DYOR - Do Your Own Research FUD - Fear, Uncertainty and Doubt SFYL - Sorry For Your Loss","title":"Memes"},{"location":"glossary/crypto-acronyms/#us-regulatory-related","text":"SEC - Securities Exchange Commission FTC - Federal Trade Commision CFTC - Commodity Futures Trading Commission FDIC - Federal Deposit Insurance Corporation DOJ - Department of Justice FinCEN - Financial Crimes Enforcement Network FINRA - Financial Industry Regulatory Authority KYC - Know Your Customer AML - Anti-money Laundering","title":"U.S Regulatory-related"},{"location":"glossary/crypto-acronyms/#misc","text":"BP - Block Producer TXID - Transaction ID TPS - Transactions Per Second ZK - Zero Knowledge P2P - Peer to Peer ALT - Alternative Cryptocurrency HF - Hard Fork SF - Soft Fork WP - Whitepaper 2FA - Two Factor Authentication DDoS - Distributed Denial of Service IPFS - Interplanetary File System PKI - Public Key Infrastructure CT - Crypto Twitter NONCE - Number Only Once HW - Hardware Wallet MCD - Multi-collateral Dai CDP - Collateralized Debt Position EEA - Enterprise Ethereum Alliance HTLC - Hashed Timelock Contract VRF - Verfiable Random Function DAG - Directed Acyclic Graph","title":"Misc"},{"location":"glossary/crypto-acronyms/#security-and-privacy","text":"SNARKs - Succinct Non-Interactive ARguments of Knowledge STARKs - Scalable Transparent ARguments of Knowledge MPC - Multi-Party Computation","title":"Security and Privacy"},{"location":"glossary/crypto-acronyms/#resources","text":"A Glossary of Common Terms in the Ethereum / Crypto Space","title":"Resources"},{"location":"glossary/sideways-dictionary/2FA/","text":"2FA Two-Form Authentication (2FA) is like... a time-based code that only the bank manager knows and is used to open the bank vault. that scene in spy movies where only the real spy would know the secret phrase and response.","title":"2FA"},{"location":"glossary/sideways-dictionary/2FA/#2fa","text":"","title":"2FA"},{"location":"glossary/sideways-dictionary/2FA/#two-form-authentication-2fa-is-like","text":"a time-based code that only the bank manager knows and is used to open the bank vault. that scene in spy movies where only the real spy would know the secret phrase and response.","title":"Two-Form Authentication (2FA) is like..."},{"location":"glossary/sideways-dictionary/blockchain/","text":"Blockchain Blockchain is like... a poker game where everyone writes down every bet made. By comparing their records at the end of each round, the players can make sure no one is cheating.","title":"Blockchain"},{"location":"glossary/sideways-dictionary/blockchain/#blockchain","text":"","title":"Blockchain"},{"location":"glossary/sideways-dictionary/blockchain/#blockchain-is-like","text":"a poker game where everyone writes down every bet made. By comparing their records at the end of each round, the players can make sure no one is cheating.","title":"Blockchain is like..."},{"location":"glossary/sideways-dictionary/cold-storage/","text":"Cold storage Cold storage is like... when a bank puts their gold in a vault underground to make it impossible for a petty bankrobber to steal it. when a cashier takes the excess money from their cash register drawer gives it to their manager to deposit into the safe.","title":"Cold Storage"},{"location":"glossary/sideways-dictionary/cold-storage/#cold-storage","text":"","title":"Cold storage"},{"location":"glossary/sideways-dictionary/cold-storage/#cold-storage-is-like","text":"when a bank puts their gold in a vault underground to make it impossible for a petty bankrobber to steal it. when a cashier takes the excess money from their cash register drawer gives it to their manager to deposit into the safe.","title":"Cold storage is like..."},{"location":"glossary/sideways-dictionary/cryptojacking/","text":"Cryptojacking Cryptojacking is like... in the movie Office Space where a group alters the code of a bank's computer to steal pennies from every bank transaction plugging in an extension cord to your neighbor's house to earn/save money by stealing their energy","title":"Cryptojacking"},{"location":"glossary/sideways-dictionary/cryptojacking/#cryptojacking","text":"","title":"Cryptojacking"},{"location":"glossary/sideways-dictionary/cryptojacking/#cryptojacking-is-like","text":"in the movie Office Space where a group alters the code of a bank's computer to steal pennies from every bank transaction plugging in an extension cord to your neighbor's house to earn/save money by stealing their energy","title":"Cryptojacking is like..."},{"location":"glossary/sideways-dictionary/ddos/","text":"Distributed Denial of Service (DDoS) Attack A Distributed Denial of Service (DDoS) Attack is like... if a large flash mob tried enter a restaurant at the same time. The restaurant quickly is overwhelmed and no new customers are able to be served until the mob is dealt with or goes away.","title":"DDOS"},{"location":"glossary/sideways-dictionary/ddos/#distributed-denial-of-service-ddos-attack","text":"","title":"Distributed Denial of Service (DDoS) Attack"},{"location":"glossary/sideways-dictionary/ddos/#a-distributed-denial-of-service-ddos-attack-is-like","text":"if a large flash mob tried enter a restaurant at the same time. The restaurant quickly is overwhelmed and no new customers are able to be served until the mob is dealt with or goes away.","title":"A Distributed Denial of Service (DDoS) Attack is like..."},{"location":"glossary/sideways-dictionary/difficulty/","text":"Difficulty Difficulty is like... the odds you have to winning the the lottery a taskmaster who checks to see if every a block is shipped out on time.","title":"Difficulty"},{"location":"glossary/sideways-dictionary/difficulty/#difficulty","text":"","title":"Difficulty"},{"location":"glossary/sideways-dictionary/difficulty/#difficulty-is-like","text":"the odds you have to winning the the lottery a taskmaster who checks to see if every a block is shipped out on time.","title":"Difficulty is like..."},{"location":"glossary/sideways-dictionary/forks/","text":"Forks A fork is like... in a time-travel movie where an action taken by the main character splits the timeline and creates and alternate timeline.","title":"Forks"},{"location":"glossary/sideways-dictionary/forks/#forks","text":"","title":"Forks"},{"location":"glossary/sideways-dictionary/forks/#a-fork-is-like","text":"in a time-travel movie where an action taken by the main character splits the timeline and creates and alternate timeline.","title":"A fork is like..."},{"location":"glossary/sideways-dictionary/multi-sig/","text":"Multi-signature wallets A multi-signature wallet is like... a bank vault that requires each bank manager's password to open. a planning committee where every expense needs to be signed off on by each member of the committee. in a video game lobby where each player needs to approve of each action like readying up to start the game, kicking a teammate, etc. No one player alone can perform these actions.","title":"Multi-Sig"},{"location":"glossary/sideways-dictionary/multi-sig/#multi-signature-wallets","text":"","title":"Multi-signature wallets"},{"location":"glossary/sideways-dictionary/multi-sig/#a-multi-signature-wallet-is-like","text":"a bank vault that requires each bank manager's password to open. a planning committee where every expense needs to be signed off on by each member of the committee. in a video game lobby where each player needs to approve of each action like readying up to start the game, kicking a teammate, etc. No one player alone can perform these actions.","title":"A multi-signature wallet is like..."},{"location":"glossary/sideways-dictionary/smart-contract/","text":"Smart Contract A smart contract is like... a vending machine. You can trust that if you give it your money that it is programmed to accept your money and dispense the drink you selected.","title":"Smart Contract"},{"location":"glossary/sideways-dictionary/smart-contract/#smart-contract","text":"","title":"Smart Contract"},{"location":"glossary/sideways-dictionary/smart-contract/#a-smart-contract-is-like","text":"a vending machine. You can trust that if you give it your money that it is programmed to accept your money and dispense the drink you selected.","title":"A smart contract is like..."},{"location":"glossary/sideways-dictionary/uncle-blocks/","text":"Uncle Blocks Uncle Blocks are like... the smaller prizes that you receive if you don't win the big prize in a promotional giveaway.","title":"Uncle Blocks"},{"location":"glossary/sideways-dictionary/uncle-blocks/#uncle-blocks","text":"","title":"Uncle Blocks"},{"location":"glossary/sideways-dictionary/uncle-blocks/#uncle-blocks-are-like","text":"the smaller prizes that you receive if you don't win the big prize in a promotional giveaway.","title":"Uncle Blocks are like..."},{"location":"glossary/sideways-dictionary/what-is-the-sideways-dictionary/","text":"Sideways Dictionary Taking a page from The Sideways Dictionary , this sideways dictionary provides analogies instead of definitions for key terms and concepts of the Ethereum ecosystem. This section of EthHub is intended to be a resource for anyone who is still struggling with grasping a concept. Sometimes a definition doesn't quite click in your head. We hope this collection of analogies and explanations can be used as a shared resource for all members of the Ethereum community, newcomers and oldtimers alike. Resources Original Sideways Dictionary","title":"What is the sideways dictionary?"},{"location":"glossary/sideways-dictionary/what-is-the-sideways-dictionary/#sideways-dictionary","text":"Taking a page from The Sideways Dictionary , this sideways dictionary provides analogies instead of definitions for key terms and concepts of the Ethereum ecosystem. This section of EthHub is intended to be a resource for anyone who is still struggling with grasping a concept. Sometimes a definition doesn't quite click in your head. We hope this collection of analogies and explanations can be used as a shared resource for all members of the Ethereum community, newcomers and oldtimers alike.","title":"Sideways Dictionary"},{"location":"glossary/sideways-dictionary/what-is-the-sideways-dictionary/#resources","text":"Original Sideways Dictionary","title":"Resources"},{"location":"other/EF-COI-disclosures/","text":"Conflict of Interest (COI) Disclosures from Ethereum Foundation members The following disclosures were voluntarily provided by EF members in an AMA about Ethereum Leadership and Accountability shortly after the departure of Afri Schoedon from the Ethereum community. Vitalik Buterin Non-ethereum-ecosystem tokens: BCH, BTC, DOGE, ZEC; total value 10% the value of my ETH Non-ETH ethereum ecosystem tokens: KNC, MKR, OMG, REP, total value 10% the value of my ETH Significant corporate shareholdings: Clearmatics, Starkware [edit, forgot to put this in before] Revenue in the last 12 months other than ethereum foundation salary: a few advisor tokens (included in above) Non-financial interests: friends in the ecosystems represented by the above projects, as well as some non-token ethereum ecosystem orgs (eg. L4, Plasma Group, EthGlobal, EDCON) and non-token non-ethereum orgs (mainly professional cryptography and economics circles) Source Justin Drake 99% of token value in ETH (was given minor airdrops for free) Paid by the EF in ETH Leverage long ETH using ETH as collateral (MakerDAO) Close to zero fiat Not associated with any blockchain project other than Ethereum Zero speaking fees, zero grants Source Martin Swende 95-99% of crypto holdings in ETH, rest is ZEC, BTC, SIA + some eth-tokens Salary/income last 12 months: all via EF (in euro) \"I previously also sometimes did consultancy audits, haven't done any in a long time\" Advisor in zero projects, zero speaking fees, zero grants received, etc. Source","title":"Ethereum Foundation COI Disclosures"},{"location":"other/EF-COI-disclosures/#conflict-of-interest-coi-disclosures-from-ethereum-foundation-members","text":"The following disclosures were voluntarily provided by EF members in an AMA about Ethereum Leadership and Accountability shortly after the departure of Afri Schoedon from the Ethereum community.","title":"Conflict of Interest (COI) Disclosures from Ethereum Foundation members"},{"location":"other/EF-COI-disclosures/#vitalik-buterin","text":"Non-ethereum-ecosystem tokens: BCH, BTC, DOGE, ZEC; total value 10% the value of my ETH Non-ETH ethereum ecosystem tokens: KNC, MKR, OMG, REP, total value 10% the value of my ETH Significant corporate shareholdings: Clearmatics, Starkware [edit, forgot to put this in before] Revenue in the last 12 months other than ethereum foundation salary: a few advisor tokens (included in above) Non-financial interests: friends in the ecosystems represented by the above projects, as well as some non-token ethereum ecosystem orgs (eg. L4, Plasma Group, EthGlobal, EDCON) and non-token non-ethereum orgs (mainly professional cryptography and economics circles) Source","title":"Vitalik Buterin"},{"location":"other/EF-COI-disclosures/#justin-drake","text":"99% of token value in ETH (was given minor airdrops for free) Paid by the EF in ETH Leverage long ETH using ETH as collateral (MakerDAO) Close to zero fiat Not associated with any blockchain project other than Ethereum Zero speaking fees, zero grants Source","title":"Justin Drake"},{"location":"other/EF-COI-disclosures/#martin-swende","text":"95-99% of crypto holdings in ETH, rest is ZEC, BTC, SIA + some eth-tokens Salary/income last 12 months: all via EF (in euro) \"I previously also sometimes did consultancy audits, haven't done any in a long time\" Advisor in zero projects, zero speaking fees, zero grants received, etc. Source","title":"Martin Swende"},{"location":"other/Gitcoin-torch/","text":"Gitcoin Torch Summary The Gitcoin Torch is a community effort to spur funding of Ethereum projects using the Gitcoin Grants platform. There is a matching pool pledged to match any donations to funds. Any funds donated will be matched from this pool. NOTE: Funds donated must be between 10-100 Dai. Matchers Total: 4,000 Dai Eric Conner - 1,000 Dai Megan Knab - 1,000 Dai Anon1 - 500 Dai David Bleznak - 1,000 Dai Anon2 - 500 Dai Donators Total: 200 Dai @crn_maximizer - 50 Dai to Connext and 50 Dai to ZoKrates @arjun_bhuptani - 50 Dai to Gitcoin and 50 Dai to EthHub Spreadsheet Summary Keep track of the activity on this spreadsheet","title":"Gitcoin Torch"},{"location":"other/Gitcoin-torch/#gitcoin-torch","text":"","title":"Gitcoin Torch"},{"location":"other/Gitcoin-torch/#summary","text":"The Gitcoin Torch is a community effort to spur funding of Ethereum projects using the Gitcoin Grants platform. There is a matching pool pledged to match any donations to funds. Any funds donated will be matched from this pool. NOTE: Funds donated must be between 10-100 Dai.","title":"Summary"},{"location":"other/Gitcoin-torch/#matchers","text":"Total: 4,000 Dai Eric Conner - 1,000 Dai Megan Knab - 1,000 Dai Anon1 - 500 Dai David Bleznak - 1,000 Dai Anon2 - 500 Dai","title":"Matchers"},{"location":"other/Gitcoin-torch/#donators","text":"Total: 200 Dai @crn_maximizer - 50 Dai to Connext and 50 Dai to ZoKrates @arjun_bhuptani - 50 Dai to Gitcoin and 50 Dai to EthHub","title":"Donators"},{"location":"other/Gitcoin-torch/#spreadsheet-summary","text":"Keep track of the activity on this spreadsheet","title":"Spreadsheet Summary"},{"location":"other/ethereum-2.0-ama/","text":"Ethereum 2.0 Reddit AMA Questions and Answers Q: When, as in period of time, do you think Ethereum will be able to solve scalability issues? A: In phase 1 (about 2020 by my estimate) we will have shard data. Those shards, even without an EVM, can be used as the data availability layer for TrueBit (and other alternative execution engines). Phase 2 (about 2021) is when we will have scalable L1 execution. [Justin Drake] Follow up Q: ELI5 execution engines Follow up A: An execution engine is a way to compute state assuming consensus on data. The execution engine for the EVM is \"naive re-execution\". There are more fancy execution engines such as TrueBit and SNARK/STARK-based validity proofs. [Justin Drake] Q: Are economists being consulted to help decide the issuance rate of a full POS system? Stated more broadly, who is helping/advising the ETH 2.0 team on the effects certain issuance decisions will have on the network and community (both in the short and long term)? A: Personally at this point the feedback I'm most interested in is actually feedback from potential stakers. The main question basically being, are there any other tweaks we can make to the economics that, given a fixed level of reward, will (i) encourage more people to validate, and (ii) encourage many small solo validators or smaller pools, as opposed to a few large pools. [Vitalik Buterin] Q: Considering that Yoichi is not working anymore in the Foundation, what are your plans on formal verification of ETH 2.0 specs? A: I'd say that formal verification of the spec will make sense when the spec is more mature and stable, maybe mid 2019. Anyone interested in doing formal verification of the ETH 2.0 specs in a few months, please send a grant proposal. [Justin Drake] Q: What is the best response to a developer who is hesitant about building on ethereum today, given that it will be \"replaced\" by ETH 2.0 over the next few years? A: I expect that once the state and execution model for Serenity solidifies (see https://ethresear.ch/t/a-minimal-state-execution-proposal/4445 for one minimal proposal) we'll start working with the developer community on modifications to high-level languages (Solidity, Vyper, etc) and best practices. Hopefully at that point it will become clearer how to build applications in such a way that they could be redeployed as-is on the 2.0 chain. At least that's my hope. [Vitalik Buterin] A2: Building on Ethereum 1.0 today is great for learning and prototyping. It's also great for assembling a culturally-aligned team consistent with the philosophy of the Ethereum community (which may be different than the philosophy of the Bitcoin, Ripple, Bitcoin Cash, EOS, Tether, etc. communities). [Justin Drake] Q: Can we run multiple validator clients on a single machine assuming we've got multiple 32 Eth deposits? A: Yep! There's nothing preventing you from using one machine to run multiple validators. The only hard limit you'll face is that the number of shards you are assigned to validate increases linearly with the number of validator slots you have, so if you have thousands of ETH a laptop will not suffice and you'll need something more powerful. [Vitalik Buterin] A2: Short answer: Yes. Long answer: You will need to register a validator for every 32 ETH. In phase 0 (just the beacon chain, no shards) you can likely handle thousands of validators on a single machine. After phase 1 the number of validators that can be operated on a single machine depends on how resourceful your machine is. A mainstream laptop should comfortably handle one validator, and likely handle 2-10 validators at max capacity. The computational resources scales linearly with the number of validators until you reach ~1,000 validators. At that point there are scalability advantages in being a super-node, i.e. a full node for every shard. [Justin Drake] Follow up Q: How much importance are the devs placing on being able to run setups at home wrt keeping Ethereum decentralised and being able to move ETH in and out of staking pools? Follow up A: It's definitely a goal I care about. The alternative to staking at home is staking on AWS or staking through a pool, and both are risks for decentralization. Concrete ways we try to be friendly to staking at home: Relatively forgiving penalties for being offline, so you earn a net profit as long as you're online more than ~50-67% of the time Keeping the cost of validating the beacon chain low The anti-correlation penalty scheme, which more heavily penalizes validators that misbehave at the same time as many other validators (which is more likely if you're on the same pool or VPS or whatever). [Vitalik Buterin] Q: How can I help / get involved? I fell in love with Ethereum not too long ago. I\u2019ve been reading Zcash\u2019s BLS12-381 Elliptic Curves and for the past few days these are all thats been on my mind. I love this project now and just found ethresear.ch. I really wanna help in any way possible! Thanks again for all your hard work. I can\u2019t stop reading these posts. A: For researchers a good way to contribute and gain visibility is to post quality content on ethresear.ch. If you are a developer consider joining one of the numerous ETH2.0 implementation teams. [Justin Drake] A2: Hi! The best way to get involved is to find something that captures your interest and to dig in. Because Ethereum is a radically open platform, the research and development is also generally very open and very accessible. Keep reading. Follow your interests down all the little paths and begin to build a mental model of the ecosystem. https://ethresear.ch/ is a great place to follow and begin to contribute to research discussions. https://gitter.im/ethereum/sharding is where a lot of the day to day conversation about Serenity is happening (developers chatting from various projects) https://github.com/ethereum/eth2.0-specs Read the spec! but not only read it, be an active reader. If you find an error, typo, bug, etc, submit a PR. Also check out the issues and PRs in the spec repo. We are constantly discussing changes, fixes, updates and anyone can contribute. If you are a dev, open up one of the eth2.0 client projects and pick a \"good first issue\". These allow you to touch the codebase, contribute a bit, get the lay of the land, and provide the foundation to tackle bigger issues from there. ^ Those are Serenity specific suggestions, but beyond that, just find projects you are interested in and begin contributing. There is so much to do and project leads are always excited to have helping hands. This stuff doesn't build itself :) [Danny Ryan] A3: If you're interested in Cryptography especially, you can also check out another BLS - Boneh\u2013Lynn\u2013Shacham signature spec for Serenity and help to review it: https://github.com/ethereum/eth2.0-specs/blob/master/specs/bls_signature.md :) For research, as Justin and Danny said, ethresear.ch is the sanctuary. And first, you can take a look the various topics on Ethereum Sharding Research Compendium to see which area you're most interested in. For implementation, there are multiple topics: Consensus layer - implement the spec! P2P layer design and implementation - see https://github.com/ethresearch/p2p [Hsiao-Wei Wang] Q: From my limited understanding of Eth 2.0 specs, I gather that shards will be mostly independent, with cross-shard communication being slow and requiring multiple steps. As a consequence, smart contracts will only be able to interact lively with assets from within their deployed shard, and will have to go through slow cross-shard communication to interact with assets outside. Given this topology, are we not aiming to improve scalability at the cost of sacrificing user experience (slow response of smart contracts in non-obvious ways)? For instance if I want to play cryptokitties, I will need to make sure to interact with the contract that is deployed on the shard where my eth address resides, and not with any of the other contracts that reside on other shards. Then, if I want to interact with the kitties of someone else who resides on a different shard, my experience will be much slower and cumbersome than if that person would reside in my shard (or at least this is how I understand the system will work, please correct me if I am wrong). Given that the end goal is to scale to a very large number of shards, then the likelihood to have to go cross-shard increases exponentially with time, and thus the user experience gets progressively worse and worse. A: Cross-shard communication will definitely be slow at base layer, however there are higher-level mechanisms that can be used to implement fast cross-shard communication on top of a base layer that allows any cross-shard communication at all even if slow. See https://ethresear.ch/t/a-layer-2-computing-model-using-optimistic-state-roots/4481 for an example of how this could be done. In general, I expect a lot of the long-run innovation in improving the smart contract development experience to happen at higher levels in this way; I write about why this is a good idea at length here: https://vitalik.ca/general/2018/08/26/layer_1.html [Vitalik Buterin] Q: What happens to all the contracts currently running? A: It is somewhat speculative at this point. My best guess is that Ethereum 1.0 contracts will stay running as-is for a long time (say, 10+ years) without any migration to Ethereum 2.0. This can be made sustainable by doing two things: Lower the inflation (e.g. reduce it by 20x, bringing the PoW security to a blockchain such as Ethereum Classic). Completely removing inflation\u2014relying on transaction fees only\u2014would also be possible (see below for security argument). Use Ethereum 2.0 to regularly finalise Ethereum 1.0, counter-balancing the reduced security and preventing long-range 51% attacks. This requires Ethereum 1.0 nodes to be beacon chain light clients, which should take years to happen. If the community gets tired of Ethereum 1.0 a bomb mechanism (e.g. difficulty bomb, issuance bomb, gas bomb, etc.) can gracefully kill it. Another possibility is for Ethereum 1.0 to become a contract on Ethereum 2.0. I don't see this as a practical solution, but I'm open to being convinced otherwise :) [Justin Drake] A follow up: I'll add that if any specific user wants to migrate their application to the 2.0 chain, then they should be able to just take their existing high-level code (Solidity or Vyper), make relatively few changes and redeploy. The main difference between the eth1 and eth2 systems that users will need to worry about is likely to be rent (or equivalents like gas-payment-extended bounded TTLs). [Vitalik Buterin] Q: Is there a worry that shards will become \u201cgentrified\u201d until full shard interoperability? Basically, will one shard capture all the defi apps because they can't directly communicate with each other on separate shards? A: I would say if that happens, that will create a large incentive for someone to create a defi dapp that can interact with the other defi dapps through asynchronous cross-shard transactions and launch it on a cheaper shard. [Vitalik Buterin] A2: At the start in times of low usage, the economic load-balancing might result in over and under utilized shards. Overtime as usage increases, I expect the economic benefits of deploying and interacting on particular shards will become more tangible and result in a more economically rational distribution across shards. Observing the emergent behavior is going to be super fascinating :) [Danny Ryan] Q: Can we run the same validator on multiple machines - in order to avoid penalties if one machine was compromised ? If yes - what happens when we run a validator on 3 machines, one goes temporary offline, one is compromised, one is OK? A: For small amounts of ETH I'd recommend just running on one machine; unless many other validators get penalized at the same time as you, the penalties are not too large. If you do want to decentralize your validator, then we have recently made progress toward validation being more multi-party-computation friendly, which would allow you to run a validator as a 2-of-3. In that case, as long as two of the three sub-nodes are functioning correctly you'll be fine. [Vitalik Buterin] A2: Yes! Ethereum 2.0 is friendly to n-of-m schemes thanks to BLS signatures. For example, with a 2-of-3 scheme you have can three computers, each with a share of the validator private key, such that two need to be online at any given time. This improves security as well, because an attacker now needs to compromise two of the BLS key shares. [Justin Drake] Q: Is there tech from any competitors such as Dfinity (or any others) that is worth adopting into Ethereum 2.0, or is the work all other dapp/smart contract platforms doing not relevant/good enough for ETH 2.0? A: Part of the job of the research team is to absorb good ideas from research papers and other blockchain projects. I keep a keen eye on technically interesting projects such as Dfinity, Coda, Zcash, etc. Competitors definitely also have good ideas, and learning from each other is part of the game :) [Justin Drake] Q: Do we need to run a full node to also earn from network fees or would the validator client handle this? A: Depends what you mean by \"full node\". The design of the sharding system is such that no one needs to run a node that verifies all of the data of all of the shards. A validator client validates the beacon chain and the specific shards that you get assigned to validate, and that is sufficient to earn network fees. [Vitalik Buterin] A2: The validator client should abstract the necessary tasks to get revenue from the different revenue streams. (This includes being a full node for the beacon chain and one shard at any given time, but that's a technicality you don't have to worry about.) [Justin Drake] Q: Very interested to hear about the efforts currently underway at the EF and strategic partners/OEMs to design and manufacture the VDF hardware. It's also the thing that scares me the most about the proposed design;i can see how they would really increase the security of the random sample selection process in addition to RANDAO but manufacturing hw is a costly, difficult endeavor often subject to unforeseen issues and delays. On that note is an economic incentive structure for running a VDF node being considered? A: Very interested to hear about the efforts currently underway at the EF and strategic partners/OEMs to design and manufacture the VDF hardware. We're working our way with various partners, including Synopsys, AWS, TSMC, GUC, etc. VDF announcements to come in February :) manufacturing hw is a costly, difficult endeavor often subject to unforeseen issues and delays. Right. The good news is that Ethereum 2.0 can launch just fine without VDFs, so we're not betting Ethereum 2.0 on the success of VDFs. The current plan is to have VDF hardware ready in 2020, but 2021 would also be acceptable. From a financial perspective, we may share the total costs (estimated at $15m) with Filecoin and other projects interested in VDFs. We are already sharing costs with Filecoin on viability studies. On that note is an economic incentive structure for running a VDF node being considered? Short answer: yes, of course :) Long answer: the ethresear.ch post provides a bit of clarity on that. highly specialized hw always connected providing a crucial function to the network it would be a prime target for potential adversaries to disrupt or compromise Right. The good news is that we only need one VDF evaluator to be online for normal operation, and even if everyone goes down it's not a huge deal. The main negative consequence is that dApps relying on unbiasable randomness will have to wait longer than expected for the random numbers to arrive. [Justin Drake] Q: zk-STARKs are powerful and I have been reading Eli\u2019s and the others paper on it. Are recursive zk-STARKs ever doable? I know Coda is planning on using Recursive zk-SNARKs to shrink chains but the lack of transparency is worrying. A: I don't see what fundamentally prevents them from happening. Recursive [any zero knowledge proof schemme] just means using the ZKP mechanism to make a ZKP of the ZKP's own verification procedure. The main challenge in practice is just that these verification procedures themselves have a high cost (eg. there's 50-500 kB worth of hashes in a STARK to verify), and this cost multiplied by the ZKP's overhead is quite a big number. ZK SNARK verification is in contrast much more \"concise\". [Vitalik Buterin] A2: Are recursive zk-STARKs ever doable? In theory yes, but as I understand recursive zk-STARKs won't make sense from a performance standpoint for most applications, at least in the medium term. [Justin Drake] Q: What\u2019s the final scalability limit of Ethereum post Serenity? Gas limits per block? Blocks per second? A: The current design has a fixed number of shards, at most one block per 6-second slot, and fixed block sizes. This means that the data bandwidth is capped. The gas limit on the other hand will likely be floating, just like Ethereum 1.0. [Justin Drake] A follow up: Though in the current phase 1 spec that's sitting around in draft mode the block size is so far fixed to 16 kB, as keeping it fixed makes the code for proofs of custody, data availability proofs, etc much simpler. If we want to bump up capacity later increasing the shard count may well be the simpler way to do it. [Vitalik Buterin] Q: Why should anyone move to the Beacon Chain? How exactly do you envision the move to happen? A: Why should anyone move to the beacon chain. Specifically, only validator balances exist in the Beacon Chain. User balances and state exist in the shard chains. Validators will move to the beacon chain to seek profit by providing security and resources to network. Note there is a new proposal to have the beacon chain finalize the PoW chain during the transition period so the validators would be able to provide security both to the new shards and the existing chain. Users will move to the shard chains to participate in the new scalable, sharded landscape. We envision economic activity to begin to move over as the system stabilizes and begins to show clear economic benefits to the users. It is important to note that a user could choose to not move until the eth1.0 state is rolled into a shard. How exactly do you envision the move to happen? At first, this will just be a single directional deposit for validators only to begin validation. Once the state execution layer is in the new 1024 shards, users will be able to transfer eth directly to the shards from the PoW chain. In the long term, the plan is to roll the PoW state into one of the shards. The current most favorable strategy from our perspective is to fork the PoW state root into a contract along with an EVM interpreter. Users could then execute txs on the existing eth1.0 state by call the contract along with the merkle witnesses of the state they need to access. This option is nice because it allows us to cleanly deprecate eth1.0 support in the long term. [Danny Ryan] A2: Moving to the beacon chain is done by sending ETH to a so-called \"deposit contract\" on Ethereum 1.0. People would send ETH to the beacon chain to become an Ethereum 2.0 validator and gain financial rewards. [Justin Drake] Q: How much funds does Ethereum foundation have and are these enough for finishing Eth 2.0? A: The EF has tens of millions of dollars in fiat, and a bunch of ETH. More than enough to finish ETH 2.0 :) [Justin Drake] Q: How is the status of a possibly fixed eth supply at some point in the future? Do you think it's likely? A: I don't know about fixed ETH supply, but we may get to a point of decreasing ETH supply. Indeed, we are looking into transaction fee schemes that burn ETH, and burnt ETH may outweigh minted ETH. [Justin Drake] Q: Have you looked into hyraxZK. They are zk-SNARKs that do not require a trusted setup. Any thoughts on them being used in the future as the sizes are still very small. The only thing is they wouldnt be Quantum-Resistant but the proof size won\u2019t be similar to a zk-STARK. I wonder what they can be used for offchain as well, especially in networking by producing a zk proof of incoming packets that acts as Natural DDOS Protection. Just some thoughts. A: Have not looked into Hyrax specifically, but I am totally not surprised that things like it exist. I'm definitely very happy with the progress the general-purpose ZKP space has accomplished in the last few years; the very concept of general-purpose ZKP is pretty godlike compared to what I imagined was possible with cryptography as a child. Our general instinct is to find ways to make it possible to get the benefits of many different ZKP schemes with different tradeoffs in ethereum. The simplest way to do this would be to encourage the development of such tech as application-layer or network-layer addons so that it we do not need an agreement at consensus layer about a single ZKP scheme that everyone uses. [Vitalik Buterin] Q: V said that there are no fundamental problems left to solve. Is this true for only phase 0? If so, how confident are you about the other phases? A: Personally I am confident in all of the current fundamental technologies for all the phases outlined so far (Casper FFG and CBC, sharding, erasure coded data availability proofs, proofs of custody, receipt-based async transactions, layer 2 for acceleration, abstraction, rent, \"stateless client\" verification). There is definitely still a lot of room around the edges for optimization though. [Vitalik Buterin] Q: Why was Hybrid Casper ditched when it looks like the Beacon Chain kind of has nothing to do with the PoW chain? or Why not re-instate Hybrid Casper considering its testing is/was finalized? A: Honestly hybrid Casper is a bit of a dead end. Actually implementing/testing it across all the clients would require setting up a lot of infrastructure that we would then need to throw away. The design was highly inefficient because of its \"implemented-in-EVM\" nature, and it turned out that we could not really benefit from the ease-of-implementability of being done in EVM because we would need to write a lot of special-purpose code to make verification of signatures parallelizable. So we chose the route that would be somewhat more painful in the short term, but significantly lower headache to actually get to a stable sharded system overall. [Vitalik Buterin] A2: I wrote up some notes on the deprecation of EIP 1011 here https://notes.ethereum.org/s/rJDrKoBOQ [Danny Ryan] Q: 1. Since it is a one way transfer to the beacon chain, my understanding is that there will be two tokens: ETH1.0 and ETH2.0. Right? Will The beacon chain allow tokens to be send. I.e. will exchanges be able to list the token before phase 2? My feeling is that from a risk/reward perspective, stakers will expect returns more in the area of emerging market debt (+20%) esp. in the beginning. But all discussion I saw was ~2%. Any comments on this? Gutfeeling: how much \"unsolved computer science problems\" for phase 1, 2 and 3 roughly? I understood for phase zero it has arrived at 0. Will we consider some kind of tax baked into the system to ensure sustainability of core developments and infrastructure? A: Will The beacon chain allow tokens to be send. I.e. will exchanges be able to list the token before phase 2? ETH in the beacon chain would not be transferable (anywhere!) until phase 2. That will make exchanges harder, although we may see a futures' market. My guess is that we will see 1 ETH ~ 1 BETH at pretty much all times :) [Justin Drake] My feeling is that from a risk/reward perspective, stakers will expect returns more in the area of emerging market debt (+20%) esp. in the beginning. But all discussion I saw was ~2%. Any comments on this? The reward/penalty constants are certainly not yet finalized and could use more community debate and input. That said, the rate does scale depending on the number of validators participating. If the fair market rate is really 20%, then a lower number of validators will show up. If the fair rate is 2%, then a ton of validators will show up. The economics of staking will find the natural equilibrium. That said the main risk here is if we set the target rate too low and the equilibrium lands at a low participation rate (and thus low security of the network). Although ~2% (@ 10M eth validating) is not set in stone, the idea for a low rate is that a huge amount of ETH is already being held as a speculative asset. Any marginal rate of return on top of this already intended long-term hodling is a gain for the hodler. [Danny Ryan] Q: How would you (and or service providers) ensure the eth on the Beacon Chain is the same as that on the PoW chain and vice versa? A: Arbitrage is always possible in one direction by buying 1 BETH for 1 ETH. A key design goal of Ethereum 2.0 is full fungibility for ETH tokens between the Ethereum 1.0 chain, the beacon chain, and the shards. Two-way transfers between the beacon chain and the shards, as well as between shards, should come in phase 2. [Justin Drake] Follow up point: If you wait until phase 2 for two-way flow, you privilege the very few stakers able and willing to wait an undetermined number of years for access to their money. This will be great for those few (probably north of 25% interest rates!) but not very great for security. Follow up A: y ou privilege the very few stakers able and willing to wait an undetermined number of years for access to their money The ultimate loyalty test :) probably north of 25% interest rates!) but not very great for security. We do have a minimum amount at stake to launch phase 0, around 214 * 32 ETH = 524,288 ETH. So we're effectively capping the interest rate (will be less than 25%) and setting a minimum security level. [Justin Drake] Q: For how long is the 32eth locked up when running a validator client? What happens if the machine I'm using gets destroyed or stolen during the lock up period? Can you switch machines? A: For how long is the 32eth locked up when running a validator client? At least as long as you are a validator. Withdrawal times should be a few days/weeks/months depending on how many other validators are trying to withdraw. What happens if the machine I'm using gets destroyed or stolen during the lock up period? Can you switch machines? You can switch machines. You need a copy of your private keys in case your machine gets destroyed or stolen. Another thing is the withdrawal key used for withdrawals only. Keep that one in cold storage ideally. [Justin Drake] Q: Contributing to Ethereum 2.0? Are there any projects which are some sort of \"under water\", like only few people working on it. A: I feel at this point there are enough implementation teams, at least compared to some of the other issues that are underaddressed. Off the top of my head: Solidity being compile-able to E-WASM Vyper being compile-able to E-WASM Thinking about research problems related to phase 2, particularly around account abstraction, asynchronous contract programming models, etc Privacy, eg. see https://ethereum-magicians.org/t/meta-we-should-value-privacy-more/2475 Improving the state of decentralized messaging and file storage [Vitalik Buterin] Follow up A: A few more things good to work on: liibp2p implementations in various languages Doing security reviews of the spec prototyping account and state execution in eWASM a lot of work in cross client testing coming up in the next couple of months [Danny Ryan] Q: We have experienced consecutive delays with Constantinople due to bugs found late in the process on a comparatively low risk / simple upgrade. What work is being done to mitigate this on Phase 0 and 1 given how much more complex these implementations will be? (I.e. What testing, third party audits, other considerations are being taken to ensure seamless implementation/integration? A: As the phase 0 spec is moving into a more stable place, we are beginning to look into explicitly bringing in third party audits, academics, and formal analysis. In addition to this, we are currently laying down the foundations of cross client testing and fuzzing akin to eth1.0. You're correct in that the consensus/system layer of eth2.0 is much more complex than the single PoW chain so we are constantly trying to reduce complexity and simplify. This is a major engineering effort that will require many parties other than our research team to plan, build, test, execute, and maintain. I think it is a major strength that so many independent teams with a diverse set of expertise have stepped up to contribute. Note, one of the design goals in the spec readme -- \"to minimize complexity, even at the cost of some losses in efficiency\" We're excited to see new efforts like the \"Ethereum Cat Herders\" and scheduled release cycles emerging in 1.0 and plan to incorporate any best practices and efforts into the 2.0 process. DePM (decentralized project management) is hard, but we continue to learn and continue to get better. [Danny Ryan] Q: How difficult will it be for 1.0 contracts to work on Serenity? Should developers expect to rewrite their contracts to account for state rent and cross-shard communication? A: Solidity can already compile to WASM and I believe it is in Vyper's roadmap to do so as well. These naive compilations might be inefficient (e.g. keeping 256 bit types in the 64bit wasm machine) so some amount of rewrite or utilization of optimizers might be called for. Beyond that, there are some unknowns that might change the approach to certain contract programming modesl. For example, storage fees might call for a new ERC20 contract design in which user balances are stored in separate child contracts so that users become responsible for managing their own storage fees related to their coins. [Danny Ryan] Q: What is the latest view on how the \"upgrade\" to Ethereum 2.0 will happen? Can you take us through the different phases/hardforks that will in the end enable the full PoS/sharded/WASM blockchain, and what each will enable? A: Eth2.0 is broadly divided into three phases -- Phase 0, 1, and 2. Phase 0 - The Beacon Chain This phase is the launch of the core system level functionality of the new PoS chain (the beacon chain). Validators can submit deposits, join the validator set, and build/finalize the core chain. At this point the chain will have Casper finality, an RNG, shuffling into the various validator roles, and simulate crosslinking in the (currently) non-existent shard chains. Phase 1 - Shard Chains (data) This phase is the launch of the shard chains, but only as a blockchain of data. (Execution and state comes in phase 2). At this point, validators will additionally build these data chains and finalize the each shard back into the beacon chain via \"crosslinks\" and attest the availability of the data. These crosslinks were already being created in Phase 0, but had a stub for the shard hash being finalized. In this phase, that hash becomes \"unstubbed\". Shard data chains begin to have some utility for applications that need a high availability data store. Phase 2 - Shard Chains (state and execution) This phase is the launch of state and execution of state (eWASM) on the shard chains. This is when users and applications will begin to migrate to Serenity and use it to it's full potential. Cross shard txs will be available at this point, and users can begin developing any number of \"layer 2\" execution engines on top. The above (especially phase 2) might be divided into sub-forks, and there will be a fork during/after phase 2 to bring in the eth1.0 state/evm into a contract. [Danny Ryan] Q: I'm quoting James' article: \"This means there will be little reason to migrate smart contract code or users until Phase 4 is released, potentially in the mid-2020s\". Does this mean, ETH2.0 wont be usable before 2025? \"ETH2.0 designers do not know what the cross-shard communication system will look like.\" If you're so unsure about the features of ETH2.0, why is it being developed at all? What will be the advantages in daily use compared to EHT1.X? Why should anyone wait till \"the mid-2020s\" to use ETH2.0? A: 2025 sounds... unlikely! I publicly made the prediction (since July 2018) that phases 0, 1, 2 will come in 2019, 2020, 2021 respectively. Scaling from shards will come in phase 1 and phase 2. On the topic of timelines, for phase 0 specifically, ideally the spec should be close to final in Q1, cross-client testnets in Q2, security audits in Q3, mainnet launch in Q4. As a rule of thumb, launching in December is hard because of the holiday season. So November 2019 and January 2020 would be my two best guesses for phase 0. [Justin Drake] A2: I answered a related question here https://www.reddit.com/r/ethereum/comments/ajc9ip/ama_we_are_the_eth_20_research_team/eeufhqb [Danny Ryan] Q: https://hackernoon.com/what-to-expect-when-eths-expecting-80cb4951afcd From the article above, this is what I understand as the timeline of Ethereum 2.0: Phase 0 will be available in year 2020 Phase 1 will be available in 2022 Phase 2 will be available in 2023/24 Given the above timeline, is it fair to say that DAPP's have to wait at least 4 years before they can run their smart contracts on top of Ethereum 2.0? A: Hi! That article is written by an independent engineer that has been following development so it is not necessarily our 1-to-1 opinion. That said, I'm only seeing the following in the article -- \"Which is to say, while ETH2.0 may launch this year, don\u2019t expect ETH2.0 to support asset transfer or smart contracts until at least 2020.\" I agree that assets and smart contracts won't be available in eth2.0 in 2019. At the latest, I expect phase 2 to launch in 2021, but we are building a complex system and can't say for sure what unexpected challenges might arise between now and then. Waiting until 2023/24 is entirely out of the question for phase 2 imo. [Danny Ryan] Q: With eWASM will we be able to write contracts in Rust and/or any language that compiles to WASM in addition to Solidity? Where can one find out more about that and/or potentially help out? Thanks :) A: Yes you will be able to write contracts in any language that compiles to WASM :) I expect specific toolkits/frameworks to spring up in the languages people are particularly interested in (e.g. Rust, go, typescript, etc) to aid in writing contracts in these languages. https://github.com/ewasm/design is a great place to get started. The eWASM team has compiled a ton of info here to understand the project from a high level. https://gitter.im/ewasm/Lobby The eWASM team and broader community congregate in this gitter room and I'm sure would be willing to provide more guidance and answer any questions you have. [Danny Ryan] Q: Hi guys, Would you like to implement an optional decentralized identity layer in the future? like an option to use DID's or something. so the user can use zero knowledge proofs for Dapps that requires some proof of credentials of the user. Greetz A: Decentralized identity systems are definitely very interesting, but imo out-of-scope for blockchain base layers. The good news is that it's a Turing-complete platform, so anyone can build one on top of ethereum (1.0 or 2.0), and yes that are teams working on different approaches to it already. [Vitalik Buterin] Q: What is the one thing on eth 2.0 dev that keeps you up at night? A: In my mind the Ethereum 2.0 abstract design is a remarkably elegant/slick/simple design. I worry that we botch the spec with poor taste in some of the implementation details, or bugs that we miss. [Justin Drake] Q: How will the Eth1.0/PoW chain eventually be migrated over? A: See the bottom of this post https://www.reddit.com/r/ethereum/comments/ajc9ip/ama_we_are_the_eth_20_research_team/eeucd4f tldr, fork into a stateless contract on a shard [Danny Ryan] A2: See https://www.reddit.com/r/ethereum/comments/ajc9ip/ama_we_are_the_eth_20_research_team/eeub9sp/ [Justin Drake] Q: What are the current incentives for a person to run their own beacon node? A: It is a similar set of incentives as why you would run an eth1.0 node -- mining, run applications (block explorer, wallet services, dapp portal, etc), hobbyists wanting direct connection to the network, etc. If you are a validator, you will receive rewards for operating a node and signing consensus messages. If you run some sort of application, it can be beneficial to run a beacon chain to directly sync the shards you need. You also might serve light clients and applications as a business. I fully expect some some entities to experiment with this model. If you are a hobbyist, you might just like running the protocol directly for self-sovereignty :) [Danny Ryan] A2: Financial rewards through ETH inflation. I think Eric Conner has a spreadsheet somewhere. See https://twitter.com/econoar/status/1070713152864583682 for example here\u2014numbers presented here likely on the low side. [Justin Drake] Q: How do the researchers and developers feel about the complexity of ETH 2.0? A: We're definitely trying hard to bring the complexity down! Examples of complexity decreases that we've made in the last ~3 months include: Switching FFG from the \"per-block finalization\" model to a simpler epoch-based model Moving shard committee calculation outside the state Replacing the RANDAO hash onion construction with a simpler BLS construction (and same with the hash onion for proofs of custody) Storing validator state change slots in the validator record, making each validator's state transition process much more understandable Making shard blocks fixed size rather than variable size (which allows removing a lot of boilerplate for handling transitions) That said we recognize that there's still a way to go, and many features of eth2 don't feel neat and clean the way eg. Nakamoto PoW does. I personally hope a medium-term switch to Casper CBC (see https://vitalik.ca/general/2018/12/05/cbc_casper.html ) can mitigate some of that. [Vitalik Buterin] Q: Is there any work being done on reducing the size of the blockchain as it grows? A: You mean the current chain or the 2.0 chain? Since this AMA is primarily about on the 2.0 chain I'll focus on that. The beacon chain state size is bounded, and there are no objects that hang around forever; even validator records disappear once either their balance drops too low or the validators exit voluntarily and then the withdrawal and exit waiting periods pass. On the shard chains, we're looking at ongoing storage maintenance fees for every byte of storage, \"hibernating\" accounts that do not pay up (at which point their users are responsible for storing and maintaining the data needed to revive those accounts if they need them). [Vitalik Buterin] A2: If you are talking about the Ethereum 1.0 chain size there are a number of workgroups in place and some of them deal with decreasing the chain state or slowing down chain state growth. See: https://ethereum-magicians.org/t/meta-ring-to-discuss-and-coordinate-all-ethereum-1x-efforts/2048 https://ethereum-magicians.org/t/ethereum-1-dot-x-a-half-baked-roadmap-for-mainnet-improvements/1995 https://ethereum-magicians.org/t/state-rent-proposal-version-2-rushed/2494 [Hudson Jameson] Q: Inter-shard transactions - how do downstream shards protect themselves against kiting exploits (A- B B- C C- D where the transfer A- B is later challenged)?? I can imagine kiting tumblers that might make this a computationally intractable challenge. A: There isn't really a concept of \"challenging transfers\" in the current spec, and if you mean plain old fraud proofs then the answer is that if a block that was confirmed into a history turns out to be invalid then the entire history from that point on is invalid and should get discarded. [Vitalik Buterin] Q: If I deploy a contract in ETH 2.0 will it randomly be assigned to a shard? A: No. You specify the shard you want. You'll chose based on proximity to contracts of interest, and gas prices. (Each shard will have a separate gas market.) [Justin Drake] A follow-up: Though initial choice is not necessarily irreversible; contracts could be designed to be yanked ( https://ethresear.ch/t/cross-shard-contract-yanking/1450 ) from one shard to another, and I expect a lot of applications will take advantage of this feature. Q: Will there be a software implementation of VDF for those who are unable to obtain the ASIC? Also, will participants in the RANDAO/VDF mix earn rewards in a similar fashion to validators (if at all)? A: Will there be a software implementation of VDF for those who are unable to obtain the ASIC? A software implementation of the VDF would likely be useless for production. The current estimate is that a CPU implementation would be 1,000 to 10,000 times slower than the ASIC. A software implementation would be useful for testing though. will participants in the RANDAO/VDF mix earn rewards in a similar fashion to validators (if at all)? There will be a small incentive for validators to also be VDF evaluators. Other than that we're mostly drawing from external incentives (e.g. as a large ETH holder you have an incentive that Ethereum stays healthy). The good news is that we only need one VDF evaluator to do its job. There will be thousands of VDF rigs given for free to the community. [Justin Drake] Q: Do Quantum Computers pose a permanent threat to ownerless legacy addresses with significant funds and can they cause collisions with old contracts? A: One of the features of Ethereum 2.0 is \"abstraction\", which means that users can specify whatever signature scheme they want. I expect quantum-secure signature schemes to gradually become more popular. Burn addresses can easily be made quantum-secure. Do Quantum Computers pose a permanent threat to ownerless legacy addresses with significant funds Yes, definitely a threat. Ownerless legacy address could be a systemic risk for blockchains such as Ethereum and Bitcoin. Would be interesting to guestimate how much ETH is at risk. Q: ERC20/721 standards' design sucks. Is there any idea or plan to convert current tokens to ERC-1155 like, efficient format? (Code isn't Law. Seriously.) A: I'm hoping that Ethereum 2.0 standards (such as token standards) can learn from the mistakes of Ethereum 1.0 and evolve. Starting from scratch is a unique opportunity in Ethereum's lifetime. [Justin Drake] A follow-up: Agree! There's a lot from ERC20 that I dislike, the main two things being: It being a pull system vs a push system, requiring the whole approve/transferFrom mess to use tokens to pay for things in smart contracts Handling of ETH being so different from handling of tokens Definitely would like to see both issues resolved in 2.0. The other big things I want to \"get right this time\" is (i) multisig wallets and (ii) not having the \"ether used to pay for gas to withdraw funds from a mixer contract being a deanonymization vector\" issue that makes privacy hard at the moment. Q: How soon will staking pools be live when Ethereum staking goes live? A: At the consensus layer we are trying hard to be friendly to decentralised staking pools. Hopefully we will see those soon after the launch of phase 0. The research and implementation work that Dfinity is doing regarding BLS Distributed Key Generation (DKG) will likely help decentralised pools. Centralised staking pools\u2014unlike centralised mining pools\u2014are somewhat awkward because you have to trust the operator to behave properly with your funds. [Justin Drake] Q: If we want to bring our smart contracts to a new chain, could we pre-determine the corresponding starting/ending hex values for the old smart contracts? Kind of reminds me of CREATE2... A: Yes, Eth2.0 will have a CREATE2 equivalent for deploying contracts. As for existing contracts, the entire eth1.0 state will be rolled into a contract on a shard and these existing contracts will be callable via calling into this 1.0 contract targeting the existing contract address. [Danny Ryan] Q: Are there any courses or subjects in uni that one should take to help in becoming a researcher? A: I'd say you need to be a good self-learner. Math, cryptography, computer science, programming, economics, networking are all relevant. [Justin Drake] Q: Of proposed ways to tackle state rent problem, which one is your favorite? What do you think about resulting complexity from user point of view? A: As far as base protocol goes, either option here: https://ethresear.ch/t/a-minimal-state-execution-proposal/4445 The complexity is actually not so much in the rent itself, it's in how it changes the developer experience. The general approach is that application storage will need to be more \"modular\" and explicitly broken down into chunks associated with specific users, possibly with a fixed amount of \"global\" storage, plus some short-term storage not assigned to any user that goes away after some fixed amount of time, eg. 6 months. [Vitalik Buterin] Q: Question for Justin Drake and other VDF researchers: Would using Chainlink and TEEs (Intel SGX) be a viable method of generating secure randomness for the VDF function of Eth 2.0? Could this be used in lieu of specialized hardware? If so, I imagine this could be a substantial time and cost saving measure in the quest for Serenity. A: TEEs can be used to generate randomness using delay. Unfortunately TEEs is trusted hardware. We need a trustless solution :) [Justin Drake] A follow-up: Though I would add that trusted hardware could be a great thing for individual validators to use to increase their security. [Vitalik Buterin] Q: What computer science problems still need to be solved prior to the release of Phase 1? A: For phase 0 we need locally-computable shuffles. For phase 1 we want a custody scheme that is friendly to decentralised pools. Please message me if that sounds like your cup of tea :) [Justin Drake] Q: What happens to the beacon chain in the event of a controversial hardfork on the Eth 1.0 chain? Will two beacon chains form? If not, what mechanism will the beacon chain use to determine which Eth 1.0 chain is the main chain? How will this affect the transition of the Eth 1.0 chain onto a Eth 2.0 shard? What safeguards are in place to ensure that malicious participants do not create unnecessary volatility between ETH BETH during the year long transition from phase 0 to phase 2? It is my view that this trading pair must remain stable for a successful transition to take place. A: If not, what mechanism will the beacon chain use to determine which Eth 1.0 chain is the main chain? By default the beacon chain validators will just use the voting mechanism that's specified in the spec, and whichever chain a majority of the validators support is the chain that the beacon chain will go with. That said, if we want to facilitate a peaceful split, there is a fork versioning feature built in to the beacon chain to make replay protection very easy... [Vitalik Buterin] Q: Why are you not doing \"proper\" research and submit publications to conferences? A: Not really an answer to your question, but Ethresear.ch ( https://scholar.google.co.uk/scholar?hl=en as_sdt=0%2C5 q=\"ethresear.ch\" btnG= oq=\"et ) does get cited :) [Justin Drake] A follow-up: As does the Casper FFG paper! [Vitalik Buterin] Q: Let's say that I have some ethereum locked on a time locked contract, will be available after the 2.0 transition? This question can be expanded to all 1.0 contract functionality after the POS transition A: The Ethereum 1.0 will live on, even after Ethereum 2.0 is fully deployed. See https://old.reddit.com/r/ethereum/comments/ajc9ip/ama_we_are_the_eth_20_research_team/eeub9sp/ . [Justin Drake] Q: Thoughts on this tweet? https://twitter.com/zaoyang/status/1088001513459511296?s=21 A: Eth 2.0 is not really trying to maintain backwards compatibility; almost every part of the design is significantly altered, and old contracts will have to explicitly migrate over to the new system and in some cases rewrite eg. to adapt to rent. [Vitalik Buterin] Q: What's your vision for Eth 3.0? A: STARKs, STARKs and lots of STARKs. Hopefully some nice way to achieve 2 second average block times. Extremely effective cross-shard communication, either at base layer or through a variety of easy-to-use layer 2 systems. [Vitalik Buterin] A2: See https://twitter.com/drakefjustin/status/1072593728253104128 [Justin Drake] Q: In the future how will a really popular DAPP operate? Will it be possible for a single DAPP to operate across multiple shards? If not how will it operate properly with the TX/sec limits on a single shard? Will L2 solutions be the only option? A: A dApp would have to get really big to consume all the resources in a given shard to justify spreading itself over multiple shards. For example, Uber does less than 20 rides per second. A similarly popular decentralised equivalent would likely fit on a single shard, especially when fancy L2 infrastructure is involved (e.g. state channels, plasma, SNARKs/STARKs). [Justin Drake] Q: What is your take on the current state of finding consensus on randomness, in particular the current VDF construction. While certainly clever, I wouldn't say it is very elegant. Do you think this is due to theoretical constraints or do do you see potential for a 'nicer' way? More general, are there any theoretical problems in this space, relevant to Ethereum 2.0 or not, that are just interesting to think about? (starting my PhD soon and looking for inspiration if it wasn't obvious) A: I wouldn't say it is very elegant I'd say VDFs are a super elegant thin layer on top of RANDAO :) Is it the hardware you don't like? If so, would you agree that proof-of-work is an elegant solution? Then think of VDFs as being \"proof-of-work 2.0\": much better randomness at much lower cost. It's a paradigm shift from massively-parallel work to inherently-sequential work. Do you think this is due to theoretical constraints or do do you see potential for a 'nicer' way? I'm not aware of any unbiasable randomness schemes that only have strong liveness, other than VDFs :) are there any theoretical problems in this space, relevant to Ethereum 2.0 or not, that are just interesting to think about? (starting my PhD soon and looking for inspiration if it wasn't obvious) We will have an academic \"VDF day\" at Stanford on Feb 3 to work on open problems. Will you be nearby? [Justin Drake] Q: Shouldn't the smart contract stated in (4) have the ability of sending just 16 ETH for something as RocketPool v2 work (while some consider this to be \"centralization\" I think it will help a lot the average user and mitigate the risk of the average user)? A: You can send between 1 ETH and 32 ETH to the Ethereum 1.0 deposit contract at any time. A minimum balance of 32 ETH on the beacon chain is required for activation as a validator. [Justin Drake] Q: I see a lot of people talking about nodes running in cloud. Shouldn't ETH find a way to actually discourage this? If everybody is running nodes in cloud that means we have possible single point of failure, which is against what I think we are trying to achieve and what enterprise customers are looking to eliminate. A: \"Partial slashing\" and the quadratic leak during times of no-finality actually financially encourage diverse validator setups. Your potential losses are much smaller when your slashable message or validator down-time are discorrelated. Diversity in setup includes -- node software, validation software, local server vs cloud provider (and which cloud if using cloud), geographic region, etc. If a ton of validators all run on AWS and AWS goes down, these validators will suffer large penalty leaks. To guard against this, I should setup my validation node locally or on a less used cloud provider. [Danny Ryan] A2: We do have a way! It's called \"partial slashing\" and the idea is that, if something goes wrong, the more people did something wrong the more everyone gets penalised. So there is an incentive to avoid correlation with other validators, and hence avoid centralisation. [Justin Drake] Q: Can you foresee ever having to move Eth 1.0 to Eth 2.0 in order to avoid losing it forever? A: The current plan is to incorporate the eth1.0 state into a contract on a shard in eth2.0. Note that this will just be a state root and an EVM interpreter along with eth balances. Users will be able to call into this contract by providing merkle witnesses of the required state. [Danny Ryan] Q: I'm a new developer looking into Ethereum, where would you officially recommend I look to develop with an eye toward future proofing? A: A key consideration to future proof your contract code for Ethereum 2.0 is sustainable storage. It's known as \"storage rent\" and \"storage maintenance fees\". [Justin Drake] Q: What do you guys think of the Avalanche consensus mechanism and could it play a role in the ETH roadmap further into the future? A: Avalanche is interesting to me because it's a fresh approach. Looking forward to seeing how it plays out with Bitcoin Cash. Successes there can be ported to Ethereum via L2 infrastructure. [Justin Drake] Q: Is sharding smart contracts theoretically possible? How would one go about that? A: Here's a trivial example: the Ethereum Name Service (ENS) can be sharded across n shards according to the first log_2(n) bits in the domain name hash. [Justin Drake] Q: How does eth 2.0 balance security across shards holding different amounts of notional value in them? For example if there is a decentralized finance shard holding a very high % of eth + other tokens, would the stakers/validators responsible for that shard have incentives to behave badly? A: The key security guarantee of sharding comes from frequently shuffling validators into randomly-sampled committees (known as \"crosslink committees\"). The hope is that this fast shuffling resists bribing attacks, in both the \"honest majority\" and the \"slowly-adaptive rational majority\" security models. [Justin Drake] Follow-up Q: It still seems like an inefficiency where you'd be over-securing shards with low notional value + under-securing shards with high notional value. Am I thinking about this wrong? A: Every shard gets security with the same notional value. Value (validator collateral) gets spread evenly across shards. [Justin Drake] Follow-up Q: Ah think we are speaking past each other a bit, let me try to clarify my concern -- It seems likely you will have wildly varying ratios of (value sitting atop a particular shard / validator collateral securing that shard). So for example a defi shard with 90% of value in eth economy sitting in it only gets 1/1024th of the validator collateral securing it. And an empty or unused shard would get same 1/1024th of total validator collateral securing it. This seems inefficient to me. Depending on how the distribution of value shakes out across shards, potentially materially inefficient? A: This seems inefficient to me. Depending on how the distribution of value shakes out across shards, potentially materially inefficient? Oh I see! Interesting point. We consider every shard equal, and provide high security for all shards. The breakdown of even a single shard (namely, an unavailable or invalid crosslink) would likely be catastrophic for the whole system. [Justin Drake] Q: Will the Beacon Chain require its own nodes? Is this basically a brand new chain that has only one connection to ethereum: Proof of Burn? A: The beacon chain is a new system level chain that houses the validators and manages their responsibilities and rewards/penalties. In many ways this is akin to the FFG contract and sharding contract proposals that were previously deprecated but the organization breaks clean from the EVM to allow for a radically new design and increased efficiency. A node in the future can run the PoW chain and/or the beacon chain. If they run the beacon chain, they can then sync whatever shard chains they want. The connection at first is just an economic connection -- use the existing economics and community to seed validation in the beacon chain. Beyond that, we expect the beacon chain to be used to finalize the pow chain in the short to medium term. In the end, there are a number of proposals to either fork the eth1.0 state into eth2.0. [Danny Ryan] Q: How does Eth 2.0 account for DDOS attacks? If people run nodes at home on consumer hardware with a normal internet connection they can be taken offline easily with DDOS attacks or am I interpreting this wrong? A: It is the responsibility of a validator to remain online to fulfill their responsibilities and gain rewards. A validator can remain profitable if they generally remain online greater than 50-67% of the time. A validator's inactivity penalties are also minimized if their being offline is dis-correlated from other validators. This incentivizes to utilize different node and validation software from the majority so that in the case of a ddos attack vector against a particular node implementation, your offline losses are minimized. The validator's protocol level identity and it's node's network identity are completely decoupled. This allows for a validator to create any type of obfuscated network setup that serves their purposes. I expect many tools and best practices to arise for home validators in the coming months. [Danny Ryan] Q: What are your thoughts on formal verification of smart contracts? Will this be possible with Ethereum 2.0? A: Formal verification of smart contracts is awesome and super valuable IMO. Formal verification will be possible in eth2.0. I believe the WASM semantics are already available in K which will provide some good opportunities for contract verification. Opening up more languages by using WASM will also allow for utilization of more restricted languages that are more amenable to FV. [Danny Ryan] Q: What are some good cypherpunk books that you would recommend to people getting interested in this space? (Or just good book recommendations in general) A: I don't read many books nowadays. I mostly consume academic papers, whitepapers, podcasts, videos, blog posts, Reddit, Twitter, etc. I did enjoy \"Zero to One\" by Peter Thiel when I was an entrepreneur. [Justin Drake] **Q: How do you prevent single shard corruption attacks? Basically will there be resharding? If so, how is resharding done? How are you solving the fast state syncing problem if nodes need to be reshuffled around shards? A: How do you prevent single shard corruption attacks? By randomly shuffling validators across shards. Basically will there be resharding? If so, how is resharding done? Right now crosslink committees are shuffled every epoch (6.4 minutes) and shard proposer committees are shuffled every ~9 days. Crosslink committees are critical, hence why there are shuffled fast. See this answer also. [Justin Drake] Q: You said in a comment some days ago that there are basically no unsolved problems of Serenity Phase 0 left. Which problems of Phase 1 and 2 are still left to be solved? A: The short answer is there are no big fundamental problems for phases 0, 1, 2. The more detailed answer is that for phase 0 we need locally-computable shuffles. For phase 1 we want a custody scheme that is friendly to decentralised pools. For phase 2 we need to figure out sustainable storage. [Justin Drake] Q: Before Eth 2.0 Enhancements come in, what is the best recommended approach for storing private data on Ehereum? A: Storing data on Ethereum is expensive per byte. Infrastructure like Filecoin may prove to be a good trustless storage solution. For privacy, just encrypt the data. [Justin Drake] Q: Will there be any zk-snarks related enhancements coming with Eth 2.0? A: We are hoping to have a SNARK- and STARK-friendly hash function in Ethereum 2.0 at some point. Unfortunately those likely won't be ready for phase 0. At the application layer, WASM will ideally mean that SNARK-specific precompiles won't be necessary. [Justin Drake] Q: Is there some kind of roadmap for the migration from ETH 1.0 to ETH 2.0 in layman's terms? For true decentralization it is required to get more people on board that understand the full process. A: I described the three phases here https://www.reddit.com/r/ethereum/comments/ajc9ip/ama_we_are_the_eth_20_research_team/eeueuzc EthHub also does a great job at simply describing the path https://docs.ethhub.io/ethereum-roadmap/serenity-phases [Danny Ryan] Q: ETH token will not be transferable back after migration to ETH2.0 What will be the token ticker for the ETH2.0 chain native token? A: ETH\u2014at least when Ethereum 2.0 is fully deployed. Fungibility is a key design goal. [Justin Drake] Q: Where does new client software take lists of peers with their ip addresses and ports? Is there is centralized server? A: This is an implementation detail. Some clients may have a hardcoded list of \"bootstrap node\" IPs and ports. [Justin Drake] **Q: Do you have any final plans in mind about the current ETH inflation? A: Nothing final. Ultimately the community will have to make a tradeoff between low inflation and high security. See https://github.com/ethereum/eth2.0-specs/issues/251 . [Justin Drake] Q: What are the odds that a fully sharded chain including state transitions is feasible? A: Very high. No fundamental problems unsolved. The tricky part is getting everything to fit together cleanly. [Danny Ryan] Q: Can I use a raspberry Pi to stake when staking is possible? And what do I do with it in the mean time? A: Nimbus ( https://github.com/status-im/nimbus ) is targeting resource-constrained validators :) [Justin Drake] Q: What's your opinion of EOS (or TRON, STEEM) in terms of dapp platform? A: I tend to be critical of that class of systems. See https://vitalik.ca/general/2017/12/17/voting.html and https://vitalik.ca/general/2018/03/28/plutocracy.html for reasons why. [Vitalik Buterin] Q: Any updates as far as overall inflation rate per year or per milestone/HF? Any updates as far as TPS per year or per milestone/HF? A: See https://github.com/ethereum/eth2.0-specs/issues/251 [Justin Drake] Q: Can I make a Zcash coin on ETH 2.0 for example with all or most of the advantages of Zcash? A: Yes, there are already a number of experiments in eth1.0 to demonstrate usage of ZKSNARKs for both privacy and scalability. Check out miximus for privacy and roll up for scalability (both by barry whitehat!). Usage of ZKSNARKs will be supported in eWASM state execution so I expect more privacy solutions akin to Zcash to continue to be built on eth2.0. [Danny Ryan] Q: Why is ETH 2.0 Phase 0 even needed as a \"main\" chain, and need Bether transform from real ether (hence risk losing some value), instead of doing a testnet only, because after all this is what phase 0 is, based on TestnetBEther? A: ETH 2.0 needs a main chain as a single point of truth for all the shards. The reason we have phases 0, 1, 2 is to break things down conceptually, and in terms of incremental releases to limit risk. [Justin Drake] Q: What work is being done to make the research behind ETH 2.0 more geographically decentralized? Are there any efforts to translate research specifications into other languages? A: Are there any efforts to translate research specifications into other languages? Once the spec is more mature I expect the community to pick this up, somewhat similar to how Andreas's books get translated. English seems to be the a lingua franca for research and development. [Justin Drake] Q: After PoS, if a node gets hacked, can the hacker make the node to lose its stake by confirming false transactions? A: When your validator gets penalised it is automatically deregistered to prevent further damage. We have a mechanism called \"partial slashing\". The idea is that, if something goes wrong with your validator it only gets penalised a bit if not many other validators also mess up around that time. So in the optimistic case of a lone hack you should recover most of your funds with your withdrawal key (kept secure, e.g. in cold storage). [Justin Drake] Q: Will contracts be able to pay for gas in Eth 2.0? A: That will likely be unlocked with abstraction (which includes gas abstraction). [Justin Drake] Q: Assuming the number of network nodes remains the same and the network graduates to full PoS... what is your expected maximum theoretical transaction throughout? A: Rough ballpark figures. 1024 shards * 10 transactions per second per shard ~= 10k transactions per second. [Justin Drake] Q: What is the most updated timeline for rolling out PoS? Since Vitalik already said 'research is done', what are developers' incentives to push things forward? Are there any specific measures taken to ensure a smooth transition? A: I expect the beacon chain (the core PoS chain) to launch late 2019. Ideally the spec should be close to final in Q1, cross-client testnets in Q2, security audits in Q3, mainnet launch in Q4. As a rule of thumb, launching in December is hard because of the holiday season. So November 2019 and January 2020 would be my two best guesses. Having the Ethereum 2.0 chain finalise the Ethereum 1.0 chain will take more time. [Justin Drake] Q: Will it be possible with sharding to have shards with different rules and/or technology independent from the other shards/beacon chain, but still using the same base tech in terms of transacting and security? For example: private eth network run in a shard connected to main eth network from which it takes just security from validators. Private transaction with ZKsnarks shard(s). Encrypted data shards. Erc20 like coin launched on ETH 2.0, but with it's own rules and maybe own shards somehow controlled by the smart contract of that erc20. A: Every shard has the same data availability layer, and the option to use EVM2.0 as an execution engine. That's common base-layer infrastructure. At the application layer contracts can be powered by non-EVM2.0 execution engines (so-called alternative execution engines). There's also a huge L2 design around state channels, plasma, cross-shard communication, etc. So at the application layer I expect lots of non-homogeneity across shards, as well as a lots of homogeneity thanks to standardisation. [Justin Drake] Q: Today, running full nodes isn\u2019t that hard, but the resource requirements are slowly increasing. How much thinking is being devoted to the greater infrastructure requirements of Eth 2.0 and how they will impact node participation and decentralization? A: Ethereum 2.0 validation should be sustainable from a resource perspective: Bandwidth: fixed cost (thanks for fixes shard block sizes) Storage: if not fixed then sustainable (thanks to ideas such as storage maintenance fees). Note that storing shard blocks since genesis is not required. CPU, memory I/O: similar situation to Ethereum 1.0 (gas limit that can be voted up or down). [Justin Drake] Q: How ETH 2.0 differs from ETH, and why POS instead of POW. A: PoS enables goodies such as economic finality and sharding. It is also much cheaper (in terms of inflation cost for hodlers, as well as ecologically) than PoW. [Justin Drake] Resources: Source","title":"Ethereum 2.0 AMA"},{"location":"other/ethereum-2.0-ama/#ethereum-20-reddit-ama","text":"","title":"Ethereum 2.0 Reddit AMA"},{"location":"other/ethereum-2.0-ama/#questions-and-answers","text":"Q: When, as in period of time, do you think Ethereum will be able to solve scalability issues? A: In phase 1 (about 2020 by my estimate) we will have shard data. Those shards, even without an EVM, can be used as the data availability layer for TrueBit (and other alternative execution engines). Phase 2 (about 2021) is when we will have scalable L1 execution. [Justin Drake] Follow up Q: ELI5 execution engines Follow up A: An execution engine is a way to compute state assuming consensus on data. The execution engine for the EVM is \"naive re-execution\". There are more fancy execution engines such as TrueBit and SNARK/STARK-based validity proofs. [Justin Drake] Q: Are economists being consulted to help decide the issuance rate of a full POS system? Stated more broadly, who is helping/advising the ETH 2.0 team on the effects certain issuance decisions will have on the network and community (both in the short and long term)? A: Personally at this point the feedback I'm most interested in is actually feedback from potential stakers. The main question basically being, are there any other tweaks we can make to the economics that, given a fixed level of reward, will (i) encourage more people to validate, and (ii) encourage many small solo validators or smaller pools, as opposed to a few large pools. [Vitalik Buterin] Q: Considering that Yoichi is not working anymore in the Foundation, what are your plans on formal verification of ETH 2.0 specs? A: I'd say that formal verification of the spec will make sense when the spec is more mature and stable, maybe mid 2019. Anyone interested in doing formal verification of the ETH 2.0 specs in a few months, please send a grant proposal. [Justin Drake] Q: What is the best response to a developer who is hesitant about building on ethereum today, given that it will be \"replaced\" by ETH 2.0 over the next few years? A: I expect that once the state and execution model for Serenity solidifies (see https://ethresear.ch/t/a-minimal-state-execution-proposal/4445 for one minimal proposal) we'll start working with the developer community on modifications to high-level languages (Solidity, Vyper, etc) and best practices. Hopefully at that point it will become clearer how to build applications in such a way that they could be redeployed as-is on the 2.0 chain. At least that's my hope. [Vitalik Buterin] A2: Building on Ethereum 1.0 today is great for learning and prototyping. It's also great for assembling a culturally-aligned team consistent with the philosophy of the Ethereum community (which may be different than the philosophy of the Bitcoin, Ripple, Bitcoin Cash, EOS, Tether, etc. communities). [Justin Drake] Q: Can we run multiple validator clients on a single machine assuming we've got multiple 32 Eth deposits? A: Yep! There's nothing preventing you from using one machine to run multiple validators. The only hard limit you'll face is that the number of shards you are assigned to validate increases linearly with the number of validator slots you have, so if you have thousands of ETH a laptop will not suffice and you'll need something more powerful. [Vitalik Buterin] A2: Short answer: Yes. Long answer: You will need to register a validator for every 32 ETH. In phase 0 (just the beacon chain, no shards) you can likely handle thousands of validators on a single machine. After phase 1 the number of validators that can be operated on a single machine depends on how resourceful your machine is. A mainstream laptop should comfortably handle one validator, and likely handle 2-10 validators at max capacity. The computational resources scales linearly with the number of validators until you reach ~1,000 validators. At that point there are scalability advantages in being a super-node, i.e. a full node for every shard. [Justin Drake] Follow up Q: How much importance are the devs placing on being able to run setups at home wrt keeping Ethereum decentralised and being able to move ETH in and out of staking pools? Follow up A: It's definitely a goal I care about. The alternative to staking at home is staking on AWS or staking through a pool, and both are risks for decentralization. Concrete ways we try to be friendly to staking at home: Relatively forgiving penalties for being offline, so you earn a net profit as long as you're online more than ~50-67% of the time Keeping the cost of validating the beacon chain low The anti-correlation penalty scheme, which more heavily penalizes validators that misbehave at the same time as many other validators (which is more likely if you're on the same pool or VPS or whatever). [Vitalik Buterin] Q: How can I help / get involved? I fell in love with Ethereum not too long ago. I\u2019ve been reading Zcash\u2019s BLS12-381 Elliptic Curves and for the past few days these are all thats been on my mind. I love this project now and just found ethresear.ch. I really wanna help in any way possible! Thanks again for all your hard work. I can\u2019t stop reading these posts. A: For researchers a good way to contribute and gain visibility is to post quality content on ethresear.ch. If you are a developer consider joining one of the numerous ETH2.0 implementation teams. [Justin Drake] A2: Hi! The best way to get involved is to find something that captures your interest and to dig in. Because Ethereum is a radically open platform, the research and development is also generally very open and very accessible. Keep reading. Follow your interests down all the little paths and begin to build a mental model of the ecosystem. https://ethresear.ch/ is a great place to follow and begin to contribute to research discussions. https://gitter.im/ethereum/sharding is where a lot of the day to day conversation about Serenity is happening (developers chatting from various projects) https://github.com/ethereum/eth2.0-specs Read the spec! but not only read it, be an active reader. If you find an error, typo, bug, etc, submit a PR. Also check out the issues and PRs in the spec repo. We are constantly discussing changes, fixes, updates and anyone can contribute. If you are a dev, open up one of the eth2.0 client projects and pick a \"good first issue\". These allow you to touch the codebase, contribute a bit, get the lay of the land, and provide the foundation to tackle bigger issues from there. ^ Those are Serenity specific suggestions, but beyond that, just find projects you are interested in and begin contributing. There is so much to do and project leads are always excited to have helping hands. This stuff doesn't build itself :) [Danny Ryan] A3: If you're interested in Cryptography especially, you can also check out another BLS - Boneh\u2013Lynn\u2013Shacham signature spec for Serenity and help to review it: https://github.com/ethereum/eth2.0-specs/blob/master/specs/bls_signature.md :) For research, as Justin and Danny said, ethresear.ch is the sanctuary. And first, you can take a look the various topics on Ethereum Sharding Research Compendium to see which area you're most interested in. For implementation, there are multiple topics: Consensus layer - implement the spec! P2P layer design and implementation - see https://github.com/ethresearch/p2p [Hsiao-Wei Wang] Q: From my limited understanding of Eth 2.0 specs, I gather that shards will be mostly independent, with cross-shard communication being slow and requiring multiple steps. As a consequence, smart contracts will only be able to interact lively with assets from within their deployed shard, and will have to go through slow cross-shard communication to interact with assets outside. Given this topology, are we not aiming to improve scalability at the cost of sacrificing user experience (slow response of smart contracts in non-obvious ways)? For instance if I want to play cryptokitties, I will need to make sure to interact with the contract that is deployed on the shard where my eth address resides, and not with any of the other contracts that reside on other shards. Then, if I want to interact with the kitties of someone else who resides on a different shard, my experience will be much slower and cumbersome than if that person would reside in my shard (or at least this is how I understand the system will work, please correct me if I am wrong). Given that the end goal is to scale to a very large number of shards, then the likelihood to have to go cross-shard increases exponentially with time, and thus the user experience gets progressively worse and worse. A: Cross-shard communication will definitely be slow at base layer, however there are higher-level mechanisms that can be used to implement fast cross-shard communication on top of a base layer that allows any cross-shard communication at all even if slow. See https://ethresear.ch/t/a-layer-2-computing-model-using-optimistic-state-roots/4481 for an example of how this could be done. In general, I expect a lot of the long-run innovation in improving the smart contract development experience to happen at higher levels in this way; I write about why this is a good idea at length here: https://vitalik.ca/general/2018/08/26/layer_1.html [Vitalik Buterin] Q: What happens to all the contracts currently running? A: It is somewhat speculative at this point. My best guess is that Ethereum 1.0 contracts will stay running as-is for a long time (say, 10+ years) without any migration to Ethereum 2.0. This can be made sustainable by doing two things: Lower the inflation (e.g. reduce it by 20x, bringing the PoW security to a blockchain such as Ethereum Classic). Completely removing inflation\u2014relying on transaction fees only\u2014would also be possible (see below for security argument). Use Ethereum 2.0 to regularly finalise Ethereum 1.0, counter-balancing the reduced security and preventing long-range 51% attacks. This requires Ethereum 1.0 nodes to be beacon chain light clients, which should take years to happen. If the community gets tired of Ethereum 1.0 a bomb mechanism (e.g. difficulty bomb, issuance bomb, gas bomb, etc.) can gracefully kill it. Another possibility is for Ethereum 1.0 to become a contract on Ethereum 2.0. I don't see this as a practical solution, but I'm open to being convinced otherwise :) [Justin Drake] A follow up: I'll add that if any specific user wants to migrate their application to the 2.0 chain, then they should be able to just take their existing high-level code (Solidity or Vyper), make relatively few changes and redeploy. The main difference between the eth1 and eth2 systems that users will need to worry about is likely to be rent (or equivalents like gas-payment-extended bounded TTLs). [Vitalik Buterin] Q: Is there a worry that shards will become \u201cgentrified\u201d until full shard interoperability? Basically, will one shard capture all the defi apps because they can't directly communicate with each other on separate shards? A: I would say if that happens, that will create a large incentive for someone to create a defi dapp that can interact with the other defi dapps through asynchronous cross-shard transactions and launch it on a cheaper shard. [Vitalik Buterin] A2: At the start in times of low usage, the economic load-balancing might result in over and under utilized shards. Overtime as usage increases, I expect the economic benefits of deploying and interacting on particular shards will become more tangible and result in a more economically rational distribution across shards. Observing the emergent behavior is going to be super fascinating :) [Danny Ryan] Q: Can we run the same validator on multiple machines - in order to avoid penalties if one machine was compromised ? If yes - what happens when we run a validator on 3 machines, one goes temporary offline, one is compromised, one is OK? A: For small amounts of ETH I'd recommend just running on one machine; unless many other validators get penalized at the same time as you, the penalties are not too large. If you do want to decentralize your validator, then we have recently made progress toward validation being more multi-party-computation friendly, which would allow you to run a validator as a 2-of-3. In that case, as long as two of the three sub-nodes are functioning correctly you'll be fine. [Vitalik Buterin] A2: Yes! Ethereum 2.0 is friendly to n-of-m schemes thanks to BLS signatures. For example, with a 2-of-3 scheme you have can three computers, each with a share of the validator private key, such that two need to be online at any given time. This improves security as well, because an attacker now needs to compromise two of the BLS key shares. [Justin Drake] Q: Is there tech from any competitors such as Dfinity (or any others) that is worth adopting into Ethereum 2.0, or is the work all other dapp/smart contract platforms doing not relevant/good enough for ETH 2.0? A: Part of the job of the research team is to absorb good ideas from research papers and other blockchain projects. I keep a keen eye on technically interesting projects such as Dfinity, Coda, Zcash, etc. Competitors definitely also have good ideas, and learning from each other is part of the game :) [Justin Drake] Q: Do we need to run a full node to also earn from network fees or would the validator client handle this? A: Depends what you mean by \"full node\". The design of the sharding system is such that no one needs to run a node that verifies all of the data of all of the shards. A validator client validates the beacon chain and the specific shards that you get assigned to validate, and that is sufficient to earn network fees. [Vitalik Buterin] A2: The validator client should abstract the necessary tasks to get revenue from the different revenue streams. (This includes being a full node for the beacon chain and one shard at any given time, but that's a technicality you don't have to worry about.) [Justin Drake] Q: Very interested to hear about the efforts currently underway at the EF and strategic partners/OEMs to design and manufacture the VDF hardware. It's also the thing that scares me the most about the proposed design;i can see how they would really increase the security of the random sample selection process in addition to RANDAO but manufacturing hw is a costly, difficult endeavor often subject to unforeseen issues and delays. On that note is an economic incentive structure for running a VDF node being considered? A: Very interested to hear about the efforts currently underway at the EF and strategic partners/OEMs to design and manufacture the VDF hardware. We're working our way with various partners, including Synopsys, AWS, TSMC, GUC, etc. VDF announcements to come in February :) manufacturing hw is a costly, difficult endeavor often subject to unforeseen issues and delays. Right. The good news is that Ethereum 2.0 can launch just fine without VDFs, so we're not betting Ethereum 2.0 on the success of VDFs. The current plan is to have VDF hardware ready in 2020, but 2021 would also be acceptable. From a financial perspective, we may share the total costs (estimated at $15m) with Filecoin and other projects interested in VDFs. We are already sharing costs with Filecoin on viability studies. On that note is an economic incentive structure for running a VDF node being considered? Short answer: yes, of course :) Long answer: the ethresear.ch post provides a bit of clarity on that. highly specialized hw always connected providing a crucial function to the network it would be a prime target for potential adversaries to disrupt or compromise Right. The good news is that we only need one VDF evaluator to be online for normal operation, and even if everyone goes down it's not a huge deal. The main negative consequence is that dApps relying on unbiasable randomness will have to wait longer than expected for the random numbers to arrive. [Justin Drake] Q: zk-STARKs are powerful and I have been reading Eli\u2019s and the others paper on it. Are recursive zk-STARKs ever doable? I know Coda is planning on using Recursive zk-SNARKs to shrink chains but the lack of transparency is worrying. A: I don't see what fundamentally prevents them from happening. Recursive [any zero knowledge proof schemme] just means using the ZKP mechanism to make a ZKP of the ZKP's own verification procedure. The main challenge in practice is just that these verification procedures themselves have a high cost (eg. there's 50-500 kB worth of hashes in a STARK to verify), and this cost multiplied by the ZKP's overhead is quite a big number. ZK SNARK verification is in contrast much more \"concise\". [Vitalik Buterin] A2: Are recursive zk-STARKs ever doable? In theory yes, but as I understand recursive zk-STARKs won't make sense from a performance standpoint for most applications, at least in the medium term. [Justin Drake] Q: What\u2019s the final scalability limit of Ethereum post Serenity? Gas limits per block? Blocks per second? A: The current design has a fixed number of shards, at most one block per 6-second slot, and fixed block sizes. This means that the data bandwidth is capped. The gas limit on the other hand will likely be floating, just like Ethereum 1.0. [Justin Drake] A follow up: Though in the current phase 1 spec that's sitting around in draft mode the block size is so far fixed to 16 kB, as keeping it fixed makes the code for proofs of custody, data availability proofs, etc much simpler. If we want to bump up capacity later increasing the shard count may well be the simpler way to do it. [Vitalik Buterin] Q: Why should anyone move to the Beacon Chain? How exactly do you envision the move to happen? A: Why should anyone move to the beacon chain. Specifically, only validator balances exist in the Beacon Chain. User balances and state exist in the shard chains. Validators will move to the beacon chain to seek profit by providing security and resources to network. Note there is a new proposal to have the beacon chain finalize the PoW chain during the transition period so the validators would be able to provide security both to the new shards and the existing chain. Users will move to the shard chains to participate in the new scalable, sharded landscape. We envision economic activity to begin to move over as the system stabilizes and begins to show clear economic benefits to the users. It is important to note that a user could choose to not move until the eth1.0 state is rolled into a shard. How exactly do you envision the move to happen? At first, this will just be a single directional deposit for validators only to begin validation. Once the state execution layer is in the new 1024 shards, users will be able to transfer eth directly to the shards from the PoW chain. In the long term, the plan is to roll the PoW state into one of the shards. The current most favorable strategy from our perspective is to fork the PoW state root into a contract along with an EVM interpreter. Users could then execute txs on the existing eth1.0 state by call the contract along with the merkle witnesses of the state they need to access. This option is nice because it allows us to cleanly deprecate eth1.0 support in the long term. [Danny Ryan] A2: Moving to the beacon chain is done by sending ETH to a so-called \"deposit contract\" on Ethereum 1.0. People would send ETH to the beacon chain to become an Ethereum 2.0 validator and gain financial rewards. [Justin Drake] Q: How much funds does Ethereum foundation have and are these enough for finishing Eth 2.0? A: The EF has tens of millions of dollars in fiat, and a bunch of ETH. More than enough to finish ETH 2.0 :) [Justin Drake] Q: How is the status of a possibly fixed eth supply at some point in the future? Do you think it's likely? A: I don't know about fixed ETH supply, but we may get to a point of decreasing ETH supply. Indeed, we are looking into transaction fee schemes that burn ETH, and burnt ETH may outweigh minted ETH. [Justin Drake] Q: Have you looked into hyraxZK. They are zk-SNARKs that do not require a trusted setup. Any thoughts on them being used in the future as the sizes are still very small. The only thing is they wouldnt be Quantum-Resistant but the proof size won\u2019t be similar to a zk-STARK. I wonder what they can be used for offchain as well, especially in networking by producing a zk proof of incoming packets that acts as Natural DDOS Protection. Just some thoughts. A: Have not looked into Hyrax specifically, but I am totally not surprised that things like it exist. I'm definitely very happy with the progress the general-purpose ZKP space has accomplished in the last few years; the very concept of general-purpose ZKP is pretty godlike compared to what I imagined was possible with cryptography as a child. Our general instinct is to find ways to make it possible to get the benefits of many different ZKP schemes with different tradeoffs in ethereum. The simplest way to do this would be to encourage the development of such tech as application-layer or network-layer addons so that it we do not need an agreement at consensus layer about a single ZKP scheme that everyone uses. [Vitalik Buterin] Q: V said that there are no fundamental problems left to solve. Is this true for only phase 0? If so, how confident are you about the other phases? A: Personally I am confident in all of the current fundamental technologies for all the phases outlined so far (Casper FFG and CBC, sharding, erasure coded data availability proofs, proofs of custody, receipt-based async transactions, layer 2 for acceleration, abstraction, rent, \"stateless client\" verification). There is definitely still a lot of room around the edges for optimization though. [Vitalik Buterin] Q: Why was Hybrid Casper ditched when it looks like the Beacon Chain kind of has nothing to do with the PoW chain? or Why not re-instate Hybrid Casper considering its testing is/was finalized? A: Honestly hybrid Casper is a bit of a dead end. Actually implementing/testing it across all the clients would require setting up a lot of infrastructure that we would then need to throw away. The design was highly inefficient because of its \"implemented-in-EVM\" nature, and it turned out that we could not really benefit from the ease-of-implementability of being done in EVM because we would need to write a lot of special-purpose code to make verification of signatures parallelizable. So we chose the route that would be somewhat more painful in the short term, but significantly lower headache to actually get to a stable sharded system overall. [Vitalik Buterin] A2: I wrote up some notes on the deprecation of EIP 1011 here https://notes.ethereum.org/s/rJDrKoBOQ [Danny Ryan] Q: 1. Since it is a one way transfer to the beacon chain, my understanding is that there will be two tokens: ETH1.0 and ETH2.0. Right? Will The beacon chain allow tokens to be send. I.e. will exchanges be able to list the token before phase 2? My feeling is that from a risk/reward perspective, stakers will expect returns more in the area of emerging market debt (+20%) esp. in the beginning. But all discussion I saw was ~2%. Any comments on this? Gutfeeling: how much \"unsolved computer science problems\" for phase 1, 2 and 3 roughly? I understood for phase zero it has arrived at 0. Will we consider some kind of tax baked into the system to ensure sustainability of core developments and infrastructure? A: Will The beacon chain allow tokens to be send. I.e. will exchanges be able to list the token before phase 2? ETH in the beacon chain would not be transferable (anywhere!) until phase 2. That will make exchanges harder, although we may see a futures' market. My guess is that we will see 1 ETH ~ 1 BETH at pretty much all times :) [Justin Drake] My feeling is that from a risk/reward perspective, stakers will expect returns more in the area of emerging market debt (+20%) esp. in the beginning. But all discussion I saw was ~2%. Any comments on this? The reward/penalty constants are certainly not yet finalized and could use more community debate and input. That said, the rate does scale depending on the number of validators participating. If the fair market rate is really 20%, then a lower number of validators will show up. If the fair rate is 2%, then a ton of validators will show up. The economics of staking will find the natural equilibrium. That said the main risk here is if we set the target rate too low and the equilibrium lands at a low participation rate (and thus low security of the network). Although ~2% (@ 10M eth validating) is not set in stone, the idea for a low rate is that a huge amount of ETH is already being held as a speculative asset. Any marginal rate of return on top of this already intended long-term hodling is a gain for the hodler. [Danny Ryan] Q: How would you (and or service providers) ensure the eth on the Beacon Chain is the same as that on the PoW chain and vice versa? A: Arbitrage is always possible in one direction by buying 1 BETH for 1 ETH. A key design goal of Ethereum 2.0 is full fungibility for ETH tokens between the Ethereum 1.0 chain, the beacon chain, and the shards. Two-way transfers between the beacon chain and the shards, as well as between shards, should come in phase 2. [Justin Drake] Follow up point: If you wait until phase 2 for two-way flow, you privilege the very few stakers able and willing to wait an undetermined number of years for access to their money. This will be great for those few (probably north of 25% interest rates!) but not very great for security. Follow up A: y ou privilege the very few stakers able and willing to wait an undetermined number of years for access to their money The ultimate loyalty test :) probably north of 25% interest rates!) but not very great for security. We do have a minimum amount at stake to launch phase 0, around 214 * 32 ETH = 524,288 ETH. So we're effectively capping the interest rate (will be less than 25%) and setting a minimum security level. [Justin Drake] Q: For how long is the 32eth locked up when running a validator client? What happens if the machine I'm using gets destroyed or stolen during the lock up period? Can you switch machines? A: For how long is the 32eth locked up when running a validator client? At least as long as you are a validator. Withdrawal times should be a few days/weeks/months depending on how many other validators are trying to withdraw. What happens if the machine I'm using gets destroyed or stolen during the lock up period? Can you switch machines? You can switch machines. You need a copy of your private keys in case your machine gets destroyed or stolen. Another thing is the withdrawal key used for withdrawals only. Keep that one in cold storage ideally. [Justin Drake] Q: Contributing to Ethereum 2.0? Are there any projects which are some sort of \"under water\", like only few people working on it. A: I feel at this point there are enough implementation teams, at least compared to some of the other issues that are underaddressed. Off the top of my head: Solidity being compile-able to E-WASM Vyper being compile-able to E-WASM Thinking about research problems related to phase 2, particularly around account abstraction, asynchronous contract programming models, etc Privacy, eg. see https://ethereum-magicians.org/t/meta-we-should-value-privacy-more/2475 Improving the state of decentralized messaging and file storage [Vitalik Buterin] Follow up A: A few more things good to work on: liibp2p implementations in various languages Doing security reviews of the spec prototyping account and state execution in eWASM a lot of work in cross client testing coming up in the next couple of months [Danny Ryan] Q: We have experienced consecutive delays with Constantinople due to bugs found late in the process on a comparatively low risk / simple upgrade. What work is being done to mitigate this on Phase 0 and 1 given how much more complex these implementations will be? (I.e. What testing, third party audits, other considerations are being taken to ensure seamless implementation/integration? A: As the phase 0 spec is moving into a more stable place, we are beginning to look into explicitly bringing in third party audits, academics, and formal analysis. In addition to this, we are currently laying down the foundations of cross client testing and fuzzing akin to eth1.0. You're correct in that the consensus/system layer of eth2.0 is much more complex than the single PoW chain so we are constantly trying to reduce complexity and simplify. This is a major engineering effort that will require many parties other than our research team to plan, build, test, execute, and maintain. I think it is a major strength that so many independent teams with a diverse set of expertise have stepped up to contribute. Note, one of the design goals in the spec readme -- \"to minimize complexity, even at the cost of some losses in efficiency\" We're excited to see new efforts like the \"Ethereum Cat Herders\" and scheduled release cycles emerging in 1.0 and plan to incorporate any best practices and efforts into the 2.0 process. DePM (decentralized project management) is hard, but we continue to learn and continue to get better. [Danny Ryan] Q: How difficult will it be for 1.0 contracts to work on Serenity? Should developers expect to rewrite their contracts to account for state rent and cross-shard communication? A: Solidity can already compile to WASM and I believe it is in Vyper's roadmap to do so as well. These naive compilations might be inefficient (e.g. keeping 256 bit types in the 64bit wasm machine) so some amount of rewrite or utilization of optimizers might be called for. Beyond that, there are some unknowns that might change the approach to certain contract programming modesl. For example, storage fees might call for a new ERC20 contract design in which user balances are stored in separate child contracts so that users become responsible for managing their own storage fees related to their coins. [Danny Ryan] Q: What is the latest view on how the \"upgrade\" to Ethereum 2.0 will happen? Can you take us through the different phases/hardforks that will in the end enable the full PoS/sharded/WASM blockchain, and what each will enable? A: Eth2.0 is broadly divided into three phases -- Phase 0, 1, and 2. Phase 0 - The Beacon Chain This phase is the launch of the core system level functionality of the new PoS chain (the beacon chain). Validators can submit deposits, join the validator set, and build/finalize the core chain. At this point the chain will have Casper finality, an RNG, shuffling into the various validator roles, and simulate crosslinking in the (currently) non-existent shard chains. Phase 1 - Shard Chains (data) This phase is the launch of the shard chains, but only as a blockchain of data. (Execution and state comes in phase 2). At this point, validators will additionally build these data chains and finalize the each shard back into the beacon chain via \"crosslinks\" and attest the availability of the data. These crosslinks were already being created in Phase 0, but had a stub for the shard hash being finalized. In this phase, that hash becomes \"unstubbed\". Shard data chains begin to have some utility for applications that need a high availability data store. Phase 2 - Shard Chains (state and execution) This phase is the launch of state and execution of state (eWASM) on the shard chains. This is when users and applications will begin to migrate to Serenity and use it to it's full potential. Cross shard txs will be available at this point, and users can begin developing any number of \"layer 2\" execution engines on top. The above (especially phase 2) might be divided into sub-forks, and there will be a fork during/after phase 2 to bring in the eth1.0 state/evm into a contract. [Danny Ryan] Q: I'm quoting James' article: \"This means there will be little reason to migrate smart contract code or users until Phase 4 is released, potentially in the mid-2020s\". Does this mean, ETH2.0 wont be usable before 2025? \"ETH2.0 designers do not know what the cross-shard communication system will look like.\" If you're so unsure about the features of ETH2.0, why is it being developed at all? What will be the advantages in daily use compared to EHT1.X? Why should anyone wait till \"the mid-2020s\" to use ETH2.0? A: 2025 sounds... unlikely! I publicly made the prediction (since July 2018) that phases 0, 1, 2 will come in 2019, 2020, 2021 respectively. Scaling from shards will come in phase 1 and phase 2. On the topic of timelines, for phase 0 specifically, ideally the spec should be close to final in Q1, cross-client testnets in Q2, security audits in Q3, mainnet launch in Q4. As a rule of thumb, launching in December is hard because of the holiday season. So November 2019 and January 2020 would be my two best guesses for phase 0. [Justin Drake] A2: I answered a related question here https://www.reddit.com/r/ethereum/comments/ajc9ip/ama_we_are_the_eth_20_research_team/eeufhqb [Danny Ryan] Q: https://hackernoon.com/what-to-expect-when-eths-expecting-80cb4951afcd From the article above, this is what I understand as the timeline of Ethereum 2.0: Phase 0 will be available in year 2020 Phase 1 will be available in 2022 Phase 2 will be available in 2023/24 Given the above timeline, is it fair to say that DAPP's have to wait at least 4 years before they can run their smart contracts on top of Ethereum 2.0? A: Hi! That article is written by an independent engineer that has been following development so it is not necessarily our 1-to-1 opinion. That said, I'm only seeing the following in the article -- \"Which is to say, while ETH2.0 may launch this year, don\u2019t expect ETH2.0 to support asset transfer or smart contracts until at least 2020.\" I agree that assets and smart contracts won't be available in eth2.0 in 2019. At the latest, I expect phase 2 to launch in 2021, but we are building a complex system and can't say for sure what unexpected challenges might arise between now and then. Waiting until 2023/24 is entirely out of the question for phase 2 imo. [Danny Ryan] Q: With eWASM will we be able to write contracts in Rust and/or any language that compiles to WASM in addition to Solidity? Where can one find out more about that and/or potentially help out? Thanks :) A: Yes you will be able to write contracts in any language that compiles to WASM :) I expect specific toolkits/frameworks to spring up in the languages people are particularly interested in (e.g. Rust, go, typescript, etc) to aid in writing contracts in these languages. https://github.com/ewasm/design is a great place to get started. The eWASM team has compiled a ton of info here to understand the project from a high level. https://gitter.im/ewasm/Lobby The eWASM team and broader community congregate in this gitter room and I'm sure would be willing to provide more guidance and answer any questions you have. [Danny Ryan] Q: Hi guys, Would you like to implement an optional decentralized identity layer in the future? like an option to use DID's or something. so the user can use zero knowledge proofs for Dapps that requires some proof of credentials of the user. Greetz A: Decentralized identity systems are definitely very interesting, but imo out-of-scope for blockchain base layers. The good news is that it's a Turing-complete platform, so anyone can build one on top of ethereum (1.0 or 2.0), and yes that are teams working on different approaches to it already. [Vitalik Buterin] Q: What is the one thing on eth 2.0 dev that keeps you up at night? A: In my mind the Ethereum 2.0 abstract design is a remarkably elegant/slick/simple design. I worry that we botch the spec with poor taste in some of the implementation details, or bugs that we miss. [Justin Drake] Q: How will the Eth1.0/PoW chain eventually be migrated over? A: See the bottom of this post https://www.reddit.com/r/ethereum/comments/ajc9ip/ama_we_are_the_eth_20_research_team/eeucd4f tldr, fork into a stateless contract on a shard [Danny Ryan] A2: See https://www.reddit.com/r/ethereum/comments/ajc9ip/ama_we_are_the_eth_20_research_team/eeub9sp/ [Justin Drake] Q: What are the current incentives for a person to run their own beacon node? A: It is a similar set of incentives as why you would run an eth1.0 node -- mining, run applications (block explorer, wallet services, dapp portal, etc), hobbyists wanting direct connection to the network, etc. If you are a validator, you will receive rewards for operating a node and signing consensus messages. If you run some sort of application, it can be beneficial to run a beacon chain to directly sync the shards you need. You also might serve light clients and applications as a business. I fully expect some some entities to experiment with this model. If you are a hobbyist, you might just like running the protocol directly for self-sovereignty :) [Danny Ryan] A2: Financial rewards through ETH inflation. I think Eric Conner has a spreadsheet somewhere. See https://twitter.com/econoar/status/1070713152864583682 for example here\u2014numbers presented here likely on the low side. [Justin Drake] Q: How do the researchers and developers feel about the complexity of ETH 2.0? A: We're definitely trying hard to bring the complexity down! Examples of complexity decreases that we've made in the last ~3 months include: Switching FFG from the \"per-block finalization\" model to a simpler epoch-based model Moving shard committee calculation outside the state Replacing the RANDAO hash onion construction with a simpler BLS construction (and same with the hash onion for proofs of custody) Storing validator state change slots in the validator record, making each validator's state transition process much more understandable Making shard blocks fixed size rather than variable size (which allows removing a lot of boilerplate for handling transitions) That said we recognize that there's still a way to go, and many features of eth2 don't feel neat and clean the way eg. Nakamoto PoW does. I personally hope a medium-term switch to Casper CBC (see https://vitalik.ca/general/2018/12/05/cbc_casper.html ) can mitigate some of that. [Vitalik Buterin] Q: Is there any work being done on reducing the size of the blockchain as it grows? A: You mean the current chain or the 2.0 chain? Since this AMA is primarily about on the 2.0 chain I'll focus on that. The beacon chain state size is bounded, and there are no objects that hang around forever; even validator records disappear once either their balance drops too low or the validators exit voluntarily and then the withdrawal and exit waiting periods pass. On the shard chains, we're looking at ongoing storage maintenance fees for every byte of storage, \"hibernating\" accounts that do not pay up (at which point their users are responsible for storing and maintaining the data needed to revive those accounts if they need them). [Vitalik Buterin] A2: If you are talking about the Ethereum 1.0 chain size there are a number of workgroups in place and some of them deal with decreasing the chain state or slowing down chain state growth. See: https://ethereum-magicians.org/t/meta-ring-to-discuss-and-coordinate-all-ethereum-1x-efforts/2048 https://ethereum-magicians.org/t/ethereum-1-dot-x-a-half-baked-roadmap-for-mainnet-improvements/1995 https://ethereum-magicians.org/t/state-rent-proposal-version-2-rushed/2494 [Hudson Jameson] Q: Inter-shard transactions - how do downstream shards protect themselves against kiting exploits (A- B B- C C- D where the transfer A- B is later challenged)?? I can imagine kiting tumblers that might make this a computationally intractable challenge. A: There isn't really a concept of \"challenging transfers\" in the current spec, and if you mean plain old fraud proofs then the answer is that if a block that was confirmed into a history turns out to be invalid then the entire history from that point on is invalid and should get discarded. [Vitalik Buterin] Q: If I deploy a contract in ETH 2.0 will it randomly be assigned to a shard? A: No. You specify the shard you want. You'll chose based on proximity to contracts of interest, and gas prices. (Each shard will have a separate gas market.) [Justin Drake] A follow-up: Though initial choice is not necessarily irreversible; contracts could be designed to be yanked ( https://ethresear.ch/t/cross-shard-contract-yanking/1450 ) from one shard to another, and I expect a lot of applications will take advantage of this feature. Q: Will there be a software implementation of VDF for those who are unable to obtain the ASIC? Also, will participants in the RANDAO/VDF mix earn rewards in a similar fashion to validators (if at all)? A: Will there be a software implementation of VDF for those who are unable to obtain the ASIC? A software implementation of the VDF would likely be useless for production. The current estimate is that a CPU implementation would be 1,000 to 10,000 times slower than the ASIC. A software implementation would be useful for testing though. will participants in the RANDAO/VDF mix earn rewards in a similar fashion to validators (if at all)? There will be a small incentive for validators to also be VDF evaluators. Other than that we're mostly drawing from external incentives (e.g. as a large ETH holder you have an incentive that Ethereum stays healthy). The good news is that we only need one VDF evaluator to do its job. There will be thousands of VDF rigs given for free to the community. [Justin Drake] Q: Do Quantum Computers pose a permanent threat to ownerless legacy addresses with significant funds and can they cause collisions with old contracts? A: One of the features of Ethereum 2.0 is \"abstraction\", which means that users can specify whatever signature scheme they want. I expect quantum-secure signature schemes to gradually become more popular. Burn addresses can easily be made quantum-secure. Do Quantum Computers pose a permanent threat to ownerless legacy addresses with significant funds Yes, definitely a threat. Ownerless legacy address could be a systemic risk for blockchains such as Ethereum and Bitcoin. Would be interesting to guestimate how much ETH is at risk. Q: ERC20/721 standards' design sucks. Is there any idea or plan to convert current tokens to ERC-1155 like, efficient format? (Code isn't Law. Seriously.) A: I'm hoping that Ethereum 2.0 standards (such as token standards) can learn from the mistakes of Ethereum 1.0 and evolve. Starting from scratch is a unique opportunity in Ethereum's lifetime. [Justin Drake] A follow-up: Agree! There's a lot from ERC20 that I dislike, the main two things being: It being a pull system vs a push system, requiring the whole approve/transferFrom mess to use tokens to pay for things in smart contracts Handling of ETH being so different from handling of tokens Definitely would like to see both issues resolved in 2.0. The other big things I want to \"get right this time\" is (i) multisig wallets and (ii) not having the \"ether used to pay for gas to withdraw funds from a mixer contract being a deanonymization vector\" issue that makes privacy hard at the moment. Q: How soon will staking pools be live when Ethereum staking goes live? A: At the consensus layer we are trying hard to be friendly to decentralised staking pools. Hopefully we will see those soon after the launch of phase 0. The research and implementation work that Dfinity is doing regarding BLS Distributed Key Generation (DKG) will likely help decentralised pools. Centralised staking pools\u2014unlike centralised mining pools\u2014are somewhat awkward because you have to trust the operator to behave properly with your funds. [Justin Drake] Q: If we want to bring our smart contracts to a new chain, could we pre-determine the corresponding starting/ending hex values for the old smart contracts? Kind of reminds me of CREATE2... A: Yes, Eth2.0 will have a CREATE2 equivalent for deploying contracts. As for existing contracts, the entire eth1.0 state will be rolled into a contract on a shard and these existing contracts will be callable via calling into this 1.0 contract targeting the existing contract address. [Danny Ryan] Q: Are there any courses or subjects in uni that one should take to help in becoming a researcher? A: I'd say you need to be a good self-learner. Math, cryptography, computer science, programming, economics, networking are all relevant. [Justin Drake] Q: Of proposed ways to tackle state rent problem, which one is your favorite? What do you think about resulting complexity from user point of view? A: As far as base protocol goes, either option here: https://ethresear.ch/t/a-minimal-state-execution-proposal/4445 The complexity is actually not so much in the rent itself, it's in how it changes the developer experience. The general approach is that application storage will need to be more \"modular\" and explicitly broken down into chunks associated with specific users, possibly with a fixed amount of \"global\" storage, plus some short-term storage not assigned to any user that goes away after some fixed amount of time, eg. 6 months. [Vitalik Buterin] Q: Question for Justin Drake and other VDF researchers: Would using Chainlink and TEEs (Intel SGX) be a viable method of generating secure randomness for the VDF function of Eth 2.0? Could this be used in lieu of specialized hardware? If so, I imagine this could be a substantial time and cost saving measure in the quest for Serenity. A: TEEs can be used to generate randomness using delay. Unfortunately TEEs is trusted hardware. We need a trustless solution :) [Justin Drake] A follow-up: Though I would add that trusted hardware could be a great thing for individual validators to use to increase their security. [Vitalik Buterin] Q: What computer science problems still need to be solved prior to the release of Phase 1? A: For phase 0 we need locally-computable shuffles. For phase 1 we want a custody scheme that is friendly to decentralised pools. Please message me if that sounds like your cup of tea :) [Justin Drake] Q: What happens to the beacon chain in the event of a controversial hardfork on the Eth 1.0 chain? Will two beacon chains form? If not, what mechanism will the beacon chain use to determine which Eth 1.0 chain is the main chain? How will this affect the transition of the Eth 1.0 chain onto a Eth 2.0 shard? What safeguards are in place to ensure that malicious participants do not create unnecessary volatility between ETH BETH during the year long transition from phase 0 to phase 2? It is my view that this trading pair must remain stable for a successful transition to take place. A: If not, what mechanism will the beacon chain use to determine which Eth 1.0 chain is the main chain? By default the beacon chain validators will just use the voting mechanism that's specified in the spec, and whichever chain a majority of the validators support is the chain that the beacon chain will go with. That said, if we want to facilitate a peaceful split, there is a fork versioning feature built in to the beacon chain to make replay protection very easy... [Vitalik Buterin] Q: Why are you not doing \"proper\" research and submit publications to conferences? A: Not really an answer to your question, but Ethresear.ch ( https://scholar.google.co.uk/scholar?hl=en as_sdt=0%2C5 q=\"ethresear.ch\" btnG= oq=\"et ) does get cited :) [Justin Drake] A follow-up: As does the Casper FFG paper! [Vitalik Buterin] Q: Let's say that I have some ethereum locked on a time locked contract, will be available after the 2.0 transition? This question can be expanded to all 1.0 contract functionality after the POS transition A: The Ethereum 1.0 will live on, even after Ethereum 2.0 is fully deployed. See https://old.reddit.com/r/ethereum/comments/ajc9ip/ama_we_are_the_eth_20_research_team/eeub9sp/ . [Justin Drake] Q: Thoughts on this tweet? https://twitter.com/zaoyang/status/1088001513459511296?s=21 A: Eth 2.0 is not really trying to maintain backwards compatibility; almost every part of the design is significantly altered, and old contracts will have to explicitly migrate over to the new system and in some cases rewrite eg. to adapt to rent. [Vitalik Buterin] Q: What's your vision for Eth 3.0? A: STARKs, STARKs and lots of STARKs. Hopefully some nice way to achieve 2 second average block times. Extremely effective cross-shard communication, either at base layer or through a variety of easy-to-use layer 2 systems. [Vitalik Buterin] A2: See https://twitter.com/drakefjustin/status/1072593728253104128 [Justin Drake] Q: In the future how will a really popular DAPP operate? Will it be possible for a single DAPP to operate across multiple shards? If not how will it operate properly with the TX/sec limits on a single shard? Will L2 solutions be the only option? A: A dApp would have to get really big to consume all the resources in a given shard to justify spreading itself over multiple shards. For example, Uber does less than 20 rides per second. A similarly popular decentralised equivalent would likely fit on a single shard, especially when fancy L2 infrastructure is involved (e.g. state channels, plasma, SNARKs/STARKs). [Justin Drake] Q: What is your take on the current state of finding consensus on randomness, in particular the current VDF construction. While certainly clever, I wouldn't say it is very elegant. Do you think this is due to theoretical constraints or do do you see potential for a 'nicer' way? More general, are there any theoretical problems in this space, relevant to Ethereum 2.0 or not, that are just interesting to think about? (starting my PhD soon and looking for inspiration if it wasn't obvious) A: I wouldn't say it is very elegant I'd say VDFs are a super elegant thin layer on top of RANDAO :) Is it the hardware you don't like? If so, would you agree that proof-of-work is an elegant solution? Then think of VDFs as being \"proof-of-work 2.0\": much better randomness at much lower cost. It's a paradigm shift from massively-parallel work to inherently-sequential work. Do you think this is due to theoretical constraints or do do you see potential for a 'nicer' way? I'm not aware of any unbiasable randomness schemes that only have strong liveness, other than VDFs :) are there any theoretical problems in this space, relevant to Ethereum 2.0 or not, that are just interesting to think about? (starting my PhD soon and looking for inspiration if it wasn't obvious) We will have an academic \"VDF day\" at Stanford on Feb 3 to work on open problems. Will you be nearby? [Justin Drake] Q: Shouldn't the smart contract stated in (4) have the ability of sending just 16 ETH for something as RocketPool v2 work (while some consider this to be \"centralization\" I think it will help a lot the average user and mitigate the risk of the average user)? A: You can send between 1 ETH and 32 ETH to the Ethereum 1.0 deposit contract at any time. A minimum balance of 32 ETH on the beacon chain is required for activation as a validator. [Justin Drake] Q: I see a lot of people talking about nodes running in cloud. Shouldn't ETH find a way to actually discourage this? If everybody is running nodes in cloud that means we have possible single point of failure, which is against what I think we are trying to achieve and what enterprise customers are looking to eliminate. A: \"Partial slashing\" and the quadratic leak during times of no-finality actually financially encourage diverse validator setups. Your potential losses are much smaller when your slashable message or validator down-time are discorrelated. Diversity in setup includes -- node software, validation software, local server vs cloud provider (and which cloud if using cloud), geographic region, etc. If a ton of validators all run on AWS and AWS goes down, these validators will suffer large penalty leaks. To guard against this, I should setup my validation node locally or on a less used cloud provider. [Danny Ryan] A2: We do have a way! It's called \"partial slashing\" and the idea is that, if something goes wrong, the more people did something wrong the more everyone gets penalised. So there is an incentive to avoid correlation with other validators, and hence avoid centralisation. [Justin Drake] Q: Can you foresee ever having to move Eth 1.0 to Eth 2.0 in order to avoid losing it forever? A: The current plan is to incorporate the eth1.0 state into a contract on a shard in eth2.0. Note that this will just be a state root and an EVM interpreter along with eth balances. Users will be able to call into this contract by providing merkle witnesses of the required state. [Danny Ryan] Q: I'm a new developer looking into Ethereum, where would you officially recommend I look to develop with an eye toward future proofing? A: A key consideration to future proof your contract code for Ethereum 2.0 is sustainable storage. It's known as \"storage rent\" and \"storage maintenance fees\". [Justin Drake] Q: What do you guys think of the Avalanche consensus mechanism and could it play a role in the ETH roadmap further into the future? A: Avalanche is interesting to me because it's a fresh approach. Looking forward to seeing how it plays out with Bitcoin Cash. Successes there can be ported to Ethereum via L2 infrastructure. [Justin Drake] Q: Is sharding smart contracts theoretically possible? How would one go about that? A: Here's a trivial example: the Ethereum Name Service (ENS) can be sharded across n shards according to the first log_2(n) bits in the domain name hash. [Justin Drake] Q: How does eth 2.0 balance security across shards holding different amounts of notional value in them? For example if there is a decentralized finance shard holding a very high % of eth + other tokens, would the stakers/validators responsible for that shard have incentives to behave badly? A: The key security guarantee of sharding comes from frequently shuffling validators into randomly-sampled committees (known as \"crosslink committees\"). The hope is that this fast shuffling resists bribing attacks, in both the \"honest majority\" and the \"slowly-adaptive rational majority\" security models. [Justin Drake] Follow-up Q: It still seems like an inefficiency where you'd be over-securing shards with low notional value + under-securing shards with high notional value. Am I thinking about this wrong? A: Every shard gets security with the same notional value. Value (validator collateral) gets spread evenly across shards. [Justin Drake] Follow-up Q: Ah think we are speaking past each other a bit, let me try to clarify my concern -- It seems likely you will have wildly varying ratios of (value sitting atop a particular shard / validator collateral securing that shard). So for example a defi shard with 90% of value in eth economy sitting in it only gets 1/1024th of the validator collateral securing it. And an empty or unused shard would get same 1/1024th of total validator collateral securing it. This seems inefficient to me. Depending on how the distribution of value shakes out across shards, potentially materially inefficient? A: This seems inefficient to me. Depending on how the distribution of value shakes out across shards, potentially materially inefficient? Oh I see! Interesting point. We consider every shard equal, and provide high security for all shards. The breakdown of even a single shard (namely, an unavailable or invalid crosslink) would likely be catastrophic for the whole system. [Justin Drake] Q: Will the Beacon Chain require its own nodes? Is this basically a brand new chain that has only one connection to ethereum: Proof of Burn? A: The beacon chain is a new system level chain that houses the validators and manages their responsibilities and rewards/penalties. In many ways this is akin to the FFG contract and sharding contract proposals that were previously deprecated but the organization breaks clean from the EVM to allow for a radically new design and increased efficiency. A node in the future can run the PoW chain and/or the beacon chain. If they run the beacon chain, they can then sync whatever shard chains they want. The connection at first is just an economic connection -- use the existing economics and community to seed validation in the beacon chain. Beyond that, we expect the beacon chain to be used to finalize the pow chain in the short to medium term. In the end, there are a number of proposals to either fork the eth1.0 state into eth2.0. [Danny Ryan] Q: How does Eth 2.0 account for DDOS attacks? If people run nodes at home on consumer hardware with a normal internet connection they can be taken offline easily with DDOS attacks or am I interpreting this wrong? A: It is the responsibility of a validator to remain online to fulfill their responsibilities and gain rewards. A validator can remain profitable if they generally remain online greater than 50-67% of the time. A validator's inactivity penalties are also minimized if their being offline is dis-correlated from other validators. This incentivizes to utilize different node and validation software from the majority so that in the case of a ddos attack vector against a particular node implementation, your offline losses are minimized. The validator's protocol level identity and it's node's network identity are completely decoupled. This allows for a validator to create any type of obfuscated network setup that serves their purposes. I expect many tools and best practices to arise for home validators in the coming months. [Danny Ryan] Q: What are your thoughts on formal verification of smart contracts? Will this be possible with Ethereum 2.0? A: Formal verification of smart contracts is awesome and super valuable IMO. Formal verification will be possible in eth2.0. I believe the WASM semantics are already available in K which will provide some good opportunities for contract verification. Opening up more languages by using WASM will also allow for utilization of more restricted languages that are more amenable to FV. [Danny Ryan] Q: What are some good cypherpunk books that you would recommend to people getting interested in this space? (Or just good book recommendations in general) A: I don't read many books nowadays. I mostly consume academic papers, whitepapers, podcasts, videos, blog posts, Reddit, Twitter, etc. I did enjoy \"Zero to One\" by Peter Thiel when I was an entrepreneur. [Justin Drake] **Q: How do you prevent single shard corruption attacks? Basically will there be resharding? If so, how is resharding done? How are you solving the fast state syncing problem if nodes need to be reshuffled around shards? A: How do you prevent single shard corruption attacks? By randomly shuffling validators across shards. Basically will there be resharding? If so, how is resharding done? Right now crosslink committees are shuffled every epoch (6.4 minutes) and shard proposer committees are shuffled every ~9 days. Crosslink committees are critical, hence why there are shuffled fast. See this answer also. [Justin Drake] Q: You said in a comment some days ago that there are basically no unsolved problems of Serenity Phase 0 left. Which problems of Phase 1 and 2 are still left to be solved? A: The short answer is there are no big fundamental problems for phases 0, 1, 2. The more detailed answer is that for phase 0 we need locally-computable shuffles. For phase 1 we want a custody scheme that is friendly to decentralised pools. For phase 2 we need to figure out sustainable storage. [Justin Drake] Q: Before Eth 2.0 Enhancements come in, what is the best recommended approach for storing private data on Ehereum? A: Storing data on Ethereum is expensive per byte. Infrastructure like Filecoin may prove to be a good trustless storage solution. For privacy, just encrypt the data. [Justin Drake] Q: Will there be any zk-snarks related enhancements coming with Eth 2.0? A: We are hoping to have a SNARK- and STARK-friendly hash function in Ethereum 2.0 at some point. Unfortunately those likely won't be ready for phase 0. At the application layer, WASM will ideally mean that SNARK-specific precompiles won't be necessary. [Justin Drake] Q: Is there some kind of roadmap for the migration from ETH 1.0 to ETH 2.0 in layman's terms? For true decentralization it is required to get more people on board that understand the full process. A: I described the three phases here https://www.reddit.com/r/ethereum/comments/ajc9ip/ama_we_are_the_eth_20_research_team/eeueuzc EthHub also does a great job at simply describing the path https://docs.ethhub.io/ethereum-roadmap/serenity-phases [Danny Ryan] Q: ETH token will not be transferable back after migration to ETH2.0 What will be the token ticker for the ETH2.0 chain native token? A: ETH\u2014at least when Ethereum 2.0 is fully deployed. Fungibility is a key design goal. [Justin Drake] Q: Where does new client software take lists of peers with their ip addresses and ports? Is there is centralized server? A: This is an implementation detail. Some clients may have a hardcoded list of \"bootstrap node\" IPs and ports. [Justin Drake] **Q: Do you have any final plans in mind about the current ETH inflation? A: Nothing final. Ultimately the community will have to make a tradeoff between low inflation and high security. See https://github.com/ethereum/eth2.0-specs/issues/251 . [Justin Drake] Q: What are the odds that a fully sharded chain including state transitions is feasible? A: Very high. No fundamental problems unsolved. The tricky part is getting everything to fit together cleanly. [Danny Ryan] Q: Can I use a raspberry Pi to stake when staking is possible? And what do I do with it in the mean time? A: Nimbus ( https://github.com/status-im/nimbus ) is targeting resource-constrained validators :) [Justin Drake] Q: What's your opinion of EOS (or TRON, STEEM) in terms of dapp platform? A: I tend to be critical of that class of systems. See https://vitalik.ca/general/2017/12/17/voting.html and https://vitalik.ca/general/2018/03/28/plutocracy.html for reasons why. [Vitalik Buterin] Q: Any updates as far as overall inflation rate per year or per milestone/HF? Any updates as far as TPS per year or per milestone/HF? A: See https://github.com/ethereum/eth2.0-specs/issues/251 [Justin Drake] Q: Can I make a Zcash coin on ETH 2.0 for example with all or most of the advantages of Zcash? A: Yes, there are already a number of experiments in eth1.0 to demonstrate usage of ZKSNARKs for both privacy and scalability. Check out miximus for privacy and roll up for scalability (both by barry whitehat!). Usage of ZKSNARKs will be supported in eWASM state execution so I expect more privacy solutions akin to Zcash to continue to be built on eth2.0. [Danny Ryan] Q: Why is ETH 2.0 Phase 0 even needed as a \"main\" chain, and need Bether transform from real ether (hence risk losing some value), instead of doing a testnet only, because after all this is what phase 0 is, based on TestnetBEther? A: ETH 2.0 needs a main chain as a single point of truth for all the shards. The reason we have phases 0, 1, 2 is to break things down conceptually, and in terms of incremental releases to limit risk. [Justin Drake] Q: What work is being done to make the research behind ETH 2.0 more geographically decentralized? Are there any efforts to translate research specifications into other languages? A: Are there any efforts to translate research specifications into other languages? Once the spec is more mature I expect the community to pick this up, somewhat similar to how Andreas's books get translated. English seems to be the a lingua franca for research and development. [Justin Drake] Q: After PoS, if a node gets hacked, can the hacker make the node to lose its stake by confirming false transactions? A: When your validator gets penalised it is automatically deregistered to prevent further damage. We have a mechanism called \"partial slashing\". The idea is that, if something goes wrong with your validator it only gets penalised a bit if not many other validators also mess up around that time. So in the optimistic case of a lone hack you should recover most of your funds with your withdrawal key (kept secure, e.g. in cold storage). [Justin Drake] Q: Will contracts be able to pay for gas in Eth 2.0? A: That will likely be unlocked with abstraction (which includes gas abstraction). [Justin Drake] Q: Assuming the number of network nodes remains the same and the network graduates to full PoS... what is your expected maximum theoretical transaction throughout? A: Rough ballpark figures. 1024 shards * 10 transactions per second per shard ~= 10k transactions per second. [Justin Drake] Q: What is the most updated timeline for rolling out PoS? Since Vitalik already said 'research is done', what are developers' incentives to push things forward? Are there any specific measures taken to ensure a smooth transition? A: I expect the beacon chain (the core PoS chain) to launch late 2019. Ideally the spec should be close to final in Q1, cross-client testnets in Q2, security audits in Q3, mainnet launch in Q4. As a rule of thumb, launching in December is hard because of the holiday season. So November 2019 and January 2020 would be my two best guesses. Having the Ethereum 2.0 chain finalise the Ethereum 1.0 chain will take more time. [Justin Drake] Q: Will it be possible with sharding to have shards with different rules and/or technology independent from the other shards/beacon chain, but still using the same base tech in terms of transacting and security? For example: private eth network run in a shard connected to main eth network from which it takes just security from validators. Private transaction with ZKsnarks shard(s). Encrypted data shards. Erc20 like coin launched on ETH 2.0, but with it's own rules and maybe own shards somehow controlled by the smart contract of that erc20. A: Every shard has the same data availability layer, and the option to use EVM2.0 as an execution engine. That's common base-layer infrastructure. At the application layer contracts can be powered by non-EVM2.0 execution engines (so-called alternative execution engines). There's also a huge L2 design around state channels, plasma, cross-shard communication, etc. So at the application layer I expect lots of non-homogeneity across shards, as well as a lots of homogeneity thanks to standardisation. [Justin Drake] Q: Today, running full nodes isn\u2019t that hard, but the resource requirements are slowly increasing. How much thinking is being devoted to the greater infrastructure requirements of Eth 2.0 and how they will impact node participation and decentralization? A: Ethereum 2.0 validation should be sustainable from a resource perspective: Bandwidth: fixed cost (thanks for fixes shard block sizes) Storage: if not fixed then sustainable (thanks to ideas such as storage maintenance fees). Note that storing shard blocks since genesis is not required. CPU, memory I/O: similar situation to Ethereum 1.0 (gas limit that can be voted up or down). [Justin Drake] Q: How ETH 2.0 differs from ETH, and why POS instead of POW. A: PoS enables goodies such as economic finality and sharding. It is also much cheaper (in terms of inflation cost for hodlers, as well as ecologically) than PoW. [Justin Drake]","title":"Questions and Answers"},{"location":"other/ethereum-2.0-ama/#resources","text":"Source","title":"Resources:"},{"location":"other/ethereum-fundraising-event/","text":"Ethereum Fundraising Event NOTE: This is a working draft! All ideas presented below are just that - ideas. We want to encourage anyone and everyone to submit their own ideas and start discussions around what should happen with regards to funding within Ethereum. Don't be shy! Motivation A recent discussion on Twitter highlighted the fact that teams working on Ethereum scaling solutions aren't able to dedicate their full time to their projects because of funding issues. The Ethereum Foundation gives out grants to many of these teams. Unfortunately, this funding is not sufficient to pay full time salaries over a long period of time and it shouldn't be expected that the Ethereum Foundation fully fund every development team. ETH holders have an incentive to fund these teams as it contributes to the long term success of the network but, currently, there is no formal process for this to occur. Knowing which teams to donate to, what addresses are legitimate and how the funds will be used are a barrier. It seems that there could be a solution to this by running a fundraising event for the entire Ethereum network. Format This type of idea could be accomplished in an entirely decentralized way through a DAO but it's important to remove complexity given the immediate need for funding (due to the active Eth 1.x and 2.0 research). We suggest the following format for the fundraising to occur: Website is created for the event under a name such as \"EthScalingFunding.com\". Ethereum Foundation selects 5 projects they see as the most important for the success of Eth 1.x and 2.0. This will give assurance to donators that every project in the fundraiser is credible. NOTE: This could be done through EthHub or a panel of community members but it may potentially add unnecessary complexity. Every project selected is put on the website with a \"kickstarter style\" pitch for their raise goal and what the funds will be used for. Try to secure donation matching commitments from crypto funds buisnesses. The event runs for 30 days. If entire funding goal is not reached, funds are returned to those that donated. Smart Contract The entire funding initiative is run via smart contract. This contracts core function will be: Direct link to each project's funding wallet Implemented time limit of 30 days from start of funding Knowledge of each project's funding goal in ETH Ability to return funds to donators if funding goal is not reached within 30 days. Ability to unlock funds for project if funding goal is reached within 30 days. Logistics We still need to work on who can own each part of the process: Creation and ownership of the website Selection of the teams up for receiving funds Creation of the smart contract @hex_capital has offered to lead this charge Auditing of the smart contract Publicity and marketing Potential \"advanced\" features NFT given to donator that is redeemable for some future feature. Resources Moloch DAO","title":"Ethereum Fundraising Event"},{"location":"other/ethereum-fundraising-event/#ethereum-fundraising-event","text":"","title":"Ethereum Fundraising Event"},{"location":"other/ethereum-fundraising-event/#note-this-is-a-working-draft-all-ideas-presented-below-are-just-that-ideas-we-want-to-encourage-anyone-and-everyone-to-submit-their-own-ideas-and-start-discussions-around-what-should-happen-with-regards-to-funding-within-ethereum-dont-be-shy","text":"","title":"NOTE: This is a working draft! All ideas presented below are just that - ideas. We want to encourage anyone and everyone to submit their own ideas and start discussions around what should happen with regards to funding within Ethereum. Don't be shy!"},{"location":"other/ethereum-fundraising-event/#motivation","text":"A recent discussion on Twitter highlighted the fact that teams working on Ethereum scaling solutions aren't able to dedicate their full time to their projects because of funding issues. The Ethereum Foundation gives out grants to many of these teams. Unfortunately, this funding is not sufficient to pay full time salaries over a long period of time and it shouldn't be expected that the Ethereum Foundation fully fund every development team. ETH holders have an incentive to fund these teams as it contributes to the long term success of the network but, currently, there is no formal process for this to occur. Knowing which teams to donate to, what addresses are legitimate and how the funds will be used are a barrier. It seems that there could be a solution to this by running a fundraising event for the entire Ethereum network.","title":"Motivation"},{"location":"other/ethereum-fundraising-event/#format","text":"This type of idea could be accomplished in an entirely decentralized way through a DAO but it's important to remove complexity given the immediate need for funding (due to the active Eth 1.x and 2.0 research). We suggest the following format for the fundraising to occur: Website is created for the event under a name such as \"EthScalingFunding.com\". Ethereum Foundation selects 5 projects they see as the most important for the success of Eth 1.x and 2.0. This will give assurance to donators that every project in the fundraiser is credible. NOTE: This could be done through EthHub or a panel of community members but it may potentially add unnecessary complexity. Every project selected is put on the website with a \"kickstarter style\" pitch for their raise goal and what the funds will be used for. Try to secure donation matching commitments from crypto funds buisnesses. The event runs for 30 days. If entire funding goal is not reached, funds are returned to those that donated.","title":"Format"},{"location":"other/ethereum-fundraising-event/#smart-contract","text":"The entire funding initiative is run via smart contract. This contracts core function will be: Direct link to each project's funding wallet Implemented time limit of 30 days from start of funding Knowledge of each project's funding goal in ETH Ability to return funds to donators if funding goal is not reached within 30 days. Ability to unlock funds for project if funding goal is reached within 30 days.","title":"Smart Contract"},{"location":"other/ethereum-fundraising-event/#logistics","text":"We still need to work on who can own each part of the process: Creation and ownership of the website Selection of the teams up for receiving funds Creation of the smart contract @hex_capital has offered to lead this charge Auditing of the smart contract Publicity and marketing","title":"Logistics"},{"location":"other/ethereum-fundraising-event/#potential-advanced-features","text":"NFT given to donator that is redeemable for some future feature.","title":"Potential \"advanced\" features"},{"location":"other/ethereum-fundraising-event/#resources","text":"Moloch DAO","title":"Resources"},{"location":"other/ethhub-cftc-response/","text":"EthHub CFTC Response On December 11th, 2018 the CFTC submitted a public \"Request for Input\" which asks for clarity and answers around Ethereum. The following is a list of all questions asked in the RFI. The following answers were developed on EthHub, an open source, community run information hub for the Ethereum community. From the CFTC: In providing your responses, please be as specific as possible, and offer concrete examples where appropriate. Please provide any relevant data to support your answers where appropriate. The Commission encourages all relevant comments on related items or issues; commenters need not address every question. DEADLINE: February 15, 2019 Purpose and Functionality 1. What was the impetus for developing Ether and the Ethereum Network, especially relative to Bitcoin? It's first vitally important to distinguish between Ether and Ethereum. Ethereum is an open-source, blockchain-based distributed ledger with decentralized control that supports general computing and economic activities. Anyone is able to build and deploy decentralized products and services that run on top of Ethereum by creating highly flexible programmable transactions, called 'smart contracts'. This smart contract technology has proven to be attractive to developers since it enables them to create programs and business logic that run exactly as coded, trustlessly and with no down time. Ether is the native cryptocurrency used on the Ethereum network and is used to compensate miners who secure transactions. A planned upgrade to the Ethereum protocol in 2019-2021 would replace mining with a less computationally expensive Proof of Stake mechanism which will be secured by validators, who are also expected to receive a proportional compensation in Ether. Ether also has many current use cases, such as a store of value (e.g. in lending collateral), a medium of exchange (e.g. in trade and payments), and a unit of account (e.g. in digital marketplaces). The underlying impetus to develop Ethereum and consequently Ether, was to utilize aspects of the technology initially developed as part of the Bitcoin blockchain and combine it with the capabilities of smart contract technology. The idea was that this marriage would lead to a platform that could sustain not only the money or medium of exchange use case, but also to add programability to money, introducing conditional logic to the equation that would open up a world of possibilities with regards to decentralized financial applications and products, and additional decentralized applications. This is contrary to the singular purpose vision for Bitcoin as a simple store of value (pivoting more recently from the original peer-to-peer electronic cash vision championed by Satoshi Nakomoto) and ultimately made necessary by a lack of flexibility in the Bitcoin protocol's scripting language. This was in response to the aversion to adding new features by the core maintainers of the Bitcoin protocol, such as those required to enable Ethereum-like functionality on Bitcoin. 2. What are the current functionalities and capabilities of Ether and the Ethereum Network as compared to the functionalities and capabilities of Bitcoin? The Bitcoin and Ethereum blockchains are currently both secured by a Proof of Work transaction ordering, sybil-control mechanisms and byzantine fault tolerance (BFT) consensus. However, the core difference is that Ethereum offers smart contract functionality enabled by its flexible scripting languages and the Ethereum Virtual Machine (EVM), which is a quasi-Turing Complete virtual machine that compiles smart contract code and enables execution of that code. These smart contracts allow the incorporation of logic based programs that can create unique conditions to the transfer and settlement of Ether transactions amongst counterparties. Because of its ability to support smart contracts, Ethereum enables the development and deployment of digital decentralized products and services that can incorporate complex computational logic. The functionality of the native asset Ether is actually very similar to Bitcoin: 1) Miners who perform computationally intensive work that is crucial to provide secure transaction ordering, block creation which prevents a wide array of failures (e.g. double spending, transaction censorship), are rewarded with Ether issued by the blockchain as a compensation for each block found and added to the blockchain; when Proof of Stake is launched in 2019-2021, Stakers who will take the role of securing the network, will also be incentivised through Ether to secure the network in a somewhat similar mechanism. 2) Ether is used to pay for transaction fees on the network. This serves as a sybil resistance mechanism, and prevents forged identity based attacks, as well as spam and denial of service attack protection. The transaction fees on Ethereum are dynamic, and user-adjustable, which creates an interesting fee market that aids in preventing network congestion. 3) Ether is also used to interact or trigger actions by smart contracts deployed on the Ethereum blockchain. 4) Ether is also traded on several secondary markets. 3. How is the developer community currently utilizing the Ethereum Network? More specifically, what are prominent use cases or examples that demonstrate the functionalities and capabilities of the Ethereum Network? The simplest use case of the Ethereum network is value transfer by sending Ether (which has an attached value) from one person to the other, or by programming value transfers through more complex tools and applications. The amount of decentralised applications being built on top of the Ethereum blockchain is growing at a rapid pace, and the most notable usecases for now are: Decentralized Finance: Currently, the most active applications are those related to \"Decentralized Finance\". As of 12/11/18, there is currently $120,000,000 worth of Ether being used in decentralized finance applications like Stablecoins such as DAI , tokenized debt such as Dharma , margin trading and derivatives dYdX and decentralised exchanges like the 0x . Games: Smart-contracts can be programmed in a way to reflect not only units of account, but also digital representation of game items, such as collectibles like Cryptokitties , cards like in Zombie Battle ground or even Digital (VR) property such as Decentraland . The fact that items exist on the Ethereum blockchain, and not on the siloed databases of each individual games, makes them more exchangeable, and guarantees the right of ownership of such items regardless of the existence of the actual game/project developers. Noting that the above are just examples of many others and were just listed here for illustrative purposes. 4. Are there any existing or developing commercial enterprises that are using Ether to power economic transactions? If so, how is Ether recorded for accounting purposes in a comprehensive set of financial statements? There are commercial start-ups currently using Ether as a medium of exchange and unit of account in their existing business model. For example, Fuel Games is presently charging some 4200 customers a fixed price in Ether to purchase its unique playable digital trading cards, which upon final sale become provably owned by the customer in a cryptographically verifiable way. At present, over 11,000 Ether has been paid to Fuel Games in exchange for these products. The digital cards, while being collectible and tradable, are primarily intended for use as in-game assets within Fuel Games' video game called Gods Unchained, currently in closed beta. As part of their business model, Fuel Games plans to release new playable card sets 3-4 times a year and charge for them in Ether. While the pricing for these products is currently denominated in Ether, Fuel has announced plans to have the price pegged to a fixed price in dollars. To incentivize consumers to play with the cards, the business has promised that 10% of sales will go towards the US dollar prize pool of an international tournament event they are organizing in 2019. To limit their forex risk, Fuel Games has reported that they regularly convert a portion of their Ether holdings into a stable currency. The above example demonstrates some of the economic transactions produced by a startup. In just this one case, a business is collecting payments in exchange for a digital product they are making, where 10% of that payment is being tracked and liquidated for use in another financial obligation. It has not been divulged how private businesses like Fuel Games might be managing their internal accounting, but there are standards which one might reasonably assume they are following. For example, the Financial Accounting Standards Board classifies native cryptocurrencies, including Ether as indefinite-lived intangible assets under ASC 350 in their report titled Financial Reporting Alert 18-9 \u2014 Classification of cryptocurrency holdings . Ether, like other cryptocurrencies, meets the definition of an indefinite-lived intangible asset. Using the intangible-asset model results in holdings of cryptocurrencies being recorded at the cost of acquisition, subject to impairment. That is, the model should only capture declines in the value of the cryptocurrency, not increases. When Ether is purchased, the intangible asset would be measured at the price paid or consideration given to obtain the cryptocurrency. However, the question for miners in Proof of Work or validators in Ethereum's proposed Proof of Stake design is more complicated. Unlike a direct purchase, miners and staked validators are awarded Ether as a reward for ordering transactions and securing the network, but they incur costs of computing equipment, electricity, devops and other expenses. At issue for the miners or staked validators is whether the associated costs should be capitalized as an intangible asset or expensed. While Ether may fit into the existing model for intangible assets and appear as such in the companies balance sheets, a simpler, and potentially better model for representing the economics associated with holding or using Ether is the fair value measurement model, with both realized and unrealized changes reflected currently in the income statement. It can also be noted that the Enterprise Ethereum Alliance is a large group of commercial enterprises dedicated to developing enterprise use cases and building out standards frameworks for Enterprise Ethereum. Additionally, though non-commercial, the United Nations International Children's Emergency Fund's Kazakhstan branch and the UNICEF Innovation Fund is piloting an effort utilizing the Ethereum blockchain to provide tracking and traceability for transactions between UNICEF and partners to enhance transparency and efficiency of how UNICEF deals with its implementing partners on the ground ([http://unicefstories.org/2018/09/26/project-opportunity-build-a-smart-contract-prototype-for-unicef-kazakhstan-to-track-results-for-children/](http://unicefstories.org/2018/09/26/project-opportunity-build-a-smart-contract-prototype-for-unicef-kazakhstan-to-track-results-for-children/%29). 5. What data sources, analyses, calculations, variables, or other factors could be used to determine Ether\u2019s market size, liquidity, trade volume, types of traders, ownership concentration, and/or principal ways in which the Ethereum Network is currently being used by market participants? There are a plethora of publicly available tools, websites, and APIs that this type of information can be obtained from. Exchanges such as Coinbase aggregate trading data and metrics for each blockchain whose native cryptocurrency they have listed. Additionally, free and open source tools such as those provided by coinmetrics.io, etherscan.io, and Santiment, or paid tools such as coinfi.com, Diar Newsletter, and other Ethereum blockchain tools and services monitor and provide metrics. These metrics include the concentration of wealth in Ethereum by wallet address, individual account information including all send and receive transactions (and in some cases available ownership information), daily transaction volume measured in total Ether and USD value equivalent, average block time, average block size, number of nodes connected to the network, current network transaction fees, most active addresses and smart contracts, smart contract internal transaction monitoring, amount of Ether or USD value equivalent stored or transferred by decentralized applications and associated smart contracts, subjective user activity metrics, and more market focused metrics tracking price trends, market cap, total and available supply, liquidity, etc. 6. How many confirmations on the Ethereum blockchain are sufficient to wait to ensure that the transaction will not end up on an invalid block? A user must only wait 1 block confirmation for their transaction to be validated and confirmed. However, there is a risk of hash power related attacks to the network (e.g. 51% attacks) that could potentially result in double spends or the block a transaction was originally included in being orphaned (abandoned in its own version of the chain that is not accepted by the network) and thus censored by a large hashrate owning miner or group of miners attacking the network. However, because Ethereum, like Bitcoin, is probablistic by nature, the probability of such an attack decreases with every block confirmation, as the cost to aquire the hashrate necessary to attack the network increases substantially until it becomes uneconomical. Because of this, some merchants may wait a pre-selected amount of confirmations, such as 6 block confirmations for Bitcoin with its 10 minute block time (~1 Hour) or 30 for Ethereum with its 12-14 second block time (~6 mins) in order to avoid this risk. \"An analysis by Vitalik Buterin on PoW block times and their affects on transaction finality and security can be found here: https://blog.ethereum.org/2015/09/14/on-slow-and-fast-block-times/ .\" Technology 7. How is the technology underlying Ethereum similar to and different from the technology underlying Bitcoin? From a high level, Ethereum is similar to Bitcoin in that it uses a 'blockchain' and uses 'Proof of Work' to achieve consensus and secure the network. Both blockchains have a native digital asset - Ether (ETH) for Ethereum and Bitcoin (BTC) for Bitcoin. The Ethereum network is a turing-complete blockchain. This means that it is capable of executing arbitrary code - known as smart contracts. The ability to run code on the Ethereum blockchain means that developers can build applications on top of it. One such application, MakerDAO, allows users to use their ETH as collateral to take out a loan denominated in a USD-pegged stablecoin (known as DAI). Applications are all interoperable within the confines of the Ethereum network. Ethereum acts as a common protocol for all decentralized applications built atop, in the way that TCP/IP acts as a common protocol for all public web-based applications. It is not strictly limited to being used as a settlement layer as Bitcoin has become. Ethereum 2.0 (Serenity) is a substantial upgrade for the Ethereum network being deployed in multiple phases. The main features in this upgrade include a move to a novel Proof of Stake system known as Casper (for securing the network), sharding (for scaling the network) and eWASM (a new virtual machine for the network). These upgrades and new features are developed by a decentralized network of core developers spanning 8 individual Ethereum software client teams, the non-profit Ethereum Foundation, and additional volunteer developers and researchers from around the globe. 8. Does the Ethereum Network face scalability challenges? If so, please describe such challenges and any potential solutions. What analyses or data sources could be used to assess concerns regarding the scalability of the underlying Ethereum Network, and in particular, concerns about the network\u2019s ability to support the growth and adoption of additional smart contracts? The Ethereum Network faces scalability problems similar to Bitcoin and other decentralized blockchains. Where some other blockchains have traded off decentralization, trust minimization, and security in favor of throughput (transactions per second) both Ethereum and Bitcoin were created on the principle of maximum decentralization and security above all. It is a trade-off as identified in Vitalik Buterin's trilemma for blockchain scalability ([https://bitcoinist.com/breaking-down-the-scalability-trilemma/](https://bitcoinist.com/breaking-down-the-scalability-trilemma/%29) It's important to understand the basics of how the Ethereum blockchain functions before diving into scaling. Every transaction cost a certain amount of \"gas\", which is the cost, in computational power, to execute a transaction (denominated in Ether). Every block processed on the network has a cap on the amount of gas it can hold (the \"gas limit\"). This is because if blocks get too large, there are issues with the way they propogate across the network which increases the likelihood of an incidental fork (chain split) as well as storage and initial syncronization issues. Currently, the Ethereum network sits at max capacity in terms of gas used every day, though recent optimizations in the most widely used clients, Parity Ethereum and Go Ethereum, now enable the block gas limit (and by extension the computational throughput of the network) to be increased safely if the mining nodes, and researchers so agree. This is how Ethereum plans to tackle the scalability issue beyond just the block gas limit: 'Layer 1' refers to the main Ethereum network/blockchain. 'Layer 2' refers to technologies built on top of (or above) the main Ethereum network/blockchain. 'Interoperability' refers to the use of other blockchains. A decentralized network of open source developers are addressing Ethereum's Layer 1 scalability challenges by introducing a mechanism borrowed from traditional databases - 'sharding'. Sharding takes the blockchain and splits it up into multiple blockchains (that can communicate with eachother) so that transactions and computations can be processed in parallel, and then finalized to one larger ledger of record (known as the beacon chain). An ecosystem of project teams, decentralized application teams, traditional companies, and open source developers are addressing Layer 2 scalability challenges on Ethereum through the use of multiple technologies. These technologies include sidechains (such as Plasma), state channels, and interoperability chains and bridges that outsource some transacting to other, compatible blockchains and utilize Ethereum strictly as a settlement layer. 9. Has a proof of stake consensus mechanism been tested or validated at scale? If so, what lessons or insights can be learned from the experience? Proof of Stake (and Proof of Work) aren\u2019t consensus mechanisms - they are sybil-control mechanisms. They need to be coupled with a protocol such as BFT (byzantine fault tolerance) to achieve consensus. There are different types of Proof of Stake (PoS). DPoS - Delegated Proof of Stake LPoS - Liquid Proof of Stake Casper FFG (friendly finality gadget) DPoS has inherent flaws as it tends to centralize the system over time (to what is commonly referred to as a plutocracy). Unfortunately, DPoS suffers from poor distribution of coins and small holder voter apathy, and thus is a honeypot for cartel formation. Additionally, DPoS chains rely heavily on extra-protocol social and political mechanisms to promote \"honesty\" such as a constituion or block producer agreements which are not enforceable under any jurisdiction and are instead good faith agreements or hand shake agreements to operate in the best interest of the network. Ethereum's Proof of Stake mechanism (known by the common name of Casper) is fundamentally different and intends to maximize decentralization by incentivizing hundreds of thousands of validators to participate in securing the network versus a small subset of voted on delegates. There are currently multiple projects that employ the Proof of Stake consensus mechanism. There have been many lessons learned from these deployments including potential attack vectors, such as the \"nothing at stake\" problem. Ethereum researchers have taken these lessons learned and incorporated them into their design requirements. For example, Casper Proof of Stake addresses the nothing at stake problem by enforcing a set of pre-defined conditions and rules that if violated by a malicious party will result in the \"slashing\" of their staked Ether as a penalty. For example, if a validator proposed a different version of the blockchain versus what the remaining honest nodes have reached consensus on, that validator is slashed a portion of their staked Ether as a punitive measure. This discourages attacks as their stake ironically becomes something at stake. 10. Relative to a proof of work consensus mechanism does proof of stake have particular vulnerabilities, challenges, or features that make it prone to manipulation? In responding consider, for example, that under a proof of stake consensus mechanism, the chance of validating a block may be proportional to staked wealth. Ethereum's Casper Proof of Stake will function on the basis of validators, each of which will stake 32 Ether. Users are able to run multiple validators but their computing cost will increase as well (it should be noted that there is a cost to running a validator in Casper Proof of Stake including the cost of computational resources, the cost of high availability and devops, and the opportunity cost and risk of locking value in the stacking system when that wealth could be used elsewhere). A validator will be randomly chosen to propose a block and then a committee of users (at least 111) will attest that validator acted properly. If so, the block will be validated and the validator rewarded. If not, the validator's deposit will be slashed and be lost. If an attacker gained 51% of all Ether they could attempt to attack the network but mechanisms in place make it likely that they will still be slashed. At current Ether price, this attacker would be risking $4,300,000,000 to do so and if caught could lose it all. The cost to aquire 51% of the Bitcoin hash rate is much less. As noted previously, Casper Proof of Stake addresses the \"nothing at stake\" problem suffered by previous Proof of Stake based blockchains by enforcing a set of pre-defined conditions and rules that if violated by a malicious party will result in the \"slashing\" of their staked Ether as a penalty. Additionally, Ethereum enjoyed the benefit of initial Proof of Work based distribution versus other Proof of Stake-based chains. This provides greater guarantees for wealth distribution and preventing a single entity from amassing a disproportionate amount of Ether which could grant them a supermajority of the stake weight and thus the block validity vote. 11. There are reports of disagreements within the Ether community over the proposed transition to a proof of stake consensus model. Could this transition from a proof of work to a proof of stake verification process result in a fragmented or diminished Ether market if the disagreements are not resolved? The roadmap and community consensus is very clear when it comes to the switch to proof of stake. There are active conversations occuring about the logistics and mechanisms of the proof of stake transition but wanting to stay on proof of work is not something actively discussed by any significant portion of the Ethereum community. At any point, a user can attempt to fork or stay on the current proof of work chain but the incentive will be very little once proof of stake is live because the users of the network see many positive network effects from the updated proof of stake version of Ethereum. These include: scalability by also enabling sharding which requires the transition to Proof of Stake, a more solidified monetary policy, the ability to work as a validator securing the network and earn by using your stake as collateral for remaining an honest party, and a greater ecosystem of decentralized applications that can take advantage of both the economic state and scalable state of Ethereum. It is worth mentioning that Ethereum has only seen one contentious fork in its lifetime following the \"DAO hack\" and subsequent recovery effort. This was driven partially by a split in the community based on values, which is a natural progression in blockchains /(see Bitcoin Cash, Bitcoin Cash ABC, Bitcoin Cash SV, Bitcoin Diamond, which are all community values driven forks of Bitcoin/). 12. What capability does the Ethereum Network have to support the continued development and increasing use of smart contracts? Ethereum currently supports the most active and largest ecosystem of developers globally. In addition to the core protocol developers and the massive ecosystem of decentralized application developers building and testing on Ethereum, there are currently 8 client teams developing individual client implementations for Ethereum which makes the network more decentralized, robust, and secure. A network with a reliance on a single client implementation becomes a single point of attack or failure (see CVE-2018-17144, the Bitcoin Core client bug that represented a High risk vulnerability affecting Bitcoin's security and monetary policy, present in 95% of Bitcoin nodes due to the reliance mostly on the single client implementation). Additionally one only needs to visit sites such as edX.org or Udemy.com to view the incredible amount of solidity and vyper smart contract development courses enthusiasts have created, or to Indeed.com to see the increasing number of positions related to Ethereum and smart contract development. Governance 13. How is the governance of the Ethereum Network similar to and different from the governance of the Bitcoin network? The Ethereum governance process, at least in regards to software updates and development, is similar to Bitcoin's in that it uses a public Github repo to track development from proposal to implementation. In Bitcoin, this is referred to as the Bitcoin Improvement Proposal or BIP process, and in Ethereum it is the EIP process. Where the two differ is in the openness to feature additions, layer 1 improvements, and the way in which those upadtes are discussed, weighed, and proposed. Ethereum seeks to be an inclusive forum for all stakeholders, which would be defined as anyone who believes they would like to contribute to the governance or development of the Ethereum network (Ether holding not required!). Therefore there are several different layers of governance in Ethereum. Ethereum utilizes rough consensus to gauge the greater community feedback and acceptance of proposals. Various tools are also used for signal measurement such as coinvotes, polling, surveys, and general sentiment gauging attempts across a multitude of social media platforms. There is not a central governing body for Ethereum, but rather an approach similar to the IETF in which various forums and working groups have been designed to review, discuss, and guage general community sentiment for each proposal. These forums inform consensus amongst the core developers to inform whether changes should enter the EIP process for technical review, or if further discussions and consensus is needed. Ultimately, these processes are simply to guide development and improvements to the nework, as the decision whether or not to approve or accept the updates and changes lies with the thousands of collective users running nodes on the network. Nodes may choose to run or not to run code they agree or don't agree with. That is the noderunners prerogative as the protocol's rules enforcers. If nodes choose not to update, the chain will continue without the added features or changes and is considered rejected by the community. If the nodes choose to update with no contention then the changes are considered accepted by the community. If the nodes are split by their beliefs and values, two chains may emerge if the differences cannot be reconciled. This is a natural expression of free will and decentralization in blockchains, as the communities are allowed to split and run the coded rules that support their interests. Finally, the market provides the final validation of these changes as the market and its participants will determine the value of each resulting blockchain, and its associated currency, if any. 14. In light of Ether\u2019s origins as an outgrowth from the Ethereum Classic blockchain, are there potential issues that could make Ether\u2019s underlying blockchain vulnerable to future hard forks or splintering? Ether was not an outgrowth of the Ethereum Classic blockchain. Ether, the cryptocurrency, was born out of the genesis block of the Frontier blockchain, the first iteration of the mainnet Ethereum blockchain. In March 2016, the Ethereum blockchain hard forked again to add additional features and optimizations to the Homestead chain, the next iteration of the Ethereum blockchain. In July of 2016, following the exploit of a vulnerability found in a smart contract called \"The DAO\" which resulted in substantial loss of Ether to a bad actor, the Ethereum blockchain was hard forked again to include an \"irregular state transition\" that recovered the stolen Ether and returned it to the initial owners (it should be noted that the history of the blockchain remains 100% in tact and no transactions were censored or removed. Funds were moved via irregular state transtion from the hacked DAO child contracts and remaining DAO child contracts to a recovery contract that users could claim their Ether back from to undo the damages caused by the bad actor). Most in the Ethereum community elected to support the hard forked chain by upgrading their nodes. This chain became the chain we knew under the ticker ETH. A minority elected to remain on the unchanged chain in which the bad actor retained all of the stolen Ether under the ideological belief in 'code is law.' This chain was expected by the community to disappear over time like the old Frontier chain since only a small minority of nodes were supporting it still, and it had not received support from any exchanges, and thus had no value in the market. Poloniex (one of the largest exchanges at the time) listed the Ethereum Classic chain (the minority chain) and it gained a small share in the greater cryptocurrency market. It has continued on to this day under the ticker ETC building its own support from a small group of likeminded developers and community members operating the network under the ethos of 'code is law.' As for predicting future hard forks or chain splits, each hard fork carries with it the possibility that the cast off, minority chain gains value in the market if listed by an exchange and raises some support because of it. Blockchains are not insulated or isolated from politics. Bitcoin is inherrently political and relies on social contracts to ensure its system remains unchanged, which is what drove the Bitcoin Cash community away, and subsequently split that community into Bitcoin Cash ABC and Bitcoin SV. It is possible Ethereum will endure another contentious issue that could result in community members opting to go their separate ways by running the code that better promotes their interests, but this is not something to be feared. This is the value of decentralization and the freedom to choose the rules that support your values, interests, and opinions best. Markets, Oversight and Regulation 15. Are there protections or impediments that would prevent market participants or other actors from intentionally disrupting the normal function of the Ethereum Network in an attempt to distort or disrupt the Ether market? Ethereum currently secures billions of dollars in value using open-source code, so the security of the platform is an utmost concern to both developers and the general community. This vigilance has been warranted, given that the platform has experienced availability attacks, smart contract bugs, and ideological disagreements in governance. Through these challenges, the Ethereum platform has demonstrated that its multiple layers of protection can effectively secure value. Ethereum\u2019s defenses can be broadly categorized into four layers: well-written code, security-optimized system design, cautiously implemented crypto-economics, and effective governance. Well-written code serves as the first line of defense. Ethereum developers have taken many steps to write secure code such as using battle-tested encryption methods, sharing secure design patterns, and implementing rigorous reviews and testing processes. Their efforts are not perfect, and mistakes often lead to significant consequences such as mistakenly locking up Ether forever or having Ether stolen due to security bugs. Even so, the uninterrupted operation of Ethereum since the Frontier launch in 2015 has shown that the system can remain operational despite these flaws. Beneath the code, Ethereum\u2019s security-optimized system design provides a second line of defense. The pieces of Ethereum work together in a way that minimizes the chance that a fault in one area will have systemic consequences. For example, the application layer is separated from the base protocol layer such that, if a smart contract proves faulty, it will not jeopardize the safety of the network. The well-publicized DAO attack is one great example. Even though an attacker had hacked a smart contract holding about a sixth of all available Ether, a sizeable minority argued that the platform did not need to make a protocol-level change to fix the issue. This position would not have been viable if the application layer was at all connected to protocol functionalities. Another important system design decision is the encouragement of multiple clients with multiple versions that all sync to the same Ethereum blockchain. There have been numerous examples of how bugs in a blockchain\u2019s client software can cause potentially critical failures in the system. Unlike Bitcoin, Ethereum has two major clients (geth and Parity) for its Proof-of-Work system that prevent bugs in one client from becoming systemic issues. The ecosystem\u2019s security will improve further in this regard under Proof-of-Stake, where 8 new clients are under development. After system design, a cautious implementation of crypto-economics serves as a third line of defense for Ethereum. Crypto-economics is defined as the usage of economics, cryptography, and game theory to design systems that generate predictable outcomes given certain assumptions. Ethereum\u2019s code and system design use crypto-economics to ensure the network\u2019s security. Bitcoin\u2019s Proof-of-Work system pioneered this type of design (which Ethereum largely uses), while Ethereum\u2019s new Proof-of-Stake system offers significant improvements. Proof-of-Work likely needs no introduction; in the 10 years since the introduction of Bitcoin, no one has successfully broken the system. Ethereum\u2019s Proof-of-Stake improves on security by introducing new concepts such as staking and slashing, which increases the economic cost of attacking the network as compared to Proof-of-Work. As explained elsewhere, making a switch in consensus system entails significant risks. A failure within the code or the system design might provide short or medium-term inconveniences to the network, but a failure of crypto-economics in the consensus system potentially threatens the network\u2019s survival. To mitigate this risk, Ethereum researchers have designed a conservative, staged approach that migrates network activity to the new system without jeopardizing the old system. This approach minimizes the chances that flaws within the Proof-of-Stake system that may otherwise make the Ethereum platform unusable. The final and most enduring source of resilience for Ethereum is its effective governance. Since the Ethereum yellow paper was first published in 2014, the community has grown from a small group of visionaries to a network of hundreds of thousands of technologists and enthusiasts around the world. During that time, it has only improved in its ability to act as effective custodians to the value secured by the network. An example of the community\u2019s growth comes from how it handled a broken smart contract written by Parity. On November 6, 2017, a bug in Parity\u2019s wallet smart contract caused it to permanently lock away $300 million of community funds. While this bug did not affect as many people as the DAO hack, it directly impacted Parity, a development group which was responsible for the second biggest client that runs Ethereum. When Parity proposed a solution somewhat similar to how DAO hack was resolved (a fix submitted through a hard fork), the community quickly concluded that such a solution was not in the best long-term interests of the network. Right or wrong, the community showed the ability to decide quickly on a potentially controversial topic. As a result, this incident ended up causing little visible impact to the value of Ether. Within the community, the Ethereum protocol developers have shown an exemplary capacity to put the long-term interests of the network ahead of short-term goals and personal ambitions. The recent decision to combine the development of Proof-of-Stake and Sharding illustrates this ongoing commitment. Originally, developers of Proof-of-Stake and Sharding had been working separately to design their respective solutions. Through the course of their research, it quickly became clear that a combined solution would be more secure and less complex. Of course, working together would come with the inevitable result of scrapping their existing work and delaying the timelines for release, but the developers quickly aligned on the new approach with minimal disagreements. Their willingness to change course exemplifies the community ethos to subordinate short-term rewards to long-term value-creation. Ethereum has operated uninterrupted for three years as a decentralized blockchain. With continued improvements to coding practices, system design, crypto-economics, and governance, the community looks to keep the network running for decades to come. 16. What impediments or risks exist to the reliable conversion of Ether to legal tender? How do these impediments or risks impact regulatory considerations for Commission registrants with respect to participating in any transactions in Ether, including the ability to obtain or demonstrate possession or control or otherwise hold Ether as collateral or on behalf of customers? Ether can be converted to legal tender in two ways: directly via sale on an exchange or indirectly via a sale to another cryptocurrency and then to an exchange. Regarding a direct sale into fiat, Ether faces the same challenges as any other cryptocurrency: volatile price changes and immature exchanges that offer fiat-to-Ether conversion. Both factors contribute significant risk to the acquisition and holding of cryptocurrencies. As exhibit 1 shows, [Add data on volatility of Ether vs. S P 500 and crude oil] volatility in Ether far outstrips the S P 500 and even commodities like crude oil. Ether\u2019s volatility is not unique among cryptocurrencies. In fact, as exhibit 2 shows [add data comparing volatility with Ether, Bitcoin, and general crypto market], it\u2019s actually one of the least volatile cryptocurrencies. These dramatic swings in price make it difficult to both determine adequate collateral requirements and acquire said collateral. While these large fluctuations may recede as the cryptocurrency market matures, there\u2019s little concrete evidence that points to this outcome, suggesting that handling volatility will be a key consideration of maintaining collateral in Ether going forward. Beyond price volatility, Ether also must deal with a collection of exchanges that have limited operating experience, diversification, and liquidity. Five major platforms have the licenses to exchange USD with Ether: Coinbase, Kraken, Bittrex, Gemini, and Circle (operates an OTC market). The oldest of these exchanges is only seven years old (Kraken), and all of them entirely rely on revenue generated from cryptocurrency markets to operate. Furthermore, these exchanges have experienced \u201cflash crashes\u201d which cause forced liquidations for those on margin. On June 21, 2017, the price for Ether on Coinbase went down from $319 to 10 cents in a matter of minutes. Kraken has also faced a flash crash in May 2017, and it now faces a class action lawsuit for misconduct. Given the nascent markets for cryptocurrencies and longstanding laws for KYC/AML, these exchanges play a vital role in allowing investors to legally exchange Ether with USD. Even so, until their performance is tested in more market cycles, an unexpected shutdown to their operations via technical problems or business insolvency remains a significant risk to the purchase and holding of Ether. Granted, one significant caveat to the risks presented above is that investors can easily exchange Ether into other cryptocurrencies via an array of traditional exchanges, decentralized exchanges, and other services. The exchanges mentioned above all have ETH/BTC trading pairs as do crypto-to-crypto exchanges. In fact, the volume of ETH/BTC transactions on crypto-to-crypto exchanges often outstrip the volume of ETH/USD transactions on Coinbase, the largest US provider. Thus, when considering the liquidity of Ether, it\u2019s important to account for the ability to exchange any cryptocurrency (particularly other liquid ones such as Bitcoin) to USD as a secondary source of liquidity. It\u2019s also important to consider the risks that some of these providers represent to the ecosystem. Exchanges which don\u2019t have regulated fiat on-ramps often are unaudited, lack proper licenses, and conduct questionable practices such as volume spoofing (An analysis of fake volume: https://medium.com/@sylvainartplayribes/chasing-fake-volume-a-crypto-plague-ea1a3c1e0b5e ). These exchanges deserve further scrutiny to protect investors and institutions alike from potential misconduct. The emergence of stablecoins offers an array of opportunities and risks as well. A stablecoin is a cryptocurrency that has a value pegged to a real-world asset such as USD. These coins facilitate the exchange of USD and Ether by ensuring transactions are easier to track, atomic (Ether only is received if USD is sent), and cheaper/faster to send via state channels. Coinbase and Circle, two prominent firms authorized to trade USD/ETH, have launched an Ethereum-based coin pegged to USD called USDC to achieve this purpose ( https://www.centre.io/pdfs/centre-whitepaper.pdf ). Gemini has a similar coin call the GUSD ( https://gemini.com/dollar/ ). Separately, the MakerDAO group has released a token called DAI on Ethereum which achieves the USD peg via a decentralized system of smart contracts and collateralization ( https://makerdao.com/whitepaper/ ). The emergence of stablecoins has significant implications for regulatory considerations on Ether. On one hand, it offers opportunities for traditional cryptocurrency exchanges to increase liquidity, reduce volatility risks, and compliance to KYC/AML regulations via its transaction logging (e.g. all transactions exchanging USDC for ETH would be recorded on the Ethereum blockchain). It also opens the door to new types of decentralized exchanges which can facilitate these transactions without trusting a centralized exchange, thereby circumventing the risks enumerated above about both regulated and unregulated exchanges. On the other hand, stablecoins pose risks to effective regulation given that the main sources of Ether liquidity may not happen on venues where the US government has clear jurisdiction (e.g. decentralized exchanges). While the technologies behind stablecoins and decentralized exchanges are still nascent, it\u2019s important to consider these possibilities when thinking about future regulations. 17. How would the introduction of derivative contracts on Ether potentially change or modify the incentive structures that underlie a proof of stake consensus model? A liquid and well-regulated derivative contracts market has the potential to improve the robustness of proof-of-stake incentive structures by removing unwanted risk from staking Ether. To understand the impact of making more hedging options available for Ether holders, it helps to first understand how staking works. Holders of Ether can choose to lock up their Ether in a smart contract, which gives their node the ability to propose blocks of transactions and collect awards from those transactions. The locked up Ether acts as a \"stake\" which can get taken away (\"slashed\") in the event that their node proposes invalid blocks or withholds information. Staked Ether comprises a critical part of the Proof-of-Stake consensus model, meaning that the network must pay holders of Ether enough to merit a minimum amount staked and keep the network operational. While network rewards holders for performing a critical function, it also must compensate stakers for the market risks associated with holding a volatile asset. Given that the price of Ether can change significantly from day to day, it's reasonable that the average Ether holder values the ability to sell their holdings at will. This is not possible if they stake their Ether. Not only must the staked Ether stay within the contract for the duration that it's staked, the holder also must abide by a holding period upon deciding to withdraw. The inability to hedge these risks would reduce the number of entities/people willing to stake their Ether and penalize the network by requiring higher rewards for stakers. Well-regulated derivative contracts on Ether would give Ether holders cheaper ways to hedge the risks of staking Ether. Currently, the only method to hedge these risks is to short-sell Ether on an exchange. Short-selling has limited utility because it relies on the availability of loaned Ether and the continued desire from the loaner to keep the Ether on loan. Derivatives such as futures and options have no such issues beyond the liquidity of the contract. Derivatives also provide new ways to hedge risks. Beyond selling futures instead of short-selling, they can also engage in more sophisticated strategies such as covered call writing or protective collars. Finally and perhaps most importantly, derivatives require less capital lock-up than short-selling for hedging due to their implied leverage. As such, the introduction of derivative contracts on Ether would decrease the risks of holding Ether for a given length of time, thereby increasing willingness in holders to stake Ether and decreasing the costs on the network to pay stakers. Of course, introducing a derivatives market has certain risks as well. The biggest risk is encouraging undue speculation. Speculation makes hedging cheaper, but it also can cause the spot price of Ether to deviate from the fundamental growth rate of the ecosystem. Miners are incentivized to provide network security by recieving fees in Ether. Therefore, as with Bitcoin, if derivative markets could be used to manipulate markets and cause large decreases in price, mining security could be impacted. While the jury is still out on whether the introduction of derivatives increases volatility and deviations from fundamental valuations on underlying assets, some measures could be implemented to control speculation, which are discussed in the following answer. Even so, given the practical needs for hedging the holding risk of Ether due to staking, the introduction of a well-regulated derivatives market would still augment the incentive structures in Proof-of-Stake despite the risks. 18. Given the evolving nature of the Ether cash markets underlying potential Ether derivative contracts, what are the commercial risk management needs for a derivative contract on Ether? Existing risk management practices governing commodity derivative markets provides a useful framework for Ether derivatives. In particular, stringent monitoring of position limits would be warranted. If an individual or entity can trade contracts with notional amounts that exceed the amount of staked Ether, they can theoretically profit from a 51% attack on the network, which the Proof-of-Stake consensus model is supposed to prevent. One recommendation is to tie position limits to a fraction of staked Ether. Such measures would mitigate the risk that parties could collude to successfully attack the network. Another potential concern is the physical settlement of contracts with Ether. Given the developing nature of cash markets for Ether, there is a risk that the overreliance on physical settlement will cause artificial irregularities in the price of Ether. As explain in answer #17, the security of Ethereum does hinge on the price of Ether, so artificial irregularities in price can increase the risk of opening an attack vector on the network. As such, another recommendation is to keep settlements of Ether in cash. Otherwise, existing measures to control risk for commodity contracts should prove sufficient for Ether derivative contracts. While Ether operates as a currency-like asset, its volatility and risk factors better reflect a commodity at current valuations. Exchanges would be prudent to apply similar limits to leverage and open interest accordingly. 19. Please list any potential impacts on Ether and the Ethereum Network that may arise from the listing or trading of derivative contracts on Ether. Answer: Market activity, including the trading of derivative contracts, that facilitate price discovery, hedging of risks, and increase liquidity are beneficial for Ether and the Ethereum Network. In both proof-of-work and proof-of-stake models, network security is improved when free markets provide accurate price signals to miners and coin holders and enable them to trade and hedge risks appropriately. As described above in questions 17 and 18, derivative markets should take measures that limit the potential for large actors to unduly manipulate market prices as, similar to bitcoin, market crashes can impact mining security incentives. 20. Are there any types of trader or intermediary conduct that has occurred in the international Ether derivative markets that raise market risks or challenges and should be monitored closely by trading venues or regulators? The off-shore exchange BitMex, incorporated in the Seychelles, is in a position to engage in market manipulation through its proprietary trading desk that has direct advantages over customer traders. Additionally, BitMex introduced a perpetual swap product that allows customers to purchase ETHUSD perpetual swap contracts and take long or short positions. Bitcoin Quanto ETH/USD contract has a fixed Bitcoin multiplier regardless of the USD price of ETH. This allows the trader to go long or short the ETH/USD exchange rate without ever touching ETH or USD. This product disproportionately reduces the risk of either a long or short side play. Additionally, BitMex offers unchecked leverage up to 50x on the ETH/USD perpetual swap. 21. What other factors could impact the Commission\u2019s ability to properly oversee or monitor trading in derivative contracts on Ether as well as the underlying Ether cash markets? The Ethereum Community views privacy as a fundamental human right and as a guarantor of individual human dignity. As such, privacy is one of the core features being worked on by multiple teams. The technology is expected to have profound effects on both the privacy of Ethereum and the scalability of the network. Privacy technology on Ethereum already has working implementations being deployed to the Ethereum main network ( https://medium.com/aztec-protocol/confidential-transactions-have-arrived-a-dive-into-the-aztec-protocol-a1794c00c009 ). This privacy technology may impede the Commission's ability to monitor, audit or oversee trading activity in the future. Inspite the drawbacks, the community believes it necessary to the preservation of individual freedoms. Requiring derivative contract operators to conduct their operations transparently (i.e. not privately) is a possible way to allow oversight. 22. Are there any emerging best practices for monitoring the Ethereum Network and public blockchains more broadly? Due to the transparency of blockchains, there are multiple services that provide monitoring, visualization and analytical tools for Ethereum and related applications that are built on top. The first group of tools is so-called block explorers \u2014 applications that allow users to view past transactions and state of the network. Some Ethereum block explorers are Etherscan , BlockScout , and EthStats . There are various datasets available to download and analyze Ethereum data, collected by multiple organizations. Different datasets have different content and format, and other tools might be required to get meaningful insights from the data. Google released dataset from its BigQuery Public Data and Alethio is working on the Ethereum Linked Data . As each transaction by definition involves two or more parties, the Ethereum network can be seen as a giant graph of financial interactions. Several projects allow viewing parts of this graph by choosing account or contract of interest. Observeth displays ether and token transfers in a given period of time. Ethtective focuses on showing accumulated graph of interactions for a given Ethereum account. Finally, there are application-specific visualization and analytic tools. Most of these tools are focused on financial protocols. For example, MKR Tools provides an overview of the debt positions made via Maker DAO. 0x Tracker displays all token exchanges that go through the 0x Protocol. Loanscan gives insights into the lending activity facilitated by Dharma and other protocols. Cyber Security and Custody 23. Are there security issues peculiar to the Ethereum Network or Ethereum- supported smart contracts that need to be addressed? Smart contracts, like any piece of code, suffer from the possibility of having vulnerabilities or bugs. The security of smart contracts is paramount because they tend to interact with different financial apps and handle value transfer (such as the transfer of Ether or tokens) Independent auditing and smart contract security firms exist such as Zeppelin, Trail of Bits, and others . These firms provide contract auditing and fuzzing services. Additionally, formal verification services have emerged to formally verify smart contract code. Runtime Verification is one of the leading providers of these services for Ethereum smart contracts. 24. Are there any best practices for the construction and security of Ethereum wallets, including, but not limited to, the number of keys required to sign a transaction and how access to the keys should be segregated? There is a wide range of solutions tackling the problem of storing and managing Ethereum assets a.k.a. creating and using an Ethereum wallet. Solutions vary in the security, usability, and dependence on third-parties. All wallet products can be divided into two groups depending on who owns and controls the private key. First, there are centralized solutions that own the private keys and therefore the underlying assets. They can potentially censor user's actions and are vulnerable to hacks as they become honeypots, but can offer features like account recovery, shorter passphrases, and overall better user experience. Second, there are self-custody solutions where a user is in control of her private key, which is more secure and reliable, but at the same time, a user carries a risk of permanently losing her funds if she'll ever lose the private key. It's worth to mention that there're projects like Gnosis Safe aiming to deliver secure yet convenient and reliable wallet software where a user can be sure that funds will be safe even in the event of losing the private key without relying on a single service provider. Speaking about self-custody Ethereum wallets, there are implementations of multisignature wallets that are audited and battle-tested. Probably the biggest one in terms of adoption is MultiSigWallet . Another solution is Simple Multisig . To get some insight about what is the industry average in terms of the number of required keys to sign a transaction, one can look at the existing deployments of MultiSigWallet used by various Ethereum projects. For example, Aragon's multisig is 2-of-3, Bancor's wallet is 2-of-4, and Golem's contract is a 3-of-N multisig. In terms of creating new smart contracts for safe custody and management of assets, one can look for the best practices in the ecosystem. Consensys Ethereum Smart Contract Best Practices provide advice on what direction to follow when writing a contract, as well as highlight various caveats. ETHSecurity serves as a curated list of everything related to writing secure contracts including blogs, lectures, and tooling. Finally, there are tools designed to find potential vulnerabilities and bugs in the smart contract source code. To name a few, there are Mythril , Manticore , and Echidna . 25. Are there any best practices for conducting an independent audit of Ether deposits? The current design of Ethereum blockchain means that network state, as well as all transactions, are public. Anyone connected to the blockchain can verify balances of any account or smart contract without the need to ask permission of its owner. Alternatively, one can use a block explorer like Etherscan or Blockscout , which involves some trust in the honesty of the service provider but doesn't require from the user to run a node. There's a lot of research ( Aztec , Enigma ) directed towards general-purpose cryptographic schemes that will enable private transactions on Ethereum. With the introduction of such protocols, some (or all) information of the accounts that decided to preserve privacy will be kept in secret. In most cases, to audit the balance of a private account or smart contract, one would need to cooperate with the owner of such account in some way. The exact way of collaboration will largely depend on the privacy solution that will be used. One example might involve sharing \"view keys\" with the auditor, which will allow viewing the balance of the wallet, but not to move the funds. Another solution is to use zero-knowledge proofs that can reveal some properties of the underlying wallet (say, there are more than 10,000 ETH in that wallet) without revealing the exact amount of funds. Many firms conducting audits utilize tools or forensics services such as Chainalysis to audit and provide track and trace for transactions from deposit/source to destination. Additionally, private sector CPA firms including PwC, Deloitte, EY, and Accenture now provide full-service forensics for cryptocurrencies and blockchains.","title":"EthHub CFTC Responses"},{"location":"other/ethhub-cftc-response/#ethhub-cftc-response","text":"On December 11th, 2018 the CFTC submitted a public \"Request for Input\" which asks for clarity and answers around Ethereum. The following is a list of all questions asked in the RFI. The following answers were developed on EthHub, an open source, community run information hub for the Ethereum community. From the CFTC: In providing your responses, please be as specific as possible, and offer concrete examples where appropriate. Please provide any relevant data to support your answers where appropriate. The Commission encourages all relevant comments on related items or issues; commenters need not address every question. DEADLINE: February 15, 2019","title":"EthHub CFTC Response"},{"location":"other/ethhub-cftc-response/#purpose-and-functionality","text":"","title":"Purpose and Functionality"},{"location":"other/ethhub-cftc-response/#1-what-was-the-impetus-for-developing-ether-and-the-ethereum-network-especially-relative-to-bitcoin","text":"It's first vitally important to distinguish between Ether and Ethereum. Ethereum is an open-source, blockchain-based distributed ledger with decentralized control that supports general computing and economic activities. Anyone is able to build and deploy decentralized products and services that run on top of Ethereum by creating highly flexible programmable transactions, called 'smart contracts'. This smart contract technology has proven to be attractive to developers since it enables them to create programs and business logic that run exactly as coded, trustlessly and with no down time. Ether is the native cryptocurrency used on the Ethereum network and is used to compensate miners who secure transactions. A planned upgrade to the Ethereum protocol in 2019-2021 would replace mining with a less computationally expensive Proof of Stake mechanism which will be secured by validators, who are also expected to receive a proportional compensation in Ether. Ether also has many current use cases, such as a store of value (e.g. in lending collateral), a medium of exchange (e.g. in trade and payments), and a unit of account (e.g. in digital marketplaces). The underlying impetus to develop Ethereum and consequently Ether, was to utilize aspects of the technology initially developed as part of the Bitcoin blockchain and combine it with the capabilities of smart contract technology. The idea was that this marriage would lead to a platform that could sustain not only the money or medium of exchange use case, but also to add programability to money, introducing conditional logic to the equation that would open up a world of possibilities with regards to decentralized financial applications and products, and additional decentralized applications. This is contrary to the singular purpose vision for Bitcoin as a simple store of value (pivoting more recently from the original peer-to-peer electronic cash vision championed by Satoshi Nakomoto) and ultimately made necessary by a lack of flexibility in the Bitcoin protocol's scripting language. This was in response to the aversion to adding new features by the core maintainers of the Bitcoin protocol, such as those required to enable Ethereum-like functionality on Bitcoin.","title":"1. What was the impetus for developing Ether and the Ethereum Network, especially relative to Bitcoin?"},{"location":"other/ethhub-cftc-response/#2-what-are-the-current-functionalities-and-capabilities-of-ether-and-the-ethereum-network-as-compared-to-the-functionalities-and-capabilities-of-bitcoin","text":"The Bitcoin and Ethereum blockchains are currently both secured by a Proof of Work transaction ordering, sybil-control mechanisms and byzantine fault tolerance (BFT) consensus. However, the core difference is that Ethereum offers smart contract functionality enabled by its flexible scripting languages and the Ethereum Virtual Machine (EVM), which is a quasi-Turing Complete virtual machine that compiles smart contract code and enables execution of that code. These smart contracts allow the incorporation of logic based programs that can create unique conditions to the transfer and settlement of Ether transactions amongst counterparties. Because of its ability to support smart contracts, Ethereum enables the development and deployment of digital decentralized products and services that can incorporate complex computational logic. The functionality of the native asset Ether is actually very similar to Bitcoin: 1) Miners who perform computationally intensive work that is crucial to provide secure transaction ordering, block creation which prevents a wide array of failures (e.g. double spending, transaction censorship), are rewarded with Ether issued by the blockchain as a compensation for each block found and added to the blockchain; when Proof of Stake is launched in 2019-2021, Stakers who will take the role of securing the network, will also be incentivised through Ether to secure the network in a somewhat similar mechanism. 2) Ether is used to pay for transaction fees on the network. This serves as a sybil resistance mechanism, and prevents forged identity based attacks, as well as spam and denial of service attack protection. The transaction fees on Ethereum are dynamic, and user-adjustable, which creates an interesting fee market that aids in preventing network congestion. 3) Ether is also used to interact or trigger actions by smart contracts deployed on the Ethereum blockchain. 4) Ether is also traded on several secondary markets.","title":"2. What are the current functionalities and capabilities of Ether and the Ethereum Network as compared to the functionalities and capabilities of Bitcoin?"},{"location":"other/ethhub-cftc-response/#3-how-is-the-developer-community-currently-utilizing-the-ethereum-network-more-specifically-what-are-prominent-use-cases-or-examples-that-demonstrate-the-functionalities-and-capabilities-of-the-ethereum-network","text":"The simplest use case of the Ethereum network is value transfer by sending Ether (which has an attached value) from one person to the other, or by programming value transfers through more complex tools and applications. The amount of decentralised applications being built on top of the Ethereum blockchain is growing at a rapid pace, and the most notable usecases for now are: Decentralized Finance: Currently, the most active applications are those related to \"Decentralized Finance\". As of 12/11/18, there is currently $120,000,000 worth of Ether being used in decentralized finance applications like Stablecoins such as DAI , tokenized debt such as Dharma , margin trading and derivatives dYdX and decentralised exchanges like the 0x . Games: Smart-contracts can be programmed in a way to reflect not only units of account, but also digital representation of game items, such as collectibles like Cryptokitties , cards like in Zombie Battle ground or even Digital (VR) property such as Decentraland . The fact that items exist on the Ethereum blockchain, and not on the siloed databases of each individual games, makes them more exchangeable, and guarantees the right of ownership of such items regardless of the existence of the actual game/project developers. Noting that the above are just examples of many others and were just listed here for illustrative purposes.","title":"3. How is the developer community currently utilizing the Ethereum Network? More specifically, what are prominent use cases or examples that demonstrate the functionalities and capabilities of the Ethereum Network?"},{"location":"other/ethhub-cftc-response/#4-are-there-any-existing-or-developing-commercial-enterprises-that-are-using-ether-to-power-economic-transactions-if-so-how-is-ether-recorded-for-accounting-purposes-in-a-comprehensive-set-of-financial-statements","text":"There are commercial start-ups currently using Ether as a medium of exchange and unit of account in their existing business model. For example, Fuel Games is presently charging some 4200 customers a fixed price in Ether to purchase its unique playable digital trading cards, which upon final sale become provably owned by the customer in a cryptographically verifiable way. At present, over 11,000 Ether has been paid to Fuel Games in exchange for these products. The digital cards, while being collectible and tradable, are primarily intended for use as in-game assets within Fuel Games' video game called Gods Unchained, currently in closed beta. As part of their business model, Fuel Games plans to release new playable card sets 3-4 times a year and charge for them in Ether. While the pricing for these products is currently denominated in Ether, Fuel has announced plans to have the price pegged to a fixed price in dollars. To incentivize consumers to play with the cards, the business has promised that 10% of sales will go towards the US dollar prize pool of an international tournament event they are organizing in 2019. To limit their forex risk, Fuel Games has reported that they regularly convert a portion of their Ether holdings into a stable currency. The above example demonstrates some of the economic transactions produced by a startup. In just this one case, a business is collecting payments in exchange for a digital product they are making, where 10% of that payment is being tracked and liquidated for use in another financial obligation. It has not been divulged how private businesses like Fuel Games might be managing their internal accounting, but there are standards which one might reasonably assume they are following. For example, the Financial Accounting Standards Board classifies native cryptocurrencies, including Ether as indefinite-lived intangible assets under ASC 350 in their report titled Financial Reporting Alert 18-9 \u2014 Classification of cryptocurrency holdings . Ether, like other cryptocurrencies, meets the definition of an indefinite-lived intangible asset. Using the intangible-asset model results in holdings of cryptocurrencies being recorded at the cost of acquisition, subject to impairment. That is, the model should only capture declines in the value of the cryptocurrency, not increases. When Ether is purchased, the intangible asset would be measured at the price paid or consideration given to obtain the cryptocurrency. However, the question for miners in Proof of Work or validators in Ethereum's proposed Proof of Stake design is more complicated. Unlike a direct purchase, miners and staked validators are awarded Ether as a reward for ordering transactions and securing the network, but they incur costs of computing equipment, electricity, devops and other expenses. At issue for the miners or staked validators is whether the associated costs should be capitalized as an intangible asset or expensed. While Ether may fit into the existing model for intangible assets and appear as such in the companies balance sheets, a simpler, and potentially better model for representing the economics associated with holding or using Ether is the fair value measurement model, with both realized and unrealized changes reflected currently in the income statement. It can also be noted that the Enterprise Ethereum Alliance is a large group of commercial enterprises dedicated to developing enterprise use cases and building out standards frameworks for Enterprise Ethereum. Additionally, though non-commercial, the United Nations International Children's Emergency Fund's Kazakhstan branch and the UNICEF Innovation Fund is piloting an effort utilizing the Ethereum blockchain to provide tracking and traceability for transactions between UNICEF and partners to enhance transparency and efficiency of how UNICEF deals with its implementing partners on the ground ([http://unicefstories.org/2018/09/26/project-opportunity-build-a-smart-contract-prototype-for-unicef-kazakhstan-to-track-results-for-children/](http://unicefstories.org/2018/09/26/project-opportunity-build-a-smart-contract-prototype-for-unicef-kazakhstan-to-track-results-for-children/%29).","title":"4. Are there any existing or developing commercial enterprises that are using Ether to power economic transactions? If so, how is Ether recorded for accounting purposes in a comprehensive set of financial statements?"},{"location":"other/ethhub-cftc-response/#5-what-data-sources-analyses-calculations-variables-or-other-factors-could-be-used-to-determine-ethers-market-size-liquidity-trade-volume-types-of-traders-ownership-concentration-andor-principal-ways-in-which-the-ethereum-network-is-currently-being-used-by-market-participants","text":"There are a plethora of publicly available tools, websites, and APIs that this type of information can be obtained from. Exchanges such as Coinbase aggregate trading data and metrics for each blockchain whose native cryptocurrency they have listed. Additionally, free and open source tools such as those provided by coinmetrics.io, etherscan.io, and Santiment, or paid tools such as coinfi.com, Diar Newsletter, and other Ethereum blockchain tools and services monitor and provide metrics. These metrics include the concentration of wealth in Ethereum by wallet address, individual account information including all send and receive transactions (and in some cases available ownership information), daily transaction volume measured in total Ether and USD value equivalent, average block time, average block size, number of nodes connected to the network, current network transaction fees, most active addresses and smart contracts, smart contract internal transaction monitoring, amount of Ether or USD value equivalent stored or transferred by decentralized applications and associated smart contracts, subjective user activity metrics, and more market focused metrics tracking price trends, market cap, total and available supply, liquidity, etc.","title":"5. What data sources, analyses, calculations, variables, or other factors could be used to determine Ether\u2019s market size, liquidity, trade volume, types of traders, ownership concentration, and/or principal ways in which the Ethereum Network is currently being used by market participants?"},{"location":"other/ethhub-cftc-response/#6-how-many-confirmations-on-the-ethereum-blockchain-are-sufficient-to-wait-to-ensure-that-the-transaction-will-not-end-up-on-an-invalid-block","text":"A user must only wait 1 block confirmation for their transaction to be validated and confirmed. However, there is a risk of hash power related attacks to the network (e.g. 51% attacks) that could potentially result in double spends or the block a transaction was originally included in being orphaned (abandoned in its own version of the chain that is not accepted by the network) and thus censored by a large hashrate owning miner or group of miners attacking the network. However, because Ethereum, like Bitcoin, is probablistic by nature, the probability of such an attack decreases with every block confirmation, as the cost to aquire the hashrate necessary to attack the network increases substantially until it becomes uneconomical. Because of this, some merchants may wait a pre-selected amount of confirmations, such as 6 block confirmations for Bitcoin with its 10 minute block time (~1 Hour) or 30 for Ethereum with its 12-14 second block time (~6 mins) in order to avoid this risk. \"An analysis by Vitalik Buterin on PoW block times and their affects on transaction finality and security can be found here: https://blog.ethereum.org/2015/09/14/on-slow-and-fast-block-times/ .\"","title":"6. How many confirmations on the Ethereum blockchain are sufficient to wait to ensure that the transaction will not end up on an invalid block?"},{"location":"other/ethhub-cftc-response/#technology","text":"","title":"Technology"},{"location":"other/ethhub-cftc-response/#7-how-is-the-technology-underlying-ethereum-similar-to-and-different-from-the-technology-underlying-bitcoin","text":"From a high level, Ethereum is similar to Bitcoin in that it uses a 'blockchain' and uses 'Proof of Work' to achieve consensus and secure the network. Both blockchains have a native digital asset - Ether (ETH) for Ethereum and Bitcoin (BTC) for Bitcoin. The Ethereum network is a turing-complete blockchain. This means that it is capable of executing arbitrary code - known as smart contracts. The ability to run code on the Ethereum blockchain means that developers can build applications on top of it. One such application, MakerDAO, allows users to use their ETH as collateral to take out a loan denominated in a USD-pegged stablecoin (known as DAI). Applications are all interoperable within the confines of the Ethereum network. Ethereum acts as a common protocol for all decentralized applications built atop, in the way that TCP/IP acts as a common protocol for all public web-based applications. It is not strictly limited to being used as a settlement layer as Bitcoin has become. Ethereum 2.0 (Serenity) is a substantial upgrade for the Ethereum network being deployed in multiple phases. The main features in this upgrade include a move to a novel Proof of Stake system known as Casper (for securing the network), sharding (for scaling the network) and eWASM (a new virtual machine for the network). These upgrades and new features are developed by a decentralized network of core developers spanning 8 individual Ethereum software client teams, the non-profit Ethereum Foundation, and additional volunteer developers and researchers from around the globe.","title":"7. How is the technology underlying Ethereum similar to and different from the technology underlying Bitcoin?"},{"location":"other/ethhub-cftc-response/#8-does-the-ethereum-network-face-scalability-challenges-if-so-please-describe-such-challenges-and-any-potential-solutions-what-analyses-or-data-sources-could-be-used-to-assess-concerns-regarding-the-scalability-of-the-underlying-ethereum-network-and-in-particular-concerns-about-the-networks-ability-to-support-the-growth-and-adoption-of-additional-smart-contracts","text":"The Ethereum Network faces scalability problems similar to Bitcoin and other decentralized blockchains. Where some other blockchains have traded off decentralization, trust minimization, and security in favor of throughput (transactions per second) both Ethereum and Bitcoin were created on the principle of maximum decentralization and security above all. It is a trade-off as identified in Vitalik Buterin's trilemma for blockchain scalability ([https://bitcoinist.com/breaking-down-the-scalability-trilemma/](https://bitcoinist.com/breaking-down-the-scalability-trilemma/%29) It's important to understand the basics of how the Ethereum blockchain functions before diving into scaling. Every transaction cost a certain amount of \"gas\", which is the cost, in computational power, to execute a transaction (denominated in Ether). Every block processed on the network has a cap on the amount of gas it can hold (the \"gas limit\"). This is because if blocks get too large, there are issues with the way they propogate across the network which increases the likelihood of an incidental fork (chain split) as well as storage and initial syncronization issues. Currently, the Ethereum network sits at max capacity in terms of gas used every day, though recent optimizations in the most widely used clients, Parity Ethereum and Go Ethereum, now enable the block gas limit (and by extension the computational throughput of the network) to be increased safely if the mining nodes, and researchers so agree. This is how Ethereum plans to tackle the scalability issue beyond just the block gas limit: 'Layer 1' refers to the main Ethereum network/blockchain. 'Layer 2' refers to technologies built on top of (or above) the main Ethereum network/blockchain. 'Interoperability' refers to the use of other blockchains. A decentralized network of open source developers are addressing Ethereum's Layer 1 scalability challenges by introducing a mechanism borrowed from traditional databases - 'sharding'. Sharding takes the blockchain and splits it up into multiple blockchains (that can communicate with eachother) so that transactions and computations can be processed in parallel, and then finalized to one larger ledger of record (known as the beacon chain). An ecosystem of project teams, decentralized application teams, traditional companies, and open source developers are addressing Layer 2 scalability challenges on Ethereum through the use of multiple technologies. These technologies include sidechains (such as Plasma), state channels, and interoperability chains and bridges that outsource some transacting to other, compatible blockchains and utilize Ethereum strictly as a settlement layer.","title":"8. Does the Ethereum Network face scalability challenges? If so, please describe such challenges and any potential solutions. What analyses or data sources could be used to assess concerns regarding the scalability of the underlying Ethereum Network, and in particular, concerns about the network\u2019s ability to support the growth and adoption of additional smart contracts?"},{"location":"other/ethhub-cftc-response/#9-has-a-proof-of-stake-consensus-mechanism-been-tested-or-validated-at-scale-if-so-what-lessons-or-insights-can-be-learned-from-the-experience","text":"Proof of Stake (and Proof of Work) aren\u2019t consensus mechanisms - they are sybil-control mechanisms. They need to be coupled with a protocol such as BFT (byzantine fault tolerance) to achieve consensus. There are different types of Proof of Stake (PoS). DPoS - Delegated Proof of Stake LPoS - Liquid Proof of Stake Casper FFG (friendly finality gadget) DPoS has inherent flaws as it tends to centralize the system over time (to what is commonly referred to as a plutocracy). Unfortunately, DPoS suffers from poor distribution of coins and small holder voter apathy, and thus is a honeypot for cartel formation. Additionally, DPoS chains rely heavily on extra-protocol social and political mechanisms to promote \"honesty\" such as a constituion or block producer agreements which are not enforceable under any jurisdiction and are instead good faith agreements or hand shake agreements to operate in the best interest of the network. Ethereum's Proof of Stake mechanism (known by the common name of Casper) is fundamentally different and intends to maximize decentralization by incentivizing hundreds of thousands of validators to participate in securing the network versus a small subset of voted on delegates. There are currently multiple projects that employ the Proof of Stake consensus mechanism. There have been many lessons learned from these deployments including potential attack vectors, such as the \"nothing at stake\" problem. Ethereum researchers have taken these lessons learned and incorporated them into their design requirements. For example, Casper Proof of Stake addresses the nothing at stake problem by enforcing a set of pre-defined conditions and rules that if violated by a malicious party will result in the \"slashing\" of their staked Ether as a penalty. For example, if a validator proposed a different version of the blockchain versus what the remaining honest nodes have reached consensus on, that validator is slashed a portion of their staked Ether as a punitive measure. This discourages attacks as their stake ironically becomes something at stake.","title":"9. Has a proof of stake consensus mechanism been tested or validated at scale? If so, what lessons or insights can be learned from the experience?"},{"location":"other/ethhub-cftc-response/#10-relative-to-a-proof-of-work-consensus-mechanism-does-proof-of-stake-have-particular-vulnerabilities-challenges-or-features-that-make-it-prone-to-manipulation-in-responding-consider-for-example-that-under-a-proof-of-stake-consensus-mechanism-the-chance-of-validating-a-block-may-be-proportional-to-staked-wealth","text":"Ethereum's Casper Proof of Stake will function on the basis of validators, each of which will stake 32 Ether. Users are able to run multiple validators but their computing cost will increase as well (it should be noted that there is a cost to running a validator in Casper Proof of Stake including the cost of computational resources, the cost of high availability and devops, and the opportunity cost and risk of locking value in the stacking system when that wealth could be used elsewhere). A validator will be randomly chosen to propose a block and then a committee of users (at least 111) will attest that validator acted properly. If so, the block will be validated and the validator rewarded. If not, the validator's deposit will be slashed and be lost. If an attacker gained 51% of all Ether they could attempt to attack the network but mechanisms in place make it likely that they will still be slashed. At current Ether price, this attacker would be risking $4,300,000,000 to do so and if caught could lose it all. The cost to aquire 51% of the Bitcoin hash rate is much less. As noted previously, Casper Proof of Stake addresses the \"nothing at stake\" problem suffered by previous Proof of Stake based blockchains by enforcing a set of pre-defined conditions and rules that if violated by a malicious party will result in the \"slashing\" of their staked Ether as a penalty. Additionally, Ethereum enjoyed the benefit of initial Proof of Work based distribution versus other Proof of Stake-based chains. This provides greater guarantees for wealth distribution and preventing a single entity from amassing a disproportionate amount of Ether which could grant them a supermajority of the stake weight and thus the block validity vote.","title":"10. Relative to a proof of work consensus mechanism does proof of stake have particular vulnerabilities, challenges, or features that make it prone to manipulation? In responding consider, for example, that under a proof of stake consensus mechanism, the chance of validating a block may be proportional to staked wealth."},{"location":"other/ethhub-cftc-response/#11-there-are-reports-of-disagreements-within-the-ether-community-over-the-proposed-transition-to-a-proof-of-stake-consensus-model-could-this-transition-from-a-proof-of-work-to-a-proof-of-stake-verification-process-result-in-a-fragmented-or-diminished-ether-market-if-the-disagreements-are-not-resolved","text":"The roadmap and community consensus is very clear when it comes to the switch to proof of stake. There are active conversations occuring about the logistics and mechanisms of the proof of stake transition but wanting to stay on proof of work is not something actively discussed by any significant portion of the Ethereum community. At any point, a user can attempt to fork or stay on the current proof of work chain but the incentive will be very little once proof of stake is live because the users of the network see many positive network effects from the updated proof of stake version of Ethereum. These include: scalability by also enabling sharding which requires the transition to Proof of Stake, a more solidified monetary policy, the ability to work as a validator securing the network and earn by using your stake as collateral for remaining an honest party, and a greater ecosystem of decentralized applications that can take advantage of both the economic state and scalable state of Ethereum. It is worth mentioning that Ethereum has only seen one contentious fork in its lifetime following the \"DAO hack\" and subsequent recovery effort. This was driven partially by a split in the community based on values, which is a natural progression in blockchains /(see Bitcoin Cash, Bitcoin Cash ABC, Bitcoin Cash SV, Bitcoin Diamond, which are all community values driven forks of Bitcoin/).","title":"11. There are reports of disagreements within the Ether community over the proposed transition to a proof of stake consensus model. Could this transition from a proof of work to a proof of stake verification process result in a fragmented or diminished Ether market if the disagreements are not resolved?"},{"location":"other/ethhub-cftc-response/#12-what-capability-does-the-ethereum-network-have-to-support-the-continued-development-and-increasing-use-of-smart-contracts","text":"Ethereum currently supports the most active and largest ecosystem of developers globally. In addition to the core protocol developers and the massive ecosystem of decentralized application developers building and testing on Ethereum, there are currently 8 client teams developing individual client implementations for Ethereum which makes the network more decentralized, robust, and secure. A network with a reliance on a single client implementation becomes a single point of attack or failure (see CVE-2018-17144, the Bitcoin Core client bug that represented a High risk vulnerability affecting Bitcoin's security and monetary policy, present in 95% of Bitcoin nodes due to the reliance mostly on the single client implementation). Additionally one only needs to visit sites such as edX.org or Udemy.com to view the incredible amount of solidity and vyper smart contract development courses enthusiasts have created, or to Indeed.com to see the increasing number of positions related to Ethereum and smart contract development.","title":"12. What capability does the Ethereum Network have to support the continued development and increasing use of smart contracts?"},{"location":"other/ethhub-cftc-response/#governance","text":"","title":"Governance"},{"location":"other/ethhub-cftc-response/#13-how-is-the-governance-of-the-ethereum-network-similar-to-and-different-from-the-governance-of-the-bitcoin-network","text":"The Ethereum governance process, at least in regards to software updates and development, is similar to Bitcoin's in that it uses a public Github repo to track development from proposal to implementation. In Bitcoin, this is referred to as the Bitcoin Improvement Proposal or BIP process, and in Ethereum it is the EIP process. Where the two differ is in the openness to feature additions, layer 1 improvements, and the way in which those upadtes are discussed, weighed, and proposed. Ethereum seeks to be an inclusive forum for all stakeholders, which would be defined as anyone who believes they would like to contribute to the governance or development of the Ethereum network (Ether holding not required!). Therefore there are several different layers of governance in Ethereum. Ethereum utilizes rough consensus to gauge the greater community feedback and acceptance of proposals. Various tools are also used for signal measurement such as coinvotes, polling, surveys, and general sentiment gauging attempts across a multitude of social media platforms. There is not a central governing body for Ethereum, but rather an approach similar to the IETF in which various forums and working groups have been designed to review, discuss, and guage general community sentiment for each proposal. These forums inform consensus amongst the core developers to inform whether changes should enter the EIP process for technical review, or if further discussions and consensus is needed. Ultimately, these processes are simply to guide development and improvements to the nework, as the decision whether or not to approve or accept the updates and changes lies with the thousands of collective users running nodes on the network. Nodes may choose to run or not to run code they agree or don't agree with. That is the noderunners prerogative as the protocol's rules enforcers. If nodes choose not to update, the chain will continue without the added features or changes and is considered rejected by the community. If the nodes choose to update with no contention then the changes are considered accepted by the community. If the nodes are split by their beliefs and values, two chains may emerge if the differences cannot be reconciled. This is a natural expression of free will and decentralization in blockchains, as the communities are allowed to split and run the coded rules that support their interests. Finally, the market provides the final validation of these changes as the market and its participants will determine the value of each resulting blockchain, and its associated currency, if any.","title":"13. How is the governance of the Ethereum Network similar to and different from the governance of the Bitcoin network?"},{"location":"other/ethhub-cftc-response/#14-in-light-of-ethers-origins-as-an-outgrowth-from-the-ethereum-classic-blockchain-are-there-potential-issues-that-could-make-ethers-underlying-blockchain-vulnerable-to-future-hard-forks-or-splintering","text":"Ether was not an outgrowth of the Ethereum Classic blockchain. Ether, the cryptocurrency, was born out of the genesis block of the Frontier blockchain, the first iteration of the mainnet Ethereum blockchain. In March 2016, the Ethereum blockchain hard forked again to add additional features and optimizations to the Homestead chain, the next iteration of the Ethereum blockchain. In July of 2016, following the exploit of a vulnerability found in a smart contract called \"The DAO\" which resulted in substantial loss of Ether to a bad actor, the Ethereum blockchain was hard forked again to include an \"irregular state transition\" that recovered the stolen Ether and returned it to the initial owners (it should be noted that the history of the blockchain remains 100% in tact and no transactions were censored or removed. Funds were moved via irregular state transtion from the hacked DAO child contracts and remaining DAO child contracts to a recovery contract that users could claim their Ether back from to undo the damages caused by the bad actor). Most in the Ethereum community elected to support the hard forked chain by upgrading their nodes. This chain became the chain we knew under the ticker ETH. A minority elected to remain on the unchanged chain in which the bad actor retained all of the stolen Ether under the ideological belief in 'code is law.' This chain was expected by the community to disappear over time like the old Frontier chain since only a small minority of nodes were supporting it still, and it had not received support from any exchanges, and thus had no value in the market. Poloniex (one of the largest exchanges at the time) listed the Ethereum Classic chain (the minority chain) and it gained a small share in the greater cryptocurrency market. It has continued on to this day under the ticker ETC building its own support from a small group of likeminded developers and community members operating the network under the ethos of 'code is law.' As for predicting future hard forks or chain splits, each hard fork carries with it the possibility that the cast off, minority chain gains value in the market if listed by an exchange and raises some support because of it. Blockchains are not insulated or isolated from politics. Bitcoin is inherrently political and relies on social contracts to ensure its system remains unchanged, which is what drove the Bitcoin Cash community away, and subsequently split that community into Bitcoin Cash ABC and Bitcoin SV. It is possible Ethereum will endure another contentious issue that could result in community members opting to go their separate ways by running the code that better promotes their interests, but this is not something to be feared. This is the value of decentralization and the freedom to choose the rules that support your values, interests, and opinions best.","title":"14. In light of Ether\u2019s origins as an outgrowth from the Ethereum Classic blockchain, are there potential issues that could make Ether\u2019s underlying blockchain vulnerable to future hard forks or splintering?"},{"location":"other/ethhub-cftc-response/#markets-oversight-and-regulation","text":"","title":"Markets, Oversight and Regulation"},{"location":"other/ethhub-cftc-response/#15-are-there-protections-or-impediments-that-would-prevent-market-participants-or-other-actors-from-intentionally-disrupting-the-normal-function-of-the-ethereum-network-in-an-attempt-to-distort-or-disrupt-the-ether-market","text":"Ethereum currently secures billions of dollars in value using open-source code, so the security of the platform is an utmost concern to both developers and the general community. This vigilance has been warranted, given that the platform has experienced availability attacks, smart contract bugs, and ideological disagreements in governance. Through these challenges, the Ethereum platform has demonstrated that its multiple layers of protection can effectively secure value. Ethereum\u2019s defenses can be broadly categorized into four layers: well-written code, security-optimized system design, cautiously implemented crypto-economics, and effective governance. Well-written code serves as the first line of defense. Ethereum developers have taken many steps to write secure code such as using battle-tested encryption methods, sharing secure design patterns, and implementing rigorous reviews and testing processes. Their efforts are not perfect, and mistakes often lead to significant consequences such as mistakenly locking up Ether forever or having Ether stolen due to security bugs. Even so, the uninterrupted operation of Ethereum since the Frontier launch in 2015 has shown that the system can remain operational despite these flaws. Beneath the code, Ethereum\u2019s security-optimized system design provides a second line of defense. The pieces of Ethereum work together in a way that minimizes the chance that a fault in one area will have systemic consequences. For example, the application layer is separated from the base protocol layer such that, if a smart contract proves faulty, it will not jeopardize the safety of the network. The well-publicized DAO attack is one great example. Even though an attacker had hacked a smart contract holding about a sixth of all available Ether, a sizeable minority argued that the platform did not need to make a protocol-level change to fix the issue. This position would not have been viable if the application layer was at all connected to protocol functionalities. Another important system design decision is the encouragement of multiple clients with multiple versions that all sync to the same Ethereum blockchain. There have been numerous examples of how bugs in a blockchain\u2019s client software can cause potentially critical failures in the system. Unlike Bitcoin, Ethereum has two major clients (geth and Parity) for its Proof-of-Work system that prevent bugs in one client from becoming systemic issues. The ecosystem\u2019s security will improve further in this regard under Proof-of-Stake, where 8 new clients are under development. After system design, a cautious implementation of crypto-economics serves as a third line of defense for Ethereum. Crypto-economics is defined as the usage of economics, cryptography, and game theory to design systems that generate predictable outcomes given certain assumptions. Ethereum\u2019s code and system design use crypto-economics to ensure the network\u2019s security. Bitcoin\u2019s Proof-of-Work system pioneered this type of design (which Ethereum largely uses), while Ethereum\u2019s new Proof-of-Stake system offers significant improvements. Proof-of-Work likely needs no introduction; in the 10 years since the introduction of Bitcoin, no one has successfully broken the system. Ethereum\u2019s Proof-of-Stake improves on security by introducing new concepts such as staking and slashing, which increases the economic cost of attacking the network as compared to Proof-of-Work. As explained elsewhere, making a switch in consensus system entails significant risks. A failure within the code or the system design might provide short or medium-term inconveniences to the network, but a failure of crypto-economics in the consensus system potentially threatens the network\u2019s survival. To mitigate this risk, Ethereum researchers have designed a conservative, staged approach that migrates network activity to the new system without jeopardizing the old system. This approach minimizes the chances that flaws within the Proof-of-Stake system that may otherwise make the Ethereum platform unusable. The final and most enduring source of resilience for Ethereum is its effective governance. Since the Ethereum yellow paper was first published in 2014, the community has grown from a small group of visionaries to a network of hundreds of thousands of technologists and enthusiasts around the world. During that time, it has only improved in its ability to act as effective custodians to the value secured by the network. An example of the community\u2019s growth comes from how it handled a broken smart contract written by Parity. On November 6, 2017, a bug in Parity\u2019s wallet smart contract caused it to permanently lock away $300 million of community funds. While this bug did not affect as many people as the DAO hack, it directly impacted Parity, a development group which was responsible for the second biggest client that runs Ethereum. When Parity proposed a solution somewhat similar to how DAO hack was resolved (a fix submitted through a hard fork), the community quickly concluded that such a solution was not in the best long-term interests of the network. Right or wrong, the community showed the ability to decide quickly on a potentially controversial topic. As a result, this incident ended up causing little visible impact to the value of Ether. Within the community, the Ethereum protocol developers have shown an exemplary capacity to put the long-term interests of the network ahead of short-term goals and personal ambitions. The recent decision to combine the development of Proof-of-Stake and Sharding illustrates this ongoing commitment. Originally, developers of Proof-of-Stake and Sharding had been working separately to design their respective solutions. Through the course of their research, it quickly became clear that a combined solution would be more secure and less complex. Of course, working together would come with the inevitable result of scrapping their existing work and delaying the timelines for release, but the developers quickly aligned on the new approach with minimal disagreements. Their willingness to change course exemplifies the community ethos to subordinate short-term rewards to long-term value-creation. Ethereum has operated uninterrupted for three years as a decentralized blockchain. With continued improvements to coding practices, system design, crypto-economics, and governance, the community looks to keep the network running for decades to come.","title":"15. Are there protections or impediments that would prevent market participants or other actors from intentionally disrupting the normal function of the Ethereum Network in an attempt to distort or disrupt the Ether market?"},{"location":"other/ethhub-cftc-response/#16-what-impediments-or-risks-exist-to-the-reliable-conversion-of-ether-to-legal-tender-how-do-these-impediments-or-risks-impact-regulatory-considerations-for-commission-registrants-with-respect-to-participating-in-any-transactions-in-ether-including-the-ability-to-obtain-or-demonstrate-possession-or-control-or-otherwise-hold-ether-as-collateral-or-on-behalf-of-customers","text":"Ether can be converted to legal tender in two ways: directly via sale on an exchange or indirectly via a sale to another cryptocurrency and then to an exchange. Regarding a direct sale into fiat, Ether faces the same challenges as any other cryptocurrency: volatile price changes and immature exchanges that offer fiat-to-Ether conversion. Both factors contribute significant risk to the acquisition and holding of cryptocurrencies. As exhibit 1 shows, [Add data on volatility of Ether vs. S P 500 and crude oil] volatility in Ether far outstrips the S P 500 and even commodities like crude oil. Ether\u2019s volatility is not unique among cryptocurrencies. In fact, as exhibit 2 shows [add data comparing volatility with Ether, Bitcoin, and general crypto market], it\u2019s actually one of the least volatile cryptocurrencies. These dramatic swings in price make it difficult to both determine adequate collateral requirements and acquire said collateral. While these large fluctuations may recede as the cryptocurrency market matures, there\u2019s little concrete evidence that points to this outcome, suggesting that handling volatility will be a key consideration of maintaining collateral in Ether going forward. Beyond price volatility, Ether also must deal with a collection of exchanges that have limited operating experience, diversification, and liquidity. Five major platforms have the licenses to exchange USD with Ether: Coinbase, Kraken, Bittrex, Gemini, and Circle (operates an OTC market). The oldest of these exchanges is only seven years old (Kraken), and all of them entirely rely on revenue generated from cryptocurrency markets to operate. Furthermore, these exchanges have experienced \u201cflash crashes\u201d which cause forced liquidations for those on margin. On June 21, 2017, the price for Ether on Coinbase went down from $319 to 10 cents in a matter of minutes. Kraken has also faced a flash crash in May 2017, and it now faces a class action lawsuit for misconduct. Given the nascent markets for cryptocurrencies and longstanding laws for KYC/AML, these exchanges play a vital role in allowing investors to legally exchange Ether with USD. Even so, until their performance is tested in more market cycles, an unexpected shutdown to their operations via technical problems or business insolvency remains a significant risk to the purchase and holding of Ether. Granted, one significant caveat to the risks presented above is that investors can easily exchange Ether into other cryptocurrencies via an array of traditional exchanges, decentralized exchanges, and other services. The exchanges mentioned above all have ETH/BTC trading pairs as do crypto-to-crypto exchanges. In fact, the volume of ETH/BTC transactions on crypto-to-crypto exchanges often outstrip the volume of ETH/USD transactions on Coinbase, the largest US provider. Thus, when considering the liquidity of Ether, it\u2019s important to account for the ability to exchange any cryptocurrency (particularly other liquid ones such as Bitcoin) to USD as a secondary source of liquidity. It\u2019s also important to consider the risks that some of these providers represent to the ecosystem. Exchanges which don\u2019t have regulated fiat on-ramps often are unaudited, lack proper licenses, and conduct questionable practices such as volume spoofing (An analysis of fake volume: https://medium.com/@sylvainartplayribes/chasing-fake-volume-a-crypto-plague-ea1a3c1e0b5e ). These exchanges deserve further scrutiny to protect investors and institutions alike from potential misconduct. The emergence of stablecoins offers an array of opportunities and risks as well. A stablecoin is a cryptocurrency that has a value pegged to a real-world asset such as USD. These coins facilitate the exchange of USD and Ether by ensuring transactions are easier to track, atomic (Ether only is received if USD is sent), and cheaper/faster to send via state channels. Coinbase and Circle, two prominent firms authorized to trade USD/ETH, have launched an Ethereum-based coin pegged to USD called USDC to achieve this purpose ( https://www.centre.io/pdfs/centre-whitepaper.pdf ). Gemini has a similar coin call the GUSD ( https://gemini.com/dollar/ ). Separately, the MakerDAO group has released a token called DAI on Ethereum which achieves the USD peg via a decentralized system of smart contracts and collateralization ( https://makerdao.com/whitepaper/ ). The emergence of stablecoins has significant implications for regulatory considerations on Ether. On one hand, it offers opportunities for traditional cryptocurrency exchanges to increase liquidity, reduce volatility risks, and compliance to KYC/AML regulations via its transaction logging (e.g. all transactions exchanging USDC for ETH would be recorded on the Ethereum blockchain). It also opens the door to new types of decentralized exchanges which can facilitate these transactions without trusting a centralized exchange, thereby circumventing the risks enumerated above about both regulated and unregulated exchanges. On the other hand, stablecoins pose risks to effective regulation given that the main sources of Ether liquidity may not happen on venues where the US government has clear jurisdiction (e.g. decentralized exchanges). While the technologies behind stablecoins and decentralized exchanges are still nascent, it\u2019s important to consider these possibilities when thinking about future regulations.","title":"16. What impediments or risks exist to the reliable conversion of Ether to legal tender? How do these impediments or risks impact regulatory considerations for Commission registrants with respect to participating in any transactions in Ether, including the ability to obtain or demonstrate possession or control or otherwise hold Ether as collateral or on behalf of customers?"},{"location":"other/ethhub-cftc-response/#17-how-would-the-introduction-of-derivative-contracts-on-ether-potentially-change-or-modify-the-incentive-structures-that-underlie-a-proof-of-stake-consensus-model","text":"A liquid and well-regulated derivative contracts market has the potential to improve the robustness of proof-of-stake incentive structures by removing unwanted risk from staking Ether. To understand the impact of making more hedging options available for Ether holders, it helps to first understand how staking works. Holders of Ether can choose to lock up their Ether in a smart contract, which gives their node the ability to propose blocks of transactions and collect awards from those transactions. The locked up Ether acts as a \"stake\" which can get taken away (\"slashed\") in the event that their node proposes invalid blocks or withholds information. Staked Ether comprises a critical part of the Proof-of-Stake consensus model, meaning that the network must pay holders of Ether enough to merit a minimum amount staked and keep the network operational. While network rewards holders for performing a critical function, it also must compensate stakers for the market risks associated with holding a volatile asset. Given that the price of Ether can change significantly from day to day, it's reasonable that the average Ether holder values the ability to sell their holdings at will. This is not possible if they stake their Ether. Not only must the staked Ether stay within the contract for the duration that it's staked, the holder also must abide by a holding period upon deciding to withdraw. The inability to hedge these risks would reduce the number of entities/people willing to stake their Ether and penalize the network by requiring higher rewards for stakers. Well-regulated derivative contracts on Ether would give Ether holders cheaper ways to hedge the risks of staking Ether. Currently, the only method to hedge these risks is to short-sell Ether on an exchange. Short-selling has limited utility because it relies on the availability of loaned Ether and the continued desire from the loaner to keep the Ether on loan. Derivatives such as futures and options have no such issues beyond the liquidity of the contract. Derivatives also provide new ways to hedge risks. Beyond selling futures instead of short-selling, they can also engage in more sophisticated strategies such as covered call writing or protective collars. Finally and perhaps most importantly, derivatives require less capital lock-up than short-selling for hedging due to their implied leverage. As such, the introduction of derivative contracts on Ether would decrease the risks of holding Ether for a given length of time, thereby increasing willingness in holders to stake Ether and decreasing the costs on the network to pay stakers. Of course, introducing a derivatives market has certain risks as well. The biggest risk is encouraging undue speculation. Speculation makes hedging cheaper, but it also can cause the spot price of Ether to deviate from the fundamental growth rate of the ecosystem. Miners are incentivized to provide network security by recieving fees in Ether. Therefore, as with Bitcoin, if derivative markets could be used to manipulate markets and cause large decreases in price, mining security could be impacted. While the jury is still out on whether the introduction of derivatives increases volatility and deviations from fundamental valuations on underlying assets, some measures could be implemented to control speculation, which are discussed in the following answer. Even so, given the practical needs for hedging the holding risk of Ether due to staking, the introduction of a well-regulated derivatives market would still augment the incentive structures in Proof-of-Stake despite the risks.","title":"17. How would the introduction of derivative contracts on Ether potentially change or modify the incentive structures that underlie a proof of stake consensus model?"},{"location":"other/ethhub-cftc-response/#18-given-the-evolving-nature-of-the-ether-cash-markets-underlying-potential-ether-derivative-contracts-what-are-the-commercial-risk-management-needs-for-a-derivative-contract-on-ether","text":"Existing risk management practices governing commodity derivative markets provides a useful framework for Ether derivatives. In particular, stringent monitoring of position limits would be warranted. If an individual or entity can trade contracts with notional amounts that exceed the amount of staked Ether, they can theoretically profit from a 51% attack on the network, which the Proof-of-Stake consensus model is supposed to prevent. One recommendation is to tie position limits to a fraction of staked Ether. Such measures would mitigate the risk that parties could collude to successfully attack the network. Another potential concern is the physical settlement of contracts with Ether. Given the developing nature of cash markets for Ether, there is a risk that the overreliance on physical settlement will cause artificial irregularities in the price of Ether. As explain in answer #17, the security of Ethereum does hinge on the price of Ether, so artificial irregularities in price can increase the risk of opening an attack vector on the network. As such, another recommendation is to keep settlements of Ether in cash. Otherwise, existing measures to control risk for commodity contracts should prove sufficient for Ether derivative contracts. While Ether operates as a currency-like asset, its volatility and risk factors better reflect a commodity at current valuations. Exchanges would be prudent to apply similar limits to leverage and open interest accordingly.","title":"18. Given the evolving nature of the Ether cash markets underlying potential Ether derivative contracts, what are the commercial risk management needs for a derivative contract on Ether?"},{"location":"other/ethhub-cftc-response/#19-please-list-any-potential-impacts-on-ether-and-the-ethereum-network-that-may-arise-from-the-listing-or-trading-of-derivative-contracts-on-ether","text":"Answer: Market activity, including the trading of derivative contracts, that facilitate price discovery, hedging of risks, and increase liquidity are beneficial for Ether and the Ethereum Network. In both proof-of-work and proof-of-stake models, network security is improved when free markets provide accurate price signals to miners and coin holders and enable them to trade and hedge risks appropriately. As described above in questions 17 and 18, derivative markets should take measures that limit the potential for large actors to unduly manipulate market prices as, similar to bitcoin, market crashes can impact mining security incentives.","title":"19. Please list any potential impacts on Ether and the Ethereum Network that may arise from the listing or trading of derivative contracts on Ether."},{"location":"other/ethhub-cftc-response/#20-are-there-any-types-of-trader-or-intermediary-conduct-that-has-occurred-in-the-international-ether-derivative-markets-that-raise-market-risks-or-challenges-and-should-be-monitored-closely-by-trading-venues-or-regulators","text":"The off-shore exchange BitMex, incorporated in the Seychelles, is in a position to engage in market manipulation through its proprietary trading desk that has direct advantages over customer traders. Additionally, BitMex introduced a perpetual swap product that allows customers to purchase ETHUSD perpetual swap contracts and take long or short positions. Bitcoin Quanto ETH/USD contract has a fixed Bitcoin multiplier regardless of the USD price of ETH. This allows the trader to go long or short the ETH/USD exchange rate without ever touching ETH or USD. This product disproportionately reduces the risk of either a long or short side play. Additionally, BitMex offers unchecked leverage up to 50x on the ETH/USD perpetual swap.","title":"20. Are there any types of trader or intermediary conduct that has occurred in the international Ether derivative markets that raise market risks or challenges and should be monitored closely by trading venues or regulators?"},{"location":"other/ethhub-cftc-response/#21-what-other-factors-could-impact-the-commissions-ability-to-properly-oversee-or-monitor-trading-in-derivative-contracts-on-ether-as-well-as-the-underlying-ether-cash-markets","text":"The Ethereum Community views privacy as a fundamental human right and as a guarantor of individual human dignity. As such, privacy is one of the core features being worked on by multiple teams. The technology is expected to have profound effects on both the privacy of Ethereum and the scalability of the network. Privacy technology on Ethereum already has working implementations being deployed to the Ethereum main network ( https://medium.com/aztec-protocol/confidential-transactions-have-arrived-a-dive-into-the-aztec-protocol-a1794c00c009 ). This privacy technology may impede the Commission's ability to monitor, audit or oversee trading activity in the future. Inspite the drawbacks, the community believes it necessary to the preservation of individual freedoms. Requiring derivative contract operators to conduct their operations transparently (i.e. not privately) is a possible way to allow oversight.","title":"21. What other factors could impact the Commission\u2019s ability to properly oversee or monitor trading in derivative contracts on Ether as well as the underlying Ether cash markets?"},{"location":"other/ethhub-cftc-response/#22-are-there-any-emerging-best-practices-for-monitoring-the-ethereum-network-and-public-blockchains-more-broadly","text":"Due to the transparency of blockchains, there are multiple services that provide monitoring, visualization and analytical tools for Ethereum and related applications that are built on top. The first group of tools is so-called block explorers \u2014 applications that allow users to view past transactions and state of the network. Some Ethereum block explorers are Etherscan , BlockScout , and EthStats . There are various datasets available to download and analyze Ethereum data, collected by multiple organizations. Different datasets have different content and format, and other tools might be required to get meaningful insights from the data. Google released dataset from its BigQuery Public Data and Alethio is working on the Ethereum Linked Data . As each transaction by definition involves two or more parties, the Ethereum network can be seen as a giant graph of financial interactions. Several projects allow viewing parts of this graph by choosing account or contract of interest. Observeth displays ether and token transfers in a given period of time. Ethtective focuses on showing accumulated graph of interactions for a given Ethereum account. Finally, there are application-specific visualization and analytic tools. Most of these tools are focused on financial protocols. For example, MKR Tools provides an overview of the debt positions made via Maker DAO. 0x Tracker displays all token exchanges that go through the 0x Protocol. Loanscan gives insights into the lending activity facilitated by Dharma and other protocols.","title":"22. Are there any emerging best practices for monitoring the Ethereum Network and public blockchains more broadly?"},{"location":"other/ethhub-cftc-response/#cyber-security-and-custody","text":"","title":"Cyber Security and Custody"},{"location":"other/ethhub-cftc-response/#23-are-there-security-issues-peculiar-to-the-ethereum-network-or-ethereum-supported-smart-contracts-that-need-to-be-addressed","text":"Smart contracts, like any piece of code, suffer from the possibility of having vulnerabilities or bugs. The security of smart contracts is paramount because they tend to interact with different financial apps and handle value transfer (such as the transfer of Ether or tokens) Independent auditing and smart contract security firms exist such as Zeppelin, Trail of Bits, and others . These firms provide contract auditing and fuzzing services. Additionally, formal verification services have emerged to formally verify smart contract code. Runtime Verification is one of the leading providers of these services for Ethereum smart contracts.","title":"23. Are there security issues peculiar to the Ethereum Network or Ethereum- supported smart contracts that need to be addressed?"},{"location":"other/ethhub-cftc-response/#24-are-there-any-best-practices-for-the-construction-and-security-of-ethereum-wallets-including-but-not-limited-to-the-number-of-keys-required-to-sign-a-transaction-and-how-access-to-the-keys-should-be-segregated","text":"There is a wide range of solutions tackling the problem of storing and managing Ethereum assets a.k.a. creating and using an Ethereum wallet. Solutions vary in the security, usability, and dependence on third-parties. All wallet products can be divided into two groups depending on who owns and controls the private key. First, there are centralized solutions that own the private keys and therefore the underlying assets. They can potentially censor user's actions and are vulnerable to hacks as they become honeypots, but can offer features like account recovery, shorter passphrases, and overall better user experience. Second, there are self-custody solutions where a user is in control of her private key, which is more secure and reliable, but at the same time, a user carries a risk of permanently losing her funds if she'll ever lose the private key. It's worth to mention that there're projects like Gnosis Safe aiming to deliver secure yet convenient and reliable wallet software where a user can be sure that funds will be safe even in the event of losing the private key without relying on a single service provider. Speaking about self-custody Ethereum wallets, there are implementations of multisignature wallets that are audited and battle-tested. Probably the biggest one in terms of adoption is MultiSigWallet . Another solution is Simple Multisig . To get some insight about what is the industry average in terms of the number of required keys to sign a transaction, one can look at the existing deployments of MultiSigWallet used by various Ethereum projects. For example, Aragon's multisig is 2-of-3, Bancor's wallet is 2-of-4, and Golem's contract is a 3-of-N multisig. In terms of creating new smart contracts for safe custody and management of assets, one can look for the best practices in the ecosystem. Consensys Ethereum Smart Contract Best Practices provide advice on what direction to follow when writing a contract, as well as highlight various caveats. ETHSecurity serves as a curated list of everything related to writing secure contracts including blogs, lectures, and tooling. Finally, there are tools designed to find potential vulnerabilities and bugs in the smart contract source code. To name a few, there are Mythril , Manticore , and Echidna .","title":"24. Are there any best practices for the construction and security of Ethereum wallets, including, but not limited to, the number of keys required to sign a transaction and how access to the keys should be segregated?"},{"location":"other/ethhub-cftc-response/#25-are-there-any-best-practices-for-conducting-an-independent-audit-of-ether-deposits","text":"The current design of Ethereum blockchain means that network state, as well as all transactions, are public. Anyone connected to the blockchain can verify balances of any account or smart contract without the need to ask permission of its owner. Alternatively, one can use a block explorer like Etherscan or Blockscout , which involves some trust in the honesty of the service provider but doesn't require from the user to run a node. There's a lot of research ( Aztec , Enigma ) directed towards general-purpose cryptographic schemes that will enable private transactions on Ethereum. With the introduction of such protocols, some (or all) information of the accounts that decided to preserve privacy will be kept in secret. In most cases, to audit the balance of a private account or smart contract, one would need to cooperate with the owner of such account in some way. The exact way of collaboration will largely depend on the privacy solution that will be used. One example might involve sharing \"view keys\" with the auditor, which will allow viewing the balance of the wallet, but not to move the funds. Another solution is to use zero-knowledge proofs that can reveal some properties of the underlying wallet (say, there are more than 10,000 ETH in that wallet) without revealing the exact amount of funds. Many firms conducting audits utilize tools or forensics services such as Chainalysis to audit and provide track and trace for transactions from deposit/source to destination. Additionally, private sector CPA firms including PwC, Deloitte, EY, and Accenture now provide full-service forensics for cryptocurrencies and blockchains.","title":"25. Are there any best practices for conducting an independent audit of Ether deposits?"},{"location":"other/get-involved/","text":"How can I get involved with EthHub? Join the EthHub discord! Learn to make changes to EthHub pages Head on over to the EthHub's Github repo . Create a new Github account or login into your existing account Follow this great guide to learn how to make your first pull request Help translate existing pages See Internationalization for more details on the plan to translate EthHub. Join the EthHub discord and request to join the Internationalization working group Learn to make pull requests from the section above. To translate a page, simply navigate to the branch for your desired language and make a pull request on the page you translate. Note that all changes and pull requests should be submitted to their target language's designated EthHub repo branch. Consider donating to EthHub If you don't have the time, talent, or energy to contribute to EthHub directly, that doesn't mean you can't play a part. EthHub plans to continue to provide educational content to the Ethereum community. However in order to maintain sustainable current and spur future growth, we're seeking community donations as well as implementing ideas for other revenue-generating activities that will allow us to inject the capital straight back into growing EthHub. Additionally, at the start of every month, we plan to publish a detailed transparency report breaking down the revenues we\u2019ve generated, what the funds were used for, current balances, among other things. If you\u2019d like to support the continued growth of EthHub, please consider supporting us by sending a one-time donation to 0xa19fcdad77c1f0fd184689aca88babcf68010347 or a recurring donation via our Gitcoin grant .","title":"Get Involved"},{"location":"other/get-involved/#how-can-i-get-involved-with-ethhub","text":"","title":"How can I get involved with EthHub?"},{"location":"other/get-involved/#join-the-ethhub-discord","text":"","title":"Join the EthHub discord!"},{"location":"other/get-involved/#learn-to-make-changes-to-ethhub-pages","text":"Head on over to the EthHub's Github repo . Create a new Github account or login into your existing account Follow this great guide to learn how to make your first pull request","title":"Learn to make changes to EthHub pages"},{"location":"other/get-involved/#help-translate-existing-pages","text":"See Internationalization for more details on the plan to translate EthHub. Join the EthHub discord and request to join the Internationalization working group Learn to make pull requests from the section above. To translate a page, simply navigate to the branch for your desired language and make a pull request on the page you translate. Note that all changes and pull requests should be submitted to their target language's designated EthHub repo branch.","title":"Help translate existing pages"},{"location":"other/get-involved/#consider-donating-to-ethhub","text":"If you don't have the time, talent, or energy to contribute to EthHub directly, that doesn't mean you can't play a part. EthHub plans to continue to provide educational content to the Ethereum community. However in order to maintain sustainable current and spur future growth, we're seeking community donations as well as implementing ideas for other revenue-generating activities that will allow us to inject the capital straight back into growing EthHub. Additionally, at the start of every month, we plan to publish a detailed transparency report breaking down the revenues we\u2019ve generated, what the funds were used for, current balances, among other things. If you\u2019d like to support the continued growth of EthHub, please consider supporting us by sending a one-time donation to 0xa19fcdad77c1f0fd184689aca88babcf68010347 or a recurring donation via our Gitcoin grant .","title":"Consider donating to EthHub"},{"location":"other/grants-process/","text":"Grants Process NOTE: This is a working draft. All the ideas presented below are just that - ideas. We encourage everyone to submit their own ideas and start discussions around what can be done to improve the Grants Process within Ethereum. Summary This document was sparked by a recent Twitter thread where members of the Ethereum community came together to create a document aimed at disscussing ideas for new methods and processes that the Ethereum Foundation and it's community can work on to make the Grants process the best it can be for its recipients. The Discussion Main variables to consider prior to giving the grant Firstly, work should already be in progress. Is the project working towards an achievable goal? The team is recommended to have experience delivering ETH/DLT solutions Teams that are potential recipients of a grant should have a brief initial chat with EF to getting to know them, how they work and what their goals are. There needs to be due diligence to some degree. This also may not be necessary if a project with already completed work can be reviewed publicly. The Community (developer community) should be updated with their progress and kept engaged with learning material etc.. What can the Ethereum Foundation do to make the grants process better? The project\u2019s work should have already begun and the project should disclose what the grant will be used for. Grants should not pay for planning rather for execution. Once the applicant receives a Notice of Grant and the funds have been disbursed, they will continue to work on the project. Visibility into grant decisions and why certain amounts are given From a grantee perspective, when receiving a grant of certain amounts it would be nice to know why this particular amount was granted. It would be helpful for the grant provider to explain WHY the grant was awarded and WHY such an amount. It would also be good to clarify what is expected from the specific grant amount. Also, it would be nice to know what the projects have to do in order to potentially receive a follow-up grant etc.. Implement Checkpoints / Demos The grant recipients are responsible for meeting with the foundation grant team for financial reporting requirements and development updates. Disclosure of funds spent A timeline of use-of-funds should be announced prior to receiving the capital. For example, 2 full-time devs and 2 part-time, 40 hours a week and 20 hours a week respectively. Financial reporting includes: How much was spent each month and what it was for For personal privacy/security, there is no need to disclose how much each person received. An idea of what the rest of the funds will be used for Support/Guidance For funds usage and potential advisory: tips/advice on how to use their grants, such as if they should cash out / convert to Dai in order to cover their operations for X amount of time. Some ideas/options include: i. Multi-Sig where the grant funds are held in Dai/Eth This gives a transparent view of the distribution of funds given out on a monthly basis and to fund consumption progress. Perhaps one funding schedule announced by the team, they then give them funds? Clear usage of funds/transparency. The multi-signature wallet requirement ensures redundancy and prevention from accidental loss or theft of funds. ii. The grants process doesn't need to enforce an ideal situation because if a project is working on DLT tech you should be trying to #hodl crypto and pay your workers in tokens. If the EF transfers USD to a foreign account, the banks are going to take a fat ~5% FX fee/premium. If you're not running on USD and you don't want to hold ETH, the team may find it best to take the ETH and sell it at a local exchange (jurisdiction /legal dependent). For example, DAI is, of course, a solution to the volatility issue, but if you're not in the US you're going to struggle to liquidate it to local currency, plus you're taking a position on USD compared to your local labor. iii. As a grant giver, you may need the developer community or foundation to help out. It is what the project needs - some are self-sufficient and require very little involvement but others may need some hand-holding and need an army of internal/external resources. iv. Mentoring from the funding foundation to help guide the grantee. This would include reporting to the funding foundation on a scheduled basis. Where the mentor can chat with the team about the overall financial status and project performance of the grant project. Product market fit (PMF) - This section is optional/dependant on the project origins Implement regular PMF analysis and identify whether the portfolio company will survive in the long run and then assist them in refining their PMF (if it is not too late). This section is optional/dependant on the project because some grants aren't concerned with market fit. For example, many documentation or research projects aren't going to be valuable in any market. Encourage inter-grantees company partnerships and synergies When a company gets a grant from a foundation, they agree to work together and it should be a win-win partnership. Closeout requirements This process includes a review of the final financial and technical progress from the grantee, the grant lifecycle end. The project is then considered for a follow-up grant or the grant process closes. Resources How the Ethereum Foundation grants program makes decisions Ethereum Fundraising Event Ethereum Foundation Grants Update - The Most Recent Grants Wave","title":"Grants Process"},{"location":"other/grants-process/#grants-process","text":"NOTE: This is a working draft. All the ideas presented below are just that - ideas. We encourage everyone to submit their own ideas and start discussions around what can be done to improve the Grants Process within Ethereum.","title":"Grants Process"},{"location":"other/grants-process/#summary","text":"This document was sparked by a recent Twitter thread where members of the Ethereum community came together to create a document aimed at disscussing ideas for new methods and processes that the Ethereum Foundation and it's community can work on to make the Grants process the best it can be for its recipients.","title":"Summary"},{"location":"other/grants-process/#the-discussion","text":"","title":"The Discussion"},{"location":"other/grants-process/#main-variables-to-consider-prior-to-giving-the-grant","text":"Firstly, work should already be in progress. Is the project working towards an achievable goal? The team is recommended to have experience delivering ETH/DLT solutions Teams that are potential recipients of a grant should have a brief initial chat with EF to getting to know them, how they work and what their goals are. There needs to be due diligence to some degree. This also may not be necessary if a project with already completed work can be reviewed publicly. The Community (developer community) should be updated with their progress and kept engaged with learning material etc..","title":"Main variables to consider prior to giving the grant"},{"location":"other/grants-process/#what-can-the-ethereum-foundation-do-to-make-the-grants-process-better","text":"The project\u2019s work should have already begun and the project should disclose what the grant will be used for. Grants should not pay for planning rather for execution. Once the applicant receives a Notice of Grant and the funds have been disbursed, they will continue to work on the project. Visibility into grant decisions and why certain amounts are given From a grantee perspective, when receiving a grant of certain amounts it would be nice to know why this particular amount was granted. It would be helpful for the grant provider to explain WHY the grant was awarded and WHY such an amount. It would also be good to clarify what is expected from the specific grant amount. Also, it would be nice to know what the projects have to do in order to potentially receive a follow-up grant etc.. Implement Checkpoints / Demos The grant recipients are responsible for meeting with the foundation grant team for financial reporting requirements and development updates. Disclosure of funds spent A timeline of use-of-funds should be announced prior to receiving the capital. For example, 2 full-time devs and 2 part-time, 40 hours a week and 20 hours a week respectively. Financial reporting includes: How much was spent each month and what it was for For personal privacy/security, there is no need to disclose how much each person received. An idea of what the rest of the funds will be used for Support/Guidance For funds usage and potential advisory: tips/advice on how to use their grants, such as if they should cash out / convert to Dai in order to cover their operations for X amount of time. Some ideas/options include: i. Multi-Sig where the grant funds are held in Dai/Eth This gives a transparent view of the distribution of funds given out on a monthly basis and to fund consumption progress. Perhaps one funding schedule announced by the team, they then give them funds? Clear usage of funds/transparency. The multi-signature wallet requirement ensures redundancy and prevention from accidental loss or theft of funds. ii. The grants process doesn't need to enforce an ideal situation because if a project is working on DLT tech you should be trying to #hodl crypto and pay your workers in tokens. If the EF transfers USD to a foreign account, the banks are going to take a fat ~5% FX fee/premium. If you're not running on USD and you don't want to hold ETH, the team may find it best to take the ETH and sell it at a local exchange (jurisdiction /legal dependent). For example, DAI is, of course, a solution to the volatility issue, but if you're not in the US you're going to struggle to liquidate it to local currency, plus you're taking a position on USD compared to your local labor. iii. As a grant giver, you may need the developer community or foundation to help out. It is what the project needs - some are self-sufficient and require very little involvement but others may need some hand-holding and need an army of internal/external resources. iv. Mentoring from the funding foundation to help guide the grantee. This would include reporting to the funding foundation on a scheduled basis. Where the mentor can chat with the team about the overall financial status and project performance of the grant project. Product market fit (PMF) - This section is optional/dependant on the project origins Implement regular PMF analysis and identify whether the portfolio company will survive in the long run and then assist them in refining their PMF (if it is not too late). This section is optional/dependant on the project because some grants aren't concerned with market fit. For example, many documentation or research projects aren't going to be valuable in any market. Encourage inter-grantees company partnerships and synergies When a company gets a grant from a foundation, they agree to work together and it should be a win-win partnership. Closeout requirements This process includes a review of the final financial and technical progress from the grantee, the grant lifecycle end. The project is then considered for a follow-up grant or the grant process closes.","title":"What can the Ethereum Foundation do to make the grants process better?"},{"location":"other/grants-process/#resources","text":"How the Ethereum Foundation grants program makes decisions Ethereum Fundraising Event Ethereum Foundation Grants Update - The Most Recent Grants Wave","title":"Resources"},{"location":"other/internationalization/","text":"Internationalization of EthHub The purpose of Ethereum is to be a decentralized network that is open to anyone to use, build upon, develop, and maintain. Currently, nearly all documentation and resources for Ethereum are written in English. In order for the Ethereum community to become truly global, it needs to become more accessible to those who do not speak English. EthHub can play a vital role in this process. This page was created to plan the roadmap for translating EthHub into multiple languages. How Can I help? Start by reading the plan below. If you are interested in helping, please join the EthHub Discord and request to join the group. Head over to this page to learn how get started. General plan This plan was the original outline for translating EthHub. Updates to this plan are needed. Target Audiences Spanish Chinese Hindi Arabic Funding Funding would be necessary to incentivize and compensate the translators. Strategy Translating EthHub is going to be no small feat especially when it comes to maintainence. It would be nearly impossible to actively translate every pull request as they are submitted. It makes more sense to create checkpoints or editions for the international versions of EthHub. This would allow us to carefully plan and review the required materials to be included and translated. Formalizing English edition The EthHub community will need to go through the entire site and determine what information needs to be written, edited, and reviewed before it is handed over to the translators. By creating editions instead of sister sites, we won't have to aim for a moving target. It may be appropriate to create a branch of the Github repo dedicated to each edition. Translating into target languages There are two ways we can go about translating the materials: recruit and fund each translation team or place bounties on each page and rely on individual contributions. Place bounties for translating each section After the English edition is finalized, a translation branch could be made for each language and a bounty could be placed for each section or page. Gitcoin bounties would be used to place bounties for translating each EthHub page, page section, and/or graphic. Individual contributors could translate each page and claim the bounty. One downside to this method would be that it would still require editors to oversee each bounty and review that the translation is refined. Recruit and fund translation teams Teams of contributors could be selected and funded to oversee the translation of the entire translation process. Milestones or bounties could be created to distribute the funding. The team members would also review one another's work. Publication and Distribution Since we're going through the effort to formalize editions, we could publish the work. The editions could be published to IPFS We could partner with universities in target regions to distribute digital and/or physical copies Physical copies could potentially be printed and sold to support future editions and new languages","title":"Internationalization"},{"location":"other/internationalization/#internationalization-of-ethhub","text":"The purpose of Ethereum is to be a decentralized network that is open to anyone to use, build upon, develop, and maintain. Currently, nearly all documentation and resources for Ethereum are written in English. In order for the Ethereum community to become truly global, it needs to become more accessible to those who do not speak English. EthHub can play a vital role in this process. This page was created to plan the roadmap for translating EthHub into multiple languages.","title":"Internationalization of EthHub"},{"location":"other/internationalization/#how-can-i-help","text":"Start by reading the plan below. If you are interested in helping, please join the EthHub Discord and request to join the group. Head over to this page to learn how get started.","title":"How Can I help?"},{"location":"other/internationalization/#general-plan","text":"This plan was the original outline for translating EthHub. Updates to this plan are needed.","title":"General plan"},{"location":"other/internationalization/#target-audiences","text":"Spanish Chinese Hindi Arabic","title":"Target Audiences"},{"location":"other/internationalization/#funding","text":"Funding would be necessary to incentivize and compensate the translators.","title":"Funding"},{"location":"other/internationalization/#strategy","text":"Translating EthHub is going to be no small feat especially when it comes to maintainence. It would be nearly impossible to actively translate every pull request as they are submitted. It makes more sense to create checkpoints or editions for the international versions of EthHub. This would allow us to carefully plan and review the required materials to be included and translated.","title":"Strategy"},{"location":"other/internationalization/#formalizing-english-edition","text":"The EthHub community will need to go through the entire site and determine what information needs to be written, edited, and reviewed before it is handed over to the translators. By creating editions instead of sister sites, we won't have to aim for a moving target. It may be appropriate to create a branch of the Github repo dedicated to each edition.","title":"Formalizing English edition"},{"location":"other/internationalization/#translating-into-target-languages","text":"There are two ways we can go about translating the materials: recruit and fund each translation team or place bounties on each page and rely on individual contributions.","title":"Translating into target languages"},{"location":"other/internationalization/#place-bounties-for-translating-each-section","text":"After the English edition is finalized, a translation branch could be made for each language and a bounty could be placed for each section or page. Gitcoin bounties would be used to place bounties for translating each EthHub page, page section, and/or graphic. Individual contributors could translate each page and claim the bounty. One downside to this method would be that it would still require editors to oversee each bounty and review that the translation is refined.","title":"Place bounties for translating each section"},{"location":"other/internationalization/#recruit-and-fund-translation-teams","text":"Teams of contributors could be selected and funded to oversee the translation of the entire translation process. Milestones or bounties could be created to distribute the funding. The team members would also review one another's work.","title":"Recruit and fund translation teams"},{"location":"other/internationalization/#publication-and-distribution","text":"Since we're going through the effort to formalize editions, we could publish the work. The editions could be published to IPFS We could partner with universities in target regions to distribute digital and/or physical copies Physical copies could potentially be printed and sold to support future editions and new languages","title":"Publication and Distribution"},{"location":"other/funds/0xeap/","text":"0xeap The 0x Ecosystem Acceleration Program gives teams access to a variety of services including funding, dedicated technical support, and recruiting assistance. We created the Ecosystem Acceleration Program to bolster the expansion of both infrastructure projects and relayers building on 0x. Milestone Grants Receive non-dilutive capital ranging from $10,000 to $100,000, with grant sizes awarded based on the quality of your team, vision, execution, and community involvement. Important Links Website: https://0x.org/eap Apply: https://0x.smapply.io/","title":"0xeap"},{"location":"other/funds/0xeap/#0xeap","text":"The 0x Ecosystem Acceleration Program gives teams access to a variety of services including funding, dedicated technical support, and recruiting assistance. We created the Ecosystem Acceleration Program to bolster the expansion of both infrastructure projects and relayers building on 0x.","title":"0xeap"},{"location":"other/funds/0xeap/#milestone-grants","text":"Receive non-dilutive capital ranging from $10,000 to $100,000, with grant sizes awarded based on the quality of your team, vision, execution, and community involvement.","title":"Milestone Grants"},{"location":"other/funds/0xeap/#important-links","text":"Website: https://0x.org/eap Apply: https://0x.smapply.io/","title":"Important Links"},{"location":"other/funds/aragon-nest/","text":"Aragon Nest A grants program to support the development of the ecosystems by aragon and placeholder.vc. Goal The goal of the program is to attract talent to research and build the necessary tooling for developing solutions around Aragon and Ethereum. What we look for Tools for making the ecosystem sustainable, such as open source repositories run by governance tokens using Aragon. Developer tools for building applications on Aragon. Better communication tools for effective governance, possibly using Whisper and other messaging protocols, by having an app which locks an action in time until there has been significant discussion. Complex governance mechanisms with off-chain components, to achieve scalability. Aragon UI developer tools and implementations in different frameworks. Grant sizes Funding: From $50,000 up to $100,000 in ETH, split into chunks paid out over achieved deliverables. Success reward: Up to $50,000 in ANT, given out when all deliverables are ready. Important Links Website: https://github.com/aragon/nest Announcement: https://blog.aragon.org/introducing-aragon-nest-1aa8c91c0566/","title":"Aragon Nest"},{"location":"other/funds/aragon-nest/#aragon-nest","text":"A grants program to support the development of the ecosystems by aragon and placeholder.vc.","title":"Aragon Nest"},{"location":"other/funds/aragon-nest/#goal","text":"The goal of the program is to attract talent to research and build the necessary tooling for developing solutions around Aragon and Ethereum.","title":"Goal"},{"location":"other/funds/aragon-nest/#what-we-look-for","text":"Tools for making the ecosystem sustainable, such as open source repositories run by governance tokens using Aragon. Developer tools for building applications on Aragon. Better communication tools for effective governance, possibly using Whisper and other messaging protocols, by having an app which locks an action in time until there has been significant discussion. Complex governance mechanisms with off-chain components, to achieve scalability. Aragon UI developer tools and implementations in different frameworks.","title":"What we look for"},{"location":"other/funds/aragon-nest/#grant-sizes","text":"Funding: From $50,000 up to $100,000 in ETH, split into chunks paid out over achieved deliverables. Success reward: Up to $50,000 in ANT, given out when all deliverables are ready.","title":"Grant sizes"},{"location":"other/funds/aragon-nest/#important-links","text":"Website: https://github.com/aragon/nest Announcement: https://blog.aragon.org/introducing-aragon-nest-1aa8c91c0566/","title":"Important Links"},{"location":"other/funds/consensys-labs/","text":"Consensys Labs ConsenSys Labs incubates the best teams of Web3 across the globe, providing them capital, mentorship, and access to ConsenSys\u2019s network of top-tier projects and talent. Portfolio adchain Airswap Balance Benefactory Bounties Network BTC Relay Civil code Fund gitcoin gnosis gridplus infura metamask uport Truffle SingularDTV Important Links Website: https://consensys.net/labs/","title":"Consensys Labs"},{"location":"other/funds/consensys-labs/#consensys-labs","text":"ConsenSys Labs incubates the best teams of Web3 across the globe, providing them capital, mentorship, and access to ConsenSys\u2019s network of top-tier projects and talent.","title":"Consensys Labs"},{"location":"other/funds/consensys-labs/#portfolio","text":"adchain Airswap Balance Benefactory Bounties Network BTC Relay Civil code Fund gitcoin gnosis gridplus infura metamask uport Truffle SingularDTV","title":"Portfolio"},{"location":"other/funds/consensys-labs/#important-links","text":"Website: https://consensys.net/labs/","title":"Important Links"},{"location":"other/funds/consensys-vc/","text":"Consensys VC We invest in the Ethereum powered decentralized future. ConsenSys Ventures empowers entrepreneurs creating the building blocks of Web 3.0 About ConsenSys Ventures is the Venture Capital arm of ConsenSys, investing in pre-seed and seed stage Ethereum projects across the Web 3.0 stack. Sector and geography agnostic, ConsenSys Ventures is building a portfolio of companies that support each other, as well as the ConsenSys and the broader Ethereum eco system. Important Links Website: https://consensys.vc/","title":"Consensys VC"},{"location":"other/funds/consensys-vc/#consensys-vc","text":"We invest in the Ethereum powered decentralized future. ConsenSys Ventures empowers entrepreneurs creating the building blocks of Web 3.0","title":"Consensys VC"},{"location":"other/funds/consensys-vc/#about","text":"ConsenSys Ventures is the Venture Capital arm of ConsenSys, investing in pre-seed and seed stage Ethereum projects across the Web 3.0 stack. Sector and geography agnostic, ConsenSys Ventures is building a portfolio of companies that support each other, as well as the ConsenSys and the broader Ethereum eco system.","title":"About"},{"location":"other/funds/consensys-vc/#important-links","text":"Website: https://consensys.vc/","title":"Important Links"},{"location":"other/funds/ecf/","text":"ECF The Ethereum Community Fund (ECF) aims to provide both funding and support to builders of decentralized technologies. Founding Members Cosmos OmiseGO Golem Web3 Foundation Global Brain MakerDAO Ethereum Foundation Status Members Quantstamp Wireline SpankChain Important Links Website: https://ecf.network Apply: https://ecfnetwork.typeform.com/to/nSA6Id 128 Things to Know When Applying for the Ethereum Community Fund","title":"ECF"},{"location":"other/funds/ecf/#ecf","text":"The Ethereum Community Fund (ECF) aims to provide both funding and support to builders of decentralized technologies.","title":"ECF"},{"location":"other/funds/ecf/#founding-members","text":"Cosmos OmiseGO Golem Web3 Foundation Global Brain MakerDAO Ethereum Foundation Status","title":"Founding Members"},{"location":"other/funds/ecf/#members","text":"Quantstamp Wireline SpankChain","title":"Members"},{"location":"other/funds/ecf/#important-links","text":"Website: https://ecf.network Apply: https://ecfnetwork.typeform.com/to/nSA6Id 128 Things to Know When Applying for the Ethereum Community Fund","title":"Important Links"},{"location":"other/funds/eth-prize/","text":"ETH Prize ETH Prize is a community research and bounty project that identifies the most critical issues facing the ethereum ecosystem and organizes bounties to solve them. Partners Status TrueBit L4 Web3 Foundation Funding partners 0x Status Ethereum Community Fund Toshi Bounties EthPM Blockscout Important Links Website: http://ethprize.io/","title":"Eth Prize"},{"location":"other/funds/eth-prize/#eth-prize","text":"ETH Prize is a community research and bounty project that identifies the most critical issues facing the ethereum ecosystem and organizes bounties to solve them.","title":"ETH Prize"},{"location":"other/funds/eth-prize/#partners","text":"Status TrueBit L4 Web3 Foundation","title":"Partners"},{"location":"other/funds/eth-prize/#funding-partners","text":"0x Status Ethereum Community Fund Toshi","title":"Funding partners"},{"location":"other/funds/eth-prize/#bounties","text":"EthPM Blockscout","title":"Bounties"},{"location":"other/funds/eth-prize/#important-links","text":"Website: http://ethprize.io/","title":"Important Links"},{"location":"other/funds/geco/","text":"Gnosis Ecosystem Fund The Gnosis Ecosystem Fund empowers teams to drive the global adoption of decentralized applications by leveraging the full potential of Gnosis' products and protocols. What kind of projects are we looking for? The main focus of the grant is to support projects that further the Gnosis ecosystem and our core mission to redistribute the future. Your proposed project should be directly connected to our products and vision. Proposals should focus on: Building on top of one of our platforms Integrating our smart contracts Creating tools/modules/extension for our products Our platforms and potential buidl ideas include: DutchX Gnosis Safe Prediction markets Furthermore, we will also consider projects involved in research and education. What are we offering? Funding (grants of between $5.000 and $100.000) Mentoring Community/Outreach Important Links Website: https://github.com/gnosis/GECO Announcement: https://blog.gnosis.pm/unveiling-the-gnosis-ecosystem-fund-7353926bfb65 Proposal template: https://github.com/gnosis/GECO/blob/master/Proposals/ProposalTemplate.md","title":"Geco"},{"location":"other/funds/geco/#gnosis-ecosystem-fund","text":"The Gnosis Ecosystem Fund empowers teams to drive the global adoption of decentralized applications by leveraging the full potential of Gnosis' products and protocols.","title":"Gnosis Ecosystem Fund"},{"location":"other/funds/geco/#what-kind-of-projects-are-we-looking-for","text":"The main focus of the grant is to support projects that further the Gnosis ecosystem and our core mission to redistribute the future. Your proposed project should be directly connected to our products and vision. Proposals should focus on: Building on top of one of our platforms Integrating our smart contracts Creating tools/modules/extension for our products Our platforms and potential buidl ideas include: DutchX Gnosis Safe Prediction markets Furthermore, we will also consider projects involved in research and education.","title":"What kind of projects are we looking for?"},{"location":"other/funds/geco/#what-are-we-offering","text":"Funding (grants of between $5.000 and $100.000) Mentoring Community/Outreach","title":"What are we offering?"},{"location":"other/funds/geco/#important-links","text":"Website: https://github.com/gnosis/GECO Announcement: https://blog.gnosis.pm/unveiling-the-gnosis-ecosystem-fund-7353926bfb65 Proposal template: https://github.com/gnosis/GECO/blob/master/Proposals/ProposalTemplate.md","title":"Important Links"},{"location":"other/funds/gitcoin/","text":"Gitcoin Grants Fast, easy, and secure way to provide recurring token contributions to the best OSS maintainers in your community. Your contribution is amplified by the signal it provides to other (potentially, larger) funders on important infrastructure projects. Grants utilizes the EIP-1337 standard for subscriptions on Ethereum. The standard makes use of meta-transactions, which allows for a transaction to be made on behalf of a paying subscriber on a recurring basis. This makes it easy to support projects in open source on a recurring basis, only confirming one initial subscription transaction. Important Links Website: https://gitcoin.co/grants/ Announcement: https://medium.com/gitcoin/gitcoin-grants-b91596191c0b","title":"Gitcoin"},{"location":"other/funds/gitcoin/#gitcoin-grants","text":"Fast, easy, and secure way to provide recurring token contributions to the best OSS maintainers in your community. Your contribution is amplified by the signal it provides to other (potentially, larger) funders on important infrastructure projects. Grants utilizes the EIP-1337 standard for subscriptions on Ethereum. The standard makes use of meta-transactions, which allows for a transaction to be made on behalf of a paying subscriber on a recurring basis. This makes it easy to support projects in open source on a recurring basis, only confirming one initial subscription transaction.","title":"Gitcoin Grants"},{"location":"other/funds/gitcoin/#important-links","text":"Website: https://gitcoin.co/grants/ Announcement: https://medium.com/gitcoin/gitcoin-grants-b91596191c0b","title":"Important Links"},{"location":"other/funds/gnosisx/","text":"Gnosis X Gnosis X \u2014 a challenge designed to encourage developers to build prediction market applications on Gnosis. About Throughout the year, we will be announcing different categories for prediction market use cases. The best application per category will be rewarded with GNO up to $100,000. Important Links Website: https://gnosis.pm/gnosisx.html Announcement: https://blog.gnosis.pm/are-you-up-for-the-challenge-introducing-gnosis-x-39c812b42993","title":"Gnosis X"},{"location":"other/funds/gnosisx/#gnosis-x","text":"Gnosis X \u2014 a challenge designed to encourage developers to build prediction market applications on Gnosis.","title":"Gnosis X"},{"location":"other/funds/gnosisx/#about","text":"Throughout the year, we will be announcing different categories for prediction market use cases. The best application per category will be rewarded with GNO up to $100,000.","title":"About"},{"location":"other/funds/gnosisx/#important-links","text":"Website: https://gnosis.pm/gnosisx.html Announcement: https://blog.gnosis.pm/are-you-up-for-the-challenge-introducing-gnosis-x-39c812b42993","title":"Important Links"},{"location":"other/funds/stable-fund/","text":"Stable Fund The Stable Fund is a small to mid-size granting program run by MakerDAO. It is designed to incentivise the third-party Dai ecosystem by disbursing milestone-based grants to teams wishing to build on our financial primitives. Investment We offer equity free grants of up to $50k. What we look for Projects that: use Dai or MakerDao infrastructure as a core component increase Dai adoption add stability to and/or de-risk existing economies open up new markets provide novel, easy to use, solutions solve real problems Important Links Website: https://www.makerdao.com/ Apply: rich@makerdao.com Announcement: https://medium.com/makerdao/announcing-the-makerdao-core-community-development-initiative-d388bfba88e3","title":"Stable Fund"},{"location":"other/funds/stable-fund/#stable-fund","text":"The Stable Fund is a small to mid-size granting program run by MakerDAO. It is designed to incentivise the third-party Dai ecosystem by disbursing milestone-based grants to teams wishing to build on our financial primitives.","title":"Stable Fund"},{"location":"other/funds/stable-fund/#investment","text":"We offer equity free grants of up to $50k.","title":"Investment"},{"location":"other/funds/stable-fund/#what-we-look-for","text":"Projects that: use Dai or MakerDao infrastructure as a core component increase Dai adoption add stability to and/or de-risk existing economies open up new markets provide novel, easy to use, solutions solve real problems","title":"What we look for"},{"location":"other/funds/stable-fund/#important-links","text":"Website: https://www.makerdao.com/ Apply: rich@makerdao.com Announcement: https://medium.com/makerdao/announcing-the-makerdao-core-community-development-initiative-d388bfba88e3","title":"Important Links"},{"location":"other/funds/status-incubate/","text":"Status Incubate Incubating Projects that are Building Web3. Funding Offer standard pre-seed funding in exchange for equity and tokens (where applicable). Funding for later-stage projects is also possible on a case-by-case basis. Important Links Website: https://dev-incubate.status.im/","title":"Status Incubate"},{"location":"other/funds/status-incubate/#status-incubate","text":"Incubating Projects that are Building Web3.","title":"Status Incubate"},{"location":"other/funds/status-incubate/#funding","text":"Offer standard pre-seed funding in exchange for equity and tokens (where applicable). Funding for later-stage projects is also possible on a case-by-case basis.","title":"Funding"},{"location":"other/funds/status-incubate/#important-links","text":"Website: https://dev-incubate.status.im/","title":"Important Links"},{"location":"questions-about-ethereum/if-ethereum-is-open-source-why-cant-it-be-copied/","text":"If Ethereum is open source why can't it be copied? While Ethereum's code is open-source, the actual value of Ethereum is the network of users, developers, and applications using the Ethereum network that give it value. So yes, someone could copy its code, but they would also have to compete with one of the most active community in cryptocurrency.","title":"If Ethereum is open source why can't it be copied?"},{"location":"questions-about-ethereum/if-ethereum-is-open-source-why-cant-it-be-copied/#if-ethereum-is-open-source-why-cant-it-be-copied","text":"While Ethereum's code is open-source, the actual value of Ethereum is the network of users, developers, and applications using the Ethereum network that give it value. So yes, someone could copy its code, but they would also have to compete with one of the most active community in cryptocurrency.","title":"If Ethereum is open source why can't it be copied?"},{"location":"questions-about-ethereum/is-ether-a-security/","text":"Is Ether a security? Answer In the US, the SEC has not issued a formal ruling, but recent comments suggest that they do not believe Ether is a security. Other jurisdictions have not made this distinction clear. Explanation Note: this question answers whether Ether fits the legal definition of a security. In the US, the SEC uses the Howey test to determine whether something can be legally considered a security. The test comes from the Supreme Court ruling in 1946 for SEC v. W.J. Howey Co . It stipulates four criteria: Requires investment of money (fiat currency) Money invested with expectation of profit Invested money goes toward a common enterprise Profit is generated by the efforts of a promoter or third party Ether easily fits the first two criteria. People buy Ether with fiat currency, and many do so with the expectation of profit. However, the second two criteria are more difficult to prove. First, money used to purchase Ether does not necessarily go toward a common enterprise. In its current form, purchased Ether only permits usage of the network, not ownership to an enterprise. This condition may change under Proof-of-Stake given that Ether offers people the ability to earn returns while securing the network. Even so, this feature does not fit cleanly into the traditional definition of a common enterprise. Second, Ethereum does not generate profit, nor does it rely on the efforts of a promoter or third party. Ethereum is a network, not a corporation, so it does not produce identifiable profits beyond the value appreciation of Ether. The value of Ether also originates from open source development. While Vitalik Buterin and the Ethereum Foundation contribute to Ethereum's development, so do many unaffiliated entities and individuals. As such, it is difficult to argue that Ether generates a profit based on efforts of a third party. While the SEC has not formally ruled on the legal status of Ether, comments from regulators in 2018 suggest that they see a compelling case to argue against classifying Ether as a security. Quotes from regulators \"And putting aside the fundraising that accompanied the creation of Ether, based on my understanding of the present state of Ether, the Ethereum network and its decentralized structure, current offers and sales of Ether are not securities transactions. ... Over time, there may be other sufficiently decentralized networks and systems where regulating the tokens or coins that function on them as securities may not be required. And of course there will continue to be systems that rely on central actors whose efforts are a key to the success of the enterprise. In those cases, application of the securities laws protects the investors who purchase the tokens or coins.\" Resources: Howey Test 101 Howey Test Background William Hinman, Director of Corporation Finance of the SEC. June 14, 2018 SEC Press Release","title":"Is Ether a security?"},{"location":"questions-about-ethereum/is-ether-a-security/#is-ether-a-security","text":"","title":"Is Ether a security?"},{"location":"questions-about-ethereum/is-ether-a-security/#answer","text":"In the US, the SEC has not issued a formal ruling, but recent comments suggest that they do not believe Ether is a security. Other jurisdictions have not made this distinction clear.","title":"Answer"},{"location":"questions-about-ethereum/is-ether-a-security/#explanation","text":"Note: this question answers whether Ether fits the legal definition of a security. In the US, the SEC uses the Howey test to determine whether something can be legally considered a security. The test comes from the Supreme Court ruling in 1946 for SEC v. W.J. Howey Co . It stipulates four criteria: Requires investment of money (fiat currency) Money invested with expectation of profit Invested money goes toward a common enterprise Profit is generated by the efforts of a promoter or third party Ether easily fits the first two criteria. People buy Ether with fiat currency, and many do so with the expectation of profit. However, the second two criteria are more difficult to prove. First, money used to purchase Ether does not necessarily go toward a common enterprise. In its current form, purchased Ether only permits usage of the network, not ownership to an enterprise. This condition may change under Proof-of-Stake given that Ether offers people the ability to earn returns while securing the network. Even so, this feature does not fit cleanly into the traditional definition of a common enterprise. Second, Ethereum does not generate profit, nor does it rely on the efforts of a promoter or third party. Ethereum is a network, not a corporation, so it does not produce identifiable profits beyond the value appreciation of Ether. The value of Ether also originates from open source development. While Vitalik Buterin and the Ethereum Foundation contribute to Ethereum's development, so do many unaffiliated entities and individuals. As such, it is difficult to argue that Ether generates a profit based on efforts of a third party. While the SEC has not formally ruled on the legal status of Ether, comments from regulators in 2018 suggest that they see a compelling case to argue against classifying Ether as a security.","title":"Explanation"},{"location":"questions-about-ethereum/is-ether-a-security/#quotes-from-regulators","text":"\"And putting aside the fundraising that accompanied the creation of Ether, based on my understanding of the present state of Ether, the Ethereum network and its decentralized structure, current offers and sales of Ether are not securities transactions. ... Over time, there may be other sufficiently decentralized networks and systems where regulating the tokens or coins that function on them as securities may not be required. And of course there will continue to be systems that rely on central actors whose efforts are a key to the success of the enterprise. In those cases, application of the securities laws protects the investors who purchase the tokens or coins.\"","title":"Quotes from regulators"},{"location":"questions-about-ethereum/is-ether-a-security/#resources","text":"Howey Test 101 Howey Test Background William Hinman, Director of Corporation Finance of the SEC. June 14, 2018 SEC Press Release","title":"Resources:"},{"location":"questions-about-ethereum/is-ether-needed-for-transaction-fees/","text":"Is Ether needed for transaction fees? Answer Yes. Ether is necessary for Ethereum network security and operational efficiency for miners. Explanation The notion that transaction fees on Ethereum can be paid in-protocol by something other than ether (such as an ERC20 token) is called 'economic abstraction'. We explain why the Ethereum protocol is unlikely to integrate economic abstraction below. Economic abstraction is often used to argue that the value of Ether will go to 0. The theory is that users could pay their transaction costs to miners in something other than Ether. Therefore, if that becomes rampant, Ether itself would have no value. This argument can be used on any Proof-of-Work blockchain, it's an especially popular criticism against Ethereum since it appears easy to create additional ERC20 tokens that can be exchanged for Ether. Quick recap on how transactions work on Ethereum. Each transaction uses a set amount of gas. Users pay miners to include their transaction using a gas price. Gas * Gas Price = transaction cost. The base protocol assumes gas price in ETH and every wallet calculates transaction cost in total ETH to pay. The argument against ETH value begins here. It says that users could pay their transaction cost in some currency or token instead of Ether, including digital USD. Miners could then directly sell tokens or currency into the currency of their choice. While rebuilding Ethereum to accept multiple currencies (even USD) is theoretically possible, this argument ignores how digital native tokens like Ether or Bitcoin act as a layer of security for the system. Tokens like Ether reduce the profitability of network hacks by tying network security to the value of the network's medium of exchange. If network security gets hit, so does the value of the token transacted on the network. Imagine a rogue miner on Ethereum gathers enough computing power to successfully 51% attack the network and divert the network's currency to a personal account. If the currency's value isn't tied to network security (say, USD), the hacker could easily sell these proceeds at full value in reasonably liquid markets. This cannot happen with Ether. Other miners would see this behavior immediately and make it known to relevant markets for Ether. As a result, not only would prices for Ether drop, Ether would also become highly illiquid, making it difficult for the hacker to make off with the pre-hack market value of the stolen Ether. This argument applies for any decentralized blockchain, including Bitcoin. Practically speaking, paying with multiple currencies also adds friction, cost, and a UX nightmare to the operations of a miner. It would have to go through the following process: Open communication with a miner Manually calc the cost of the tx in that tokens value Send miner payment wait for confirm Execute initial TX and get the nonce Tell the miner the nonce and wait for his next block On top of the added friction to users mentioned above, there is an added cost to users to pay for their transaction in something other than ETH. Sending ETH in a transaction costs 21000 gas while sending tokens costs 40000 gas or more. Calculating gas cost and understanding the gas market is no easy task. Wallets have spent years making this UX smooth. There is no incentive for a wallet to streamline the payment of gas in tokens as the complexities are deep. Now let's talk about miners. Miners are trying to make a profit and have to pay for hardware/electricity costs. They do not want to have a portfolio of 50 different cryptocurrencies with wild volatility and no liquidity. This creates an operational nightmare. As mentioned, this is possible on all PoW chains. Bitcoin even has a tool that enables users to pay for transaction speed in payments other than BTC http://confirmtx.com . However, because of the arguments above, it's not rampant in BTC or ETH because it violates core security assumptions and has extreme practical limitations for miners. Resources: Eric Conners Twitter Thread Vitalik Buterins Comment on Economic Abstraction","title":"Is Ether needed for transaction fees?"},{"location":"questions-about-ethereum/is-ether-needed-for-transaction-fees/#is-ether-needed-for-transaction-fees","text":"","title":"Is Ether needed for transaction fees?"},{"location":"questions-about-ethereum/is-ether-needed-for-transaction-fees/#answer","text":"Yes. Ether is necessary for Ethereum network security and operational efficiency for miners.","title":"Answer"},{"location":"questions-about-ethereum/is-ether-needed-for-transaction-fees/#explanation","text":"The notion that transaction fees on Ethereum can be paid in-protocol by something other than ether (such as an ERC20 token) is called 'economic abstraction'. We explain why the Ethereum protocol is unlikely to integrate economic abstraction below. Economic abstraction is often used to argue that the value of Ether will go to 0. The theory is that users could pay their transaction costs to miners in something other than Ether. Therefore, if that becomes rampant, Ether itself would have no value. This argument can be used on any Proof-of-Work blockchain, it's an especially popular criticism against Ethereum since it appears easy to create additional ERC20 tokens that can be exchanged for Ether. Quick recap on how transactions work on Ethereum. Each transaction uses a set amount of gas. Users pay miners to include their transaction using a gas price. Gas * Gas Price = transaction cost. The base protocol assumes gas price in ETH and every wallet calculates transaction cost in total ETH to pay. The argument against ETH value begins here. It says that users could pay their transaction cost in some currency or token instead of Ether, including digital USD. Miners could then directly sell tokens or currency into the currency of their choice. While rebuilding Ethereum to accept multiple currencies (even USD) is theoretically possible, this argument ignores how digital native tokens like Ether or Bitcoin act as a layer of security for the system. Tokens like Ether reduce the profitability of network hacks by tying network security to the value of the network's medium of exchange. If network security gets hit, so does the value of the token transacted on the network. Imagine a rogue miner on Ethereum gathers enough computing power to successfully 51% attack the network and divert the network's currency to a personal account. If the currency's value isn't tied to network security (say, USD), the hacker could easily sell these proceeds at full value in reasonably liquid markets. This cannot happen with Ether. Other miners would see this behavior immediately and make it known to relevant markets for Ether. As a result, not only would prices for Ether drop, Ether would also become highly illiquid, making it difficult for the hacker to make off with the pre-hack market value of the stolen Ether. This argument applies for any decentralized blockchain, including Bitcoin. Practically speaking, paying with multiple currencies also adds friction, cost, and a UX nightmare to the operations of a miner. It would have to go through the following process: Open communication with a miner Manually calc the cost of the tx in that tokens value Send miner payment wait for confirm Execute initial TX and get the nonce Tell the miner the nonce and wait for his next block On top of the added friction to users mentioned above, there is an added cost to users to pay for their transaction in something other than ETH. Sending ETH in a transaction costs 21000 gas while sending tokens costs 40000 gas or more. Calculating gas cost and understanding the gas market is no easy task. Wallets have spent years making this UX smooth. There is no incentive for a wallet to streamline the payment of gas in tokens as the complexities are deep. Now let's talk about miners. Miners are trying to make a profit and have to pay for hardware/electricity costs. They do not want to have a portfolio of 50 different cryptocurrencies with wild volatility and no liquidity. This creates an operational nightmare. As mentioned, this is possible on all PoW chains. Bitcoin even has a tool that enables users to pay for transaction speed in payments other than BTC http://confirmtx.com . However, because of the arguments above, it's not rampant in BTC or ETH because it violates core security assumptions and has extreme practical limitations for miners.","title":"Explanation"},{"location":"questions-about-ethereum/is-ether-needed-for-transaction-fees/#resources","text":"Eric Conners Twitter Thread Vitalik Buterins Comment on Economic Abstraction","title":"Resources:"},{"location":"questions-about-ethereum/is-ethereum-immutable/","text":"Is Ethereum Immutable? Yes, transactions and data stored within the Ethereum blockchain are immutable. Immutability and The DAO Hard Fork Hard forks do not affect immutability because the data is still accessible and unchanged on the original chain. In the event of a fork, users have the choice to use either fork. Users form a social consensus around which chain is worth using and supporting in the event of a fork. A forked chain is simply a new blockchain with different consensus rules that is entirely immutable according to its ruleset. \"As a trivial example, the only thing the DAO fork did was insert a set of value transfers from one account to another, but that still has the result that transactions (by the attacker) that would have succeeded will now fail with insufficient funds. Likewise, you can construct transactions that will fail with the new changes to gas costs, or that will succeed if a null account exists but fail if it doesn't. 'Immutability' is overused and under-specified. Strictly speaking, it should mean only that the blockchain - the set of past transactions - is not modified, which no Ethereum fork has ever done. But people use it for a much vaguer and harder to define principle of not violating their expectations.\" - Nick Johnson [1]. Important Links Reddit thread on Immutability","title":"Is Ethereum immutable?"},{"location":"questions-about-ethereum/is-ethereum-immutable/#is-ethereum-immutable","text":"Yes, transactions and data stored within the Ethereum blockchain are immutable.","title":"Is Ethereum Immutable?"},{"location":"questions-about-ethereum/is-ethereum-immutable/#immutability-and-the-dao-hard-fork","text":"Hard forks do not affect immutability because the data is still accessible and unchanged on the original chain. In the event of a fork, users have the choice to use either fork. Users form a social consensus around which chain is worth using and supporting in the event of a fork. A forked chain is simply a new blockchain with different consensus rules that is entirely immutable according to its ruleset. \"As a trivial example, the only thing the DAO fork did was insert a set of value transfers from one account to another, but that still has the result that transactions (by the attacker) that would have succeeded will now fail with insufficient funds. Likewise, you can construct transactions that will fail with the new changes to gas costs, or that will succeed if a null account exists but fail if it doesn't. 'Immutability' is overused and under-specified. Strictly speaking, it should mean only that the blockchain - the set of past transactions - is not modified, which no Ethereum fork has ever done. But people use it for a much vaguer and harder to define principle of not violating their expectations.\" - Nick Johnson [1].","title":"Immutability and The DAO Hard Fork"},{"location":"questions-about-ethereum/is-ethereum-immutable/#important-links","text":"Reddit thread on Immutability","title":"Important Links"},{"location":"questions-about-ethereum/is-ethereum-more-expensive-to-use-as-price-rises/","text":"Is Ethereum more expensive to use as price rises? Answer No, the Ethereum fee market is independent of fiat prices. Explanation Basics of a transaction There are many concepts to understand when diving into the answer to this question. First, it's essential to understand how an Ethereum transaction works. As explained in the gas section , every transaction that occurs on the network requires a set amount of gas, which is a unit used to measure the computational power required to process the transaction. To process a transaction and include it in a block, miners expect to be compensated. This is accomplished by setting a gas price with every transaction, which is the cost of 1 unit of gas, denominated in Gwei (1 ETH = 1,000,000,000 Gwei). For example, when you simply send ETH from one account to another, this cost 21000 gas. If you were to set a gas price of 1 Gwei, this transaction would cost 0.000021 ETH. Fee market Currently, the Ethereum network is working at or near capacity. This means that a fee market because some users may be willing to pay more to get to the front of the line while others may not be in as big of a rush. Tools such as EthGasStation offer a great view into the current fee market and what it current costs to get a basic or fast transaction through. You'll notice that so far, we haven't talked about fiat or the cost of a transaction in fiat value. That's because at its core, the fee market is independent from the cost of Ether. Users have the ability to send a transaction from 0 gas price all the way to as high as they'd like and miners have the ability to accept the same range. Rising and falling Ether price While the gas market by design is purely Ether related, it'd be misleading to not acknowledge that a lot of users and miners think of their fees in fiat terms. So while the above example may have cost 0.000021 ETH, some users will instead think of that in terms of fiat cost ($0.002793 for instance). This means that the fee market, while independent of fiat prices at its core, will react to moves in Ether prices. If we use the example above and assume price spikes 5x, all of a sudden that transaction will cost $0.0139 in fiat terms. When price spikes (assuming network demand stays the same), users will start to lower their gas price. When price falls (assuming network demand stays the same), miners will start to raise their minimum accepted gas. We can see the fluctuation in average gas price in the past. Network demand As previously mentioned, network demand plays a much larger role on gas price than Ether price. If no one was using the network, gas prices paid would be near 0. If the network is full, gas prices will start to spike. This is an important consideration when trying to draw conclusions between Ether price and gas prices paid.","title":"Is Ethereum more expensive to use as price rises?"},{"location":"questions-about-ethereum/is-ethereum-more-expensive-to-use-as-price-rises/#is-ethereum-more-expensive-to-use-as-price-rises","text":"","title":"Is Ethereum more expensive to use as price rises?"},{"location":"questions-about-ethereum/is-ethereum-more-expensive-to-use-as-price-rises/#answer","text":"No, the Ethereum fee market is independent of fiat prices.","title":"Answer  "},{"location":"questions-about-ethereum/is-ethereum-more-expensive-to-use-as-price-rises/#explanation","text":"","title":"Explanation  "},{"location":"questions-about-ethereum/is-ethereum-more-expensive-to-use-as-price-rises/#basics-of-a-transaction","text":"There are many concepts to understand when diving into the answer to this question. First, it's essential to understand how an Ethereum transaction works. As explained in the gas section , every transaction that occurs on the network requires a set amount of gas, which is a unit used to measure the computational power required to process the transaction. To process a transaction and include it in a block, miners expect to be compensated. This is accomplished by setting a gas price with every transaction, which is the cost of 1 unit of gas, denominated in Gwei (1 ETH = 1,000,000,000 Gwei). For example, when you simply send ETH from one account to another, this cost 21000 gas. If you were to set a gas price of 1 Gwei, this transaction would cost 0.000021 ETH.","title":"Basics of a transaction  "},{"location":"questions-about-ethereum/is-ethereum-more-expensive-to-use-as-price-rises/#fee-market","text":"Currently, the Ethereum network is working at or near capacity. This means that a fee market because some users may be willing to pay more to get to the front of the line while others may not be in as big of a rush. Tools such as EthGasStation offer a great view into the current fee market and what it current costs to get a basic or fast transaction through. You'll notice that so far, we haven't talked about fiat or the cost of a transaction in fiat value. That's because at its core, the fee market is independent from the cost of Ether. Users have the ability to send a transaction from 0 gas price all the way to as high as they'd like and miners have the ability to accept the same range.","title":"Fee market  "},{"location":"questions-about-ethereum/is-ethereum-more-expensive-to-use-as-price-rises/#rising-and-falling-ether-price","text":"While the gas market by design is purely Ether related, it'd be misleading to not acknowledge that a lot of users and miners think of their fees in fiat terms. So while the above example may have cost 0.000021 ETH, some users will instead think of that in terms of fiat cost ($0.002793 for instance). This means that the fee market, while independent of fiat prices at its core, will react to moves in Ether prices. If we use the example above and assume price spikes 5x, all of a sudden that transaction will cost $0.0139 in fiat terms. When price spikes (assuming network demand stays the same), users will start to lower their gas price. When price falls (assuming network demand stays the same), miners will start to raise their minimum accepted gas. We can see the fluctuation in average gas price in the past.","title":"Rising and falling Ether price   "},{"location":"questions-about-ethereum/is-ethereum-more-expensive-to-use-as-price-rises/#network-demand","text":"As previously mentioned, network demand plays a much larger role on gas price than Ether price. If no one was using the network, gas prices paid would be near 0. If the network is full, gas prices will start to spike. This is an important consideration when trying to draw conclusions between Ether price and gas prices paid.","title":"Network demand  "},{"location":"questions-about-ethereum/is-ethereum-over-1tb-in-size/","text":"Is Ethereum over 1TB in size? Answer No. Please check here for the latest size. Explanation As Afri Schoedon points out in his article , the Ethereum state is what is bloated, not the chain. So what sync mode should you run to get a full Ethereum blockchain with all necessary security? Both Parity and Geth offer options which synchronize a full node starting at the genesis block and executing all transactions. The modes are: parity --no-warp geth --syncmode full These are full nodes because they: Sync the full chain from genesis block Replay all transactions Execute all contracts Recompute the state of each block Keep all historical blocks on disk Keep the most recent state and prunes ancient states When running the full node described above, you are able to rebuild any historical information you want using just your node. There is often much confusion around if a state pruned Ethereum node (above) is a full node and the answer is yes. Pruning ancient state is fine as it is not necessary to most users. If you are looking to run a block explorer or do deep analysis on the blockchain, then you could run an archive node with no pruning so you don't have to always recompute the pruned state. Also note that you can run both Geth and Parity by default (warp and fast sync enabled) and you'll be able to serve the network as a full node after initial sync.","title":"Is Ethereum over 1TB in size?"},{"location":"questions-about-ethereum/is-ethereum-over-1tb-in-size/#is-ethereum-over-1tb-in-size","text":"","title":"Is Ethereum over 1TB in size?"},{"location":"questions-about-ethereum/is-ethereum-over-1tb-in-size/#answer","text":"No. Please check here for the latest size.","title":"Answer"},{"location":"questions-about-ethereum/is-ethereum-over-1tb-in-size/#explanation","text":"As Afri Schoedon points out in his article , the Ethereum state is what is bloated, not the chain. So what sync mode should you run to get a full Ethereum blockchain with all necessary security? Both Parity and Geth offer options which synchronize a full node starting at the genesis block and executing all transactions. The modes are: parity --no-warp geth --syncmode full These are full nodes because they: Sync the full chain from genesis block Replay all transactions Execute all contracts Recompute the state of each block Keep all historical blocks on disk Keep the most recent state and prunes ancient states When running the full node described above, you are able to rebuild any historical information you want using just your node. There is often much confusion around if a state pruned Ethereum node (above) is a full node and the answer is yes. Pruning ancient state is fine as it is not necessary to most users. If you are looking to run a block explorer or do deep analysis on the blockchain, then you could run an archive node with no pruning so you don't have to always recompute the pruned state. Also note that you can run both Geth and Parity by default (warp and fast sync enabled) and you'll be able to serve the network as a full node after initial sync.","title":"Explanation"},{"location":"questions-about-ethereum/why-do-you-have-to-pay-to-use-ethereum/","text":"Why do you have to pay to use Ethereum? Answer Every transaction that occurs on the Ethereum network requires computational resources. Miners must be incentivized to process these transactions and create blocks, therefore users pay a small fee per transaction for this. Explanation While some blockchains boast that they are \"free\" they are simply obfuscating the real cost of the transactions on the network. A \"free\" blockchain may not charge the user for the transaction fees directly via gas but they do usually require users to pay fees in a variety of indirect ways. Examples of this would include smart contract owners paying the fees and passing them onto the user through the function of the contract, requiring users or dapp owners to lock funds for bandwidth or through inflation by paying a set of block producers.","title":"Why do you have to pay to use Ethereum?"},{"location":"questions-about-ethereum/why-do-you-have-to-pay-to-use-ethereum/#why-do-you-have-to-pay-to-use-ethereum","text":"","title":"Why do you have to pay to use Ethereum?"},{"location":"questions-about-ethereum/why-do-you-have-to-pay-to-use-ethereum/#answer","text":"Every transaction that occurs on the Ethereum network requires computational resources. Miners must be incentivized to process these transactions and create blocks, therefore users pay a small fee per transaction for this.","title":"Answer"},{"location":"questions-about-ethereum/why-do-you-have-to-pay-to-use-ethereum/#explanation","text":"While some blockchains boast that they are \"free\" they are simply obfuscating the real cost of the transactions on the network. A \"free\" blockchain may not charge the user for the transaction fees directly via gas but they do usually require users to pay fees in a variety of indirect ways. Examples of this would include smart contract owners paying the fees and passing them onto the user through the function of the contract, requiring users or dapp owners to lock funds for bandwidth or through inflation by paying a set of block producers.","title":"Explanation"},{"location":"using-ethereum/mining/","text":"Mining What does it mean to mine Ethereum? Mining is the process of creating a block of transactions to be added to the Ethereum blockchain. Miners essentially process pending transactions and are awarded block rewards in the form of Ether, the Ethereum network's native currency, for each block generated. Generating a block requires intensive computational work (or hashing power) due to the difficulty set by the Ethereum network protocol. This difficulty level is proportional to the total amount of computational power (also known as the total hashrate of the network) being used to mine Ethereum and serves as a way to secure the network from attacks as well as tuning the speed at which blocks (and block rewards) are generated. This system of using hashing power generated by costly computer hardware is known as Proof of Work (PoW). Who can become a miner on the Ethereum network? Technically, anyone is able to mine on the Ethereum network using their computer. However, not everyone is able to mine Ether profitably. In most cases, miners must purchase dedicated computer hardware in order to mine profitably. While it is true anyone can run the mining software on their computer, it is unlikely that the average computer would be able to earn enough block rewards to cover the associated costs of mining (See question below for more details). What are the costs associated with mining? Potential costs of the hardware necessary to build and maintain a mining rig Electrical cost of powering the mining rig If you are mining in a pool, mining pools fees typically charge a flat % fee of each block generated by the pool Potential cost of equipment to support mining rig (ventilation, energy monitoring, electrical wiring, etc.) Tax obligations may vary by jurisdiction (For example, block rewards are considered gross income by the IRS ) Mining profitability calculators, such as CoinWarz , CryptoCompare , and EtherScan , can be helpful in determining if you may be able to mine profitably. Note that mining calculators may not 100% accurate and it may be useful to compare and contrast several results. Where can I find the latest information on mining? /r/EtherMining Subreddit How much longer will Ethereum mining be around? See Serenity phases for more information. Block Generation Block structure A block consists a header, which includes information identifying the block and linking it to the rest of the chain, and a body of transactions. Miners select these transactions to be included in their block from the pending transaction pool based on their own criteria (most commonly by the highest fees paid). Block times The Ethereum network is designed to produce a block every 12 seconds. Block times will vary based upon how long it takes miners to generate a hash that meets the required mining difficulty at that moment. 12 seconds was chosen as a time that is as fast as possible, but is at the same time substantially longer than network latency. A 2013 paper by Decker and Wattenhofer in Zurich measured Bitcoin network latency and determined that 12.6 seconds is the time it takes for a new block to propagate to 95% of nodes. The goal of the 12 second design is to allow the network to propagate blocks as fast as possible without causing miners to find a significant number of stale blocks. Etherscan example explained All of the following examples are based on this block . Height: This number current number of blocks that exist in the Ethereum blockchain Example: 6969122 TimeStamp: The UNIX timestamp for when the block was collated Example: 29 secs ago (Dec-28-2018 05:01:54 PM +UTC) Transactions: The transactions included in the block Example: 43 transactions and 91 contract Internal Transactions in this Block Hash: The hash of the block itself Example: 0xa6312ebbcea717972344bc598c415cb08e434c01b94d1c2a9b5415624d2c2b81 Parent Hash: The hash of the block from which this block was generated, also known as its parent block. Example: 0xa48e2ad13de011f127b345a81a91933d221f5a60d45852e7d7c2b5a07fda9fe2 Sha3Uncles: A SHA3 hash of the uncle block data included the block Example: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347 Mined By: The address of who mined the block and received the block reward Example: 0x5a0b54d5dc17e0aadc383d2db43b0a0d3e029c4c (SparkPool) in 2 secs Difficulty: A number that represents the difficulty required to mine this block Example: 2,511,265,102,818,605 Total Difficulty: A number that represents the total mining difficulty of the chain up until this block Example: 8,470,035,190,867,378,349,872 Size: The size of the block file in bytes Example: 13160 bytes Gas Used: The total amount of gas used by all the transactions included in this block Example: 7,997,769 (99.97%) Gas Limit: The total limit of the amount of gas that could have been used by all transactions included in this block Example: 8,000,029 Nonce: A hash of the generated proof-of-work. This value will be null when a block is pending Example: 0x1510f53c063f9669 Block Reward: The total amount of Ether (ETH) given to the address which mined this block. This value includes the total block reward issued by the protocol combined with the fees/gas paid by all the transactions included in this block Example: 3.032755182184797136 Ether (3 + 0.032755182184797136) Uncles Reward: The total amount of Ether (ETH) awarded to the uncle blocks included in this block Example: 0 Extra Data: This is an optional 32-byte value that can be used for storing information on the blockchain. This field is commonly used by mining pools to \"tag\" blocks that are mined by their pool. Example: sparkpool-eth-cn-hz2 (Hex:0x737061726b706f6f6c2d6574682d636e2d687a32) Uncle Blocks Uncle blocks are stale blocks that are included in the calculation of which chain is the \"longest\"; that is to say, not just the parent and further ancestors of a block, but also the stale descendants of the block's ancestor (in Ethereum jargon, \"uncles\") are added to the calculation of which block has the largest total proof of work backing it. Block rewards are given to stales: a stale block receives 87.5% of its base reward, and the nephew that includes the stale block receives the remaining 12.5%. Transaction fees, however, are not awarded to uncles. Ethereum implements a simplified version of GHOST which only goes down seven levels. Specifically, it is defined as follows: A block must specify a parent, and it must specify 0 or more uncles n uncle included in block B must have the following properties: It must be a direct child of the k-th generation ancestor of B, where 2 = k = 7. It cannot be an ancestor of B An uncle must be a valid block header, but does not need to be a previously verified or even valid block An uncle must be different from all uncles included in previous blocks and all other uncles included in the same block (non-double-inclusion) For every uncle U in block B, the miner of B gets an additional 3.125% added to its coinbase reward and the miner of U gets 93.75% of a standard coinbase reward. This limited version of GHOST, with uncles includable only up to 7 generations, was used for two reasons. First, unlimited GHOST would include too many complications into the calculation of which uncles for a given block are valid. Second, unlimited GHOST with compensation as used in Ethereum removes the incentive for a miner to mine on the main chain and not the chain of a public attacker. Resources https://github.com/ethereum/wiki/wiki/Design-Rationale https://ethereum.stackexchange.com/questions/268/ethereum-block-architecture https://github.com/ethereum/wiki/wiki/JSON-RPC https://ethereum.stackexchange.com/questions/10548/what-does-every-field-in-block-means How does Ethereum work, anyway? Ethereum Whitepaper Ethereum Mining Pools List Ethereum Mining Calculator","title":"Mining"},{"location":"using-ethereum/mining/#mining","text":"","title":"Mining"},{"location":"using-ethereum/mining/#what-does-it-mean-to-mine-ethereum","text":"Mining is the process of creating a block of transactions to be added to the Ethereum blockchain. Miners essentially process pending transactions and are awarded block rewards in the form of Ether, the Ethereum network's native currency, for each block generated. Generating a block requires intensive computational work (or hashing power) due to the difficulty set by the Ethereum network protocol. This difficulty level is proportional to the total amount of computational power (also known as the total hashrate of the network) being used to mine Ethereum and serves as a way to secure the network from attacks as well as tuning the speed at which blocks (and block rewards) are generated. This system of using hashing power generated by costly computer hardware is known as Proof of Work (PoW).","title":"What does it mean to mine Ethereum?"},{"location":"using-ethereum/mining/#who-can-become-a-miner-on-the-ethereum-network","text":"Technically, anyone is able to mine on the Ethereum network using their computer. However, not everyone is able to mine Ether profitably. In most cases, miners must purchase dedicated computer hardware in order to mine profitably. While it is true anyone can run the mining software on their computer, it is unlikely that the average computer would be able to earn enough block rewards to cover the associated costs of mining (See question below for more details).","title":"Who can become a miner on the Ethereum network?"},{"location":"using-ethereum/mining/#what-are-the-costs-associated-with-mining","text":"Potential costs of the hardware necessary to build and maintain a mining rig Electrical cost of powering the mining rig If you are mining in a pool, mining pools fees typically charge a flat % fee of each block generated by the pool Potential cost of equipment to support mining rig (ventilation, energy monitoring, electrical wiring, etc.) Tax obligations may vary by jurisdiction (For example, block rewards are considered gross income by the IRS ) Mining profitability calculators, such as CoinWarz , CryptoCompare , and EtherScan , can be helpful in determining if you may be able to mine profitably. Note that mining calculators may not 100% accurate and it may be useful to compare and contrast several results.","title":"What are the costs associated with mining?"},{"location":"using-ethereum/mining/#where-can-i-find-the-latest-information-on-mining","text":"/r/EtherMining Subreddit","title":"Where can I find the latest information on mining?"},{"location":"using-ethereum/mining/#how-much-longer-will-ethereum-mining-be-around","text":"See Serenity phases for more information.","title":"How much longer will Ethereum mining be around?"},{"location":"using-ethereum/mining/#block-generation","text":"","title":"Block Generation"},{"location":"using-ethereum/mining/#block-structure","text":"A block consists a header, which includes information identifying the block and linking it to the rest of the chain, and a body of transactions. Miners select these transactions to be included in their block from the pending transaction pool based on their own criteria (most commonly by the highest fees paid).","title":"Block structure"},{"location":"using-ethereum/mining/#block-times","text":"The Ethereum network is designed to produce a block every 12 seconds. Block times will vary based upon how long it takes miners to generate a hash that meets the required mining difficulty at that moment. 12 seconds was chosen as a time that is as fast as possible, but is at the same time substantially longer than network latency. A 2013 paper by Decker and Wattenhofer in Zurich measured Bitcoin network latency and determined that 12.6 seconds is the time it takes for a new block to propagate to 95% of nodes. The goal of the 12 second design is to allow the network to propagate blocks as fast as possible without causing miners to find a significant number of stale blocks.","title":"Block times"},{"location":"using-ethereum/mining/#etherscan-example-explained","text":"All of the following examples are based on this block .","title":"Etherscan example explained"},{"location":"using-ethereum/mining/#height","text":"This number current number of blocks that exist in the Ethereum blockchain Example: 6969122","title":"Height:"},{"location":"using-ethereum/mining/#timestamp","text":"The UNIX timestamp for when the block was collated Example: 29 secs ago (Dec-28-2018 05:01:54 PM +UTC)","title":"TimeStamp:"},{"location":"using-ethereum/mining/#transactions","text":"The transactions included in the block Example: 43 transactions and 91 contract Internal Transactions in this Block","title":"Transactions:"},{"location":"using-ethereum/mining/#hash","text":"The hash of the block itself Example: 0xa6312ebbcea717972344bc598c415cb08e434c01b94d1c2a9b5415624d2c2b81","title":"Hash:"},{"location":"using-ethereum/mining/#parent-hash","text":"The hash of the block from which this block was generated, also known as its parent block. Example: 0xa48e2ad13de011f127b345a81a91933d221f5a60d45852e7d7c2b5a07fda9fe2","title":"Parent Hash:"},{"location":"using-ethereum/mining/#sha3uncles","text":"A SHA3 hash of the uncle block data included the block Example: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","title":"Sha3Uncles:"},{"location":"using-ethereum/mining/#mined-by","text":"The address of who mined the block and received the block reward Example: 0x5a0b54d5dc17e0aadc383d2db43b0a0d3e029c4c (SparkPool) in 2 secs","title":"Mined By:"},{"location":"using-ethereum/mining/#difficulty","text":"A number that represents the difficulty required to mine this block Example: 2,511,265,102,818,605","title":"Difficulty:"},{"location":"using-ethereum/mining/#total-difficulty","text":"A number that represents the total mining difficulty of the chain up until this block Example: 8,470,035,190,867,378,349,872","title":"Total Difficulty:"},{"location":"using-ethereum/mining/#size","text":"The size of the block file in bytes Example: 13160 bytes","title":"Size:"},{"location":"using-ethereum/mining/#gas-used","text":"The total amount of gas used by all the transactions included in this block Example: 7,997,769 (99.97%)","title":"Gas Used:"},{"location":"using-ethereum/mining/#gas-limit","text":"The total limit of the amount of gas that could have been used by all transactions included in this block Example: 8,000,029","title":"Gas Limit:"},{"location":"using-ethereum/mining/#nonce","text":"A hash of the generated proof-of-work. This value will be null when a block is pending Example: 0x1510f53c063f9669","title":"Nonce:"},{"location":"using-ethereum/mining/#block-reward","text":"The total amount of Ether (ETH) given to the address which mined this block. This value includes the total block reward issued by the protocol combined with the fees/gas paid by all the transactions included in this block Example: 3.032755182184797136 Ether (3 + 0.032755182184797136)","title":"Block Reward:"},{"location":"using-ethereum/mining/#uncles-reward","text":"The total amount of Ether (ETH) awarded to the uncle blocks included in this block Example: 0","title":"Uncles Reward:"},{"location":"using-ethereum/mining/#extra-data","text":"This is an optional 32-byte value that can be used for storing information on the blockchain. This field is commonly used by mining pools to \"tag\" blocks that are mined by their pool. Example: sparkpool-eth-cn-hz2 (Hex:0x737061726b706f6f6c2d6574682d636e2d687a32)","title":"Extra Data:"},{"location":"using-ethereum/mining/#uncle-blocks","text":"Uncle blocks are stale blocks that are included in the calculation of which chain is the \"longest\"; that is to say, not just the parent and further ancestors of a block, but also the stale descendants of the block's ancestor (in Ethereum jargon, \"uncles\") are added to the calculation of which block has the largest total proof of work backing it. Block rewards are given to stales: a stale block receives 87.5% of its base reward, and the nephew that includes the stale block receives the remaining 12.5%. Transaction fees, however, are not awarded to uncles. Ethereum implements a simplified version of GHOST which only goes down seven levels. Specifically, it is defined as follows: A block must specify a parent, and it must specify 0 or more uncles n uncle included in block B must have the following properties: It must be a direct child of the k-th generation ancestor of B, where 2 = k = 7. It cannot be an ancestor of B An uncle must be a valid block header, but does not need to be a previously verified or even valid block An uncle must be different from all uncles included in previous blocks and all other uncles included in the same block (non-double-inclusion) For every uncle U in block B, the miner of B gets an additional 3.125% added to its coinbase reward and the miner of U gets 93.75% of a standard coinbase reward. This limited version of GHOST, with uncles includable only up to 7 generations, was used for two reasons. First, unlimited GHOST would include too many complications into the calculation of which uncles for a given block are valid. Second, unlimited GHOST with compensation as used in Ethereum removes the incentive for a miner to mine on the main chain and not the chain of a public attacker.","title":"Uncle Blocks"},{"location":"using-ethereum/mining/#resources","text":"https://github.com/ethereum/wiki/wiki/Design-Rationale https://ethereum.stackexchange.com/questions/268/ethereum-block-architecture https://github.com/ethereum/wiki/wiki/JSON-RPC https://ethereum.stackexchange.com/questions/10548/what-does-every-field-in-block-means How does Ethereum work, anyway? Ethereum Whitepaper Ethereum Mining Pools List Ethereum Mining Calculator","title":"Resources"},{"location":"using-ethereum/running-an-ethereum-node/","text":"Running an Ethereum Node Summary Anyone is able to run an Ethereum node on their computer. This means that you can participate in validating transactions and blocks on the Ethereum blockchain. The two most common clients for running nodes are Geth and Parity . Depending on the type of node run and the hardware specifications of the system, the initial syncronization time and storage requirements vary. For information related to the current Full Node chaindata and state storage size check out: http://didtheethereumblockchainreach1tbyet.5chdn.co/ Below are the different types of nodes a user can run, their settings, and what they mean. Full nodes A full node: Stores the full blockchain data available on disk and can serve the network with any data on request. Receives new transactions and blocks while participating in block validation. Verifies all blocks and states. Stores recent state only for more efficient initial sync. All state can be derived from a full node. Once fully synced, stores all state moving forward similar to archive nodes (more below). Client settings geth The default sync mode. Synchronizes a full node doing a fast synchronization by downloading the entire state database, requesting the headers first, and filling in block bodies and receipts afterward. Once the fast sync reached the best block of the Ethereum network, it switches to a full sync mode geth --syncmode full Synchronizes a full node starting at genesis verifying all blocks and executing all transactions. This mode is a bit slower than the fast sync mode but comes with increased security. parity The default sync mode. Synchronizes a full Ethereum node using warp synchronization mode by downloading a snapshot of the 30,000 best blocks and the latest state database. Once the snapshot is restored, the client switches to full sync and ancient blocks are synchronized from the network in background. A parity default node serves the network as a full node after it has finished synchronizing. parity --no-warp Synchronizes a full node starting at genesis verifying all blocks and executing all transactions. This mode is a bit slower than the warp sync mode but comes with increased security. Both geth full and parity no-warp are to be considered a full Ethereum node because: It runs a full blockchain synchronization starting at genesis. It replays all transactions and executes all contracts. It recomputes the state for each block. It keeps all historical blocks on the disk. It keeps the most recent states on the disk and prunes ancient states. Light nodes A light node: Stores the header chain and requests everything else on demand. Can verify the validity of the data against the state roots in the block headers. Light nodes are useful for low capacity devices, such as embedded devices or mobile phones, which can't afford to store multiple dozen Gigabytes of blockchain data. Client settings geth --syncmode light Waits for around 200 seconds before beginning to sync from 2,300 blocks in the past, then periodically receives small bundles of 1 to 10 blocks. The initial sync takes very little time. parity --light Begins syncing from a hardcoded value (block #6219777) almost immediately, at a rate of approximately 23,500 blocks per minute. With a height at 6,500,000, this takes 15 minutes. Once synced, the light node receives blocks as they get mined and validated by full nodes. parity --light --no-hardcoded-sync Same as --light but syncs from genesis block. Connecting Parity light node to MetaMask (MacOS) Download homebrew (you will have to go through apple dev terms first) Find and open the application Terminal (utilties/terminal) Enter the following commands one by one into the Terminal: brew tap paritytech/paritytech (this adds parity to list of brew taps) brew install parity (installs parity - stable version) parity --light --jsonrpc-cors=\"chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn\" (syncs light node, connects to peers and imports blockheaders) Press ctrl+C and then type: tail -f nohup.out (this will show you logs to ensure its all working) Open metamask on web browser, drop down network, connect to localhost. Archive Nodes An archive node: Stores everything kept in the full node. Also builds an archive of historical states. Archive nodes are only necessary if you want to check the state of an account at any given block height. For example, if you wanted to know the Ether balance an account had at block #4,000,000, you would need to run and query an archive node. They are commonly only used for services such as block explorers and infrastructure providers like Infura. They are use case dependendent and have no impact on the security or trust model of the blockchain. Client Settings geth --syncmode full --gcmode archive Synchronizes an archive node starting at genesis, thoroughly verifying all blocks, executing all transactions, and writing all intermediate states to disk (\"archive\"). In Geth, this is called gcmode which refers to the concept of garbage collection . Setting it to archive basically turns it off. parity --no-warp --pruning archive Synchronizes an archive node starting at genesis, thoroughly verifying all blocks, executing all transactions, and writing all intermediate states to disk (\"archive\"). In Parity, this is called pruning which refers to the concept of state trie pruning . Setting it to archive basically turns it off. Resources Huge shout out and thanks to Afri Schoedon's blogs here and here which is where a lot of the information on this page came from. Dispelling Myths About Ethereum's Disk Space","title":"Running an Ethereum Node"},{"location":"using-ethereum/running-an-ethereum-node/#running-an-ethereum-node","text":"","title":"Running an Ethereum Node"},{"location":"using-ethereum/running-an-ethereum-node/#summary","text":"Anyone is able to run an Ethereum node on their computer. This means that you can participate in validating transactions and blocks on the Ethereum blockchain. The two most common clients for running nodes are Geth and Parity . Depending on the type of node run and the hardware specifications of the system, the initial syncronization time and storage requirements vary. For information related to the current Full Node chaindata and state storage size check out: http://didtheethereumblockchainreach1tbyet.5chdn.co/ Below are the different types of nodes a user can run, their settings, and what they mean.","title":"Summary"},{"location":"using-ethereum/running-an-ethereum-node/#full-nodes","text":"A full node: Stores the full blockchain data available on disk and can serve the network with any data on request. Receives new transactions and blocks while participating in block validation. Verifies all blocks and states. Stores recent state only for more efficient initial sync. All state can be derived from a full node. Once fully synced, stores all state moving forward similar to archive nodes (more below).","title":"Full nodes"},{"location":"using-ethereum/running-an-ethereum-node/#client-settings","text":"geth The default sync mode. Synchronizes a full node doing a fast synchronization by downloading the entire state database, requesting the headers first, and filling in block bodies and receipts afterward. Once the fast sync reached the best block of the Ethereum network, it switches to a full sync mode geth --syncmode full Synchronizes a full node starting at genesis verifying all blocks and executing all transactions. This mode is a bit slower than the fast sync mode but comes with increased security. parity The default sync mode. Synchronizes a full Ethereum node using warp synchronization mode by downloading a snapshot of the 30,000 best blocks and the latest state database. Once the snapshot is restored, the client switches to full sync and ancient blocks are synchronized from the network in background. A parity default node serves the network as a full node after it has finished synchronizing. parity --no-warp Synchronizes a full node starting at genesis verifying all blocks and executing all transactions. This mode is a bit slower than the warp sync mode but comes with increased security. Both geth full and parity no-warp are to be considered a full Ethereum node because: It runs a full blockchain synchronization starting at genesis. It replays all transactions and executes all contracts. It recomputes the state for each block. It keeps all historical blocks on the disk. It keeps the most recent states on the disk and prunes ancient states.","title":"Client settings"},{"location":"using-ethereum/running-an-ethereum-node/#light-nodes","text":"A light node: Stores the header chain and requests everything else on demand. Can verify the validity of the data against the state roots in the block headers. Light nodes are useful for low capacity devices, such as embedded devices or mobile phones, which can't afford to store multiple dozen Gigabytes of blockchain data.","title":"Light nodes"},{"location":"using-ethereum/running-an-ethereum-node/#client-settings_1","text":"geth --syncmode light Waits for around 200 seconds before beginning to sync from 2,300 blocks in the past, then periodically receives small bundles of 1 to 10 blocks. The initial sync takes very little time. parity --light Begins syncing from a hardcoded value (block #6219777) almost immediately, at a rate of approximately 23,500 blocks per minute. With a height at 6,500,000, this takes 15 minutes. Once synced, the light node receives blocks as they get mined and validated by full nodes. parity --light --no-hardcoded-sync Same as --light but syncs from genesis block.","title":"Client settings"},{"location":"using-ethereum/running-an-ethereum-node/#connecting-parity-light-node-to-metamask-macos","text":"Download homebrew (you will have to go through apple dev terms first) Find and open the application Terminal (utilties/terminal) Enter the following commands one by one into the Terminal: brew tap paritytech/paritytech (this adds parity to list of brew taps) brew install parity (installs parity - stable version) parity --light --jsonrpc-cors=\"chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn\" (syncs light node, connects to peers and imports blockheaders) Press ctrl+C and then type: tail -f nohup.out (this will show you logs to ensure its all working) Open metamask on web browser, drop down network, connect to localhost.","title":"Connecting Parity light node to MetaMask (MacOS)"},{"location":"using-ethereum/running-an-ethereum-node/#archive-nodes","text":"An archive node: Stores everything kept in the full node. Also builds an archive of historical states. Archive nodes are only necessary if you want to check the state of an account at any given block height. For example, if you wanted to know the Ether balance an account had at block #4,000,000, you would need to run and query an archive node. They are commonly only used for services such as block explorers and infrastructure providers like Infura. They are use case dependendent and have no impact on the security or trust model of the blockchain.","title":"Archive Nodes"},{"location":"using-ethereum/running-an-ethereum-node/#client-settings_2","text":"geth --syncmode full --gcmode archive Synchronizes an archive node starting at genesis, thoroughly verifying all blocks, executing all transactions, and writing all intermediate states to disk (\"archive\"). In Geth, this is called gcmode which refers to the concept of garbage collection . Setting it to archive basically turns it off. parity --no-warp --pruning archive Synchronizes an archive node starting at genesis, thoroughly verifying all blocks, executing all transactions, and writing all intermediate states to disk (\"archive\"). In Parity, this is called pruning which refers to the concept of state trie pruning . Setting it to archive basically turns it off.","title":"Client Settings"},{"location":"using-ethereum/running-an-ethereum-node/#resources","text":"Huge shout out and thanks to Afri Schoedon's blogs here and here which is where a lot of the information on this page came from. Dispelling Myths About Ethereum's Disk Space","title":"Resources"},{"location":"using-ethereum/test-networks/","text":"Test Networks Ropsten Summary The Ropsten test network is a Proof of Work testnet for Ethereum. To acquire ETH on Ropsten, one can mine on the network. Resources Block Explorer Ethstats for Ropsten Kovan Summary The Kovan test network is a Proof of Authority testnet for Ethereum, originally started by the Parity team. To acquire ETH on Kovan, one can request it from a faucet. Resources Website Block Explorer Faucet Rinkeby Summary The Rinkeby test network is a Proof of Authority testnet for Ethereum, originally started by the Geth team. To acquire ETH on Rinkeby, one can request it from a faucet. Resources Website Block Explorer Faucet G\u00f6rli Summary The G\u00f6rli test network is a Proof of Authority testnet for Ethereum, originally proposed by Chainsafe and Afri Schoedon. To acquire ETH on G\u00f6rli, one can use the one-way throttled bridge from any of the other three test networks. Resources Website Block Explorer GitHub Testnet proposal Ethstats for G\u00f6rli","title":"Test Networks"},{"location":"using-ethereum/test-networks/#test-networks","text":"","title":"Test Networks"},{"location":"using-ethereum/test-networks/#ropsten","text":"","title":"Ropsten"},{"location":"using-ethereum/test-networks/#summary","text":"The Ropsten test network is a Proof of Work testnet for Ethereum. To acquire ETH on Ropsten, one can mine on the network.","title":"Summary"},{"location":"using-ethereum/test-networks/#resources","text":"Block Explorer Ethstats for Ropsten","title":"Resources"},{"location":"using-ethereum/test-networks/#kovan","text":"","title":"Kovan"},{"location":"using-ethereum/test-networks/#summary_1","text":"The Kovan test network is a Proof of Authority testnet for Ethereum, originally started by the Parity team. To acquire ETH on Kovan, one can request it from a faucet.","title":"Summary"},{"location":"using-ethereum/test-networks/#resources_1","text":"Website Block Explorer Faucet","title":"Resources"},{"location":"using-ethereum/test-networks/#rinkeby","text":"","title":"Rinkeby"},{"location":"using-ethereum/test-networks/#summary_2","text":"The Rinkeby test network is a Proof of Authority testnet for Ethereum, originally started by the Geth team. To acquire ETH on Rinkeby, one can request it from a faucet.","title":"Summary"},{"location":"using-ethereum/test-networks/#resources_2","text":"Website Block Explorer Faucet","title":"Resources"},{"location":"using-ethereum/test-networks/#gorli","text":"","title":"G\u00f6rli"},{"location":"using-ethereum/test-networks/#summary_3","text":"The G\u00f6rli test network is a Proof of Authority testnet for Ethereum, originally proposed by Chainsafe and Afri Schoedon. To acquire ETH on G\u00f6rli, one can use the one-way throttled bridge from any of the other three test networks.","title":"Summary"},{"location":"using-ethereum/test-networks/#resources_3","text":"Website Block Explorer GitHub Testnet proposal Ethstats for G\u00f6rli","title":"Resources"},{"location":"using-ethereum/transactions/","text":"Transactions Gas Summary Understanding 'gas' is fundamental to understand how the Ethereum network functions. The EVM - the Ethereum Virtual Machine (EVM) running on each Ethereum node - is an emulation of a computer system. One example of a regular, non-blockchain virtual machine is the VirtualBox software, which allows you to emulate computer systems (guests) on your physical hardware (hosts). Any operation in the EVM consumes CPU cycles, disk access, memory, of the hosting machine (which carries a cost). This cost is paid via Ethereum 'gas'. In order to prevent \"overload\" of the host, each operation on the EVM consumes a certain amount of gas. Accessing memory or writing to disk have differing costs with each EVM operator setting an upper limit to the gas consumed during execution of a contract. So, if a malicious operator crafted a smart contract that went into an infinite loop, each loop would consume some gas and eventually run into the limit, at which point the EVM would abort the execution of this contract. Essentially, the larger, more complex the contract and the more operations it performs, the more expensive it is to run it. This process creates a fee market using gas prices where users decide how much they are willing to pay for each unit of gas. Due to the gas block limit, the fee market almost always determines what order transactions are mined in because miners looking to profit will select the transactions with the highest fees. There are many key components to a transaction that are important to understand: Term Description Gas Unit for how much computation work is done. Gas Price How much you\u2019re willing to pay per gas for work (in gwei) Tx Cost Gas used * Gas Price Gas Limit Max gas you\u2019ll pay for a certain tx Gas Block Limit Max gas allowed in a block Fee Market Summary The Ethereum gas block limit means that there is a limit to how many computations can occur per block. This creates a fee market for gas where miners will accept higher paying transactions first. Users that want their transactions to be included first can pay a higher gas price than those who aren't in a rush. Key concepts to understand about the fee market are: Term Description Gas Price How much a user is willing to pay per gas for work (in gwei) Safe Low A price that will be mined in a reasonable time ( 50 blocks) Standard Gas Price The average gas price being paid by the network Fast Gas Price A price that will be mined within the next few blocks Signing Transactions on Ethereum Interacting with Smart Contracts via Etherscan and MetaMask Navigate to the Etherscan page for the Contract Address If the code and ABI have been uploaded to Etherscan, you should be able to access the 'Write Contract' tab Click the connect with MetaMask button Follow the documentation provided by the Contract's author to complete your transaction. Interacting with Smart Contracts via MyCrypto Navigate to MyCrypto . Verify the SSL (little green lock next to URL) to avoid phishing sites. Click the 'Contracts' tab Enter the Ethereum address of your desired contract in the 'Contract Address' field Enter the 'ABI / JSON Interface' provided by the contract author into the 'Contract ABI' filed. The ABI allows MyCrypto to display named functions that are invokable for the provided contract address. This code can sometimes be found on the Etherscan page for the contract address under the 'Code' tab. Click 'Access' Follow the contract documentation provided by the contract author to use the desired contract function in the 'Read / Write Contract' dropdown. Follow the MyCrypto prompts to access your wallet in order to sign and submit your transaction. Important notes If you are experiencing troubles, be sure that you are using the 'Ethereum' (mainnet) from the dropdown in the top right hand corner It never hurts to cross reference the average gas limit and gas price on either Etherscan or EthGasStation How To Make An Offline Transaction via MyCrypto To learn how to generate, sign, and broadcast a transaction locally and offline via MyCrypto, see this guide . Signing Verifying Messages on Ethereum Ethereum private keys can be used to sign messages. Signatures can be used to verify that a given user owns an Ethereum address. To learn how to sign and verify signatures via MyCrypto, see this guide . Resources How does Ethereum work, anyway? EthGasStation","title":"Transactions"},{"location":"using-ethereum/transactions/#transactions","text":"","title":"Transactions"},{"location":"using-ethereum/transactions/#gas","text":"","title":"Gas"},{"location":"using-ethereum/transactions/#summary","text":"Understanding 'gas' is fundamental to understand how the Ethereum network functions. The EVM - the Ethereum Virtual Machine (EVM) running on each Ethereum node - is an emulation of a computer system. One example of a regular, non-blockchain virtual machine is the VirtualBox software, which allows you to emulate computer systems (guests) on your physical hardware (hosts). Any operation in the EVM consumes CPU cycles, disk access, memory, of the hosting machine (which carries a cost). This cost is paid via Ethereum 'gas'. In order to prevent \"overload\" of the host, each operation on the EVM consumes a certain amount of gas. Accessing memory or writing to disk have differing costs with each EVM operator setting an upper limit to the gas consumed during execution of a contract. So, if a malicious operator crafted a smart contract that went into an infinite loop, each loop would consume some gas and eventually run into the limit, at which point the EVM would abort the execution of this contract. Essentially, the larger, more complex the contract and the more operations it performs, the more expensive it is to run it. This process creates a fee market using gas prices where users decide how much they are willing to pay for each unit of gas. Due to the gas block limit, the fee market almost always determines what order transactions are mined in because miners looking to profit will select the transactions with the highest fees. There are many key components to a transaction that are important to understand: Term Description Gas Unit for how much computation work is done. Gas Price How much you\u2019re willing to pay per gas for work (in gwei) Tx Cost Gas used * Gas Price Gas Limit Max gas you\u2019ll pay for a certain tx Gas Block Limit Max gas allowed in a block","title":"Summary"},{"location":"using-ethereum/transactions/#fee-market","text":"","title":"Fee Market"},{"location":"using-ethereum/transactions/#summary_1","text":"The Ethereum gas block limit means that there is a limit to how many computations can occur per block. This creates a fee market for gas where miners will accept higher paying transactions first. Users that want their transactions to be included first can pay a higher gas price than those who aren't in a rush. Key concepts to understand about the fee market are: Term Description Gas Price How much a user is willing to pay per gas for work (in gwei) Safe Low A price that will be mined in a reasonable time ( 50 blocks) Standard Gas Price The average gas price being paid by the network Fast Gas Price A price that will be mined within the next few blocks","title":"Summary"},{"location":"using-ethereum/transactions/#signing-transactions-on-ethereum","text":"","title":"Signing Transactions on Ethereum"},{"location":"using-ethereum/transactions/#interacting-with-smart-contracts-via-etherscan-and-metamask","text":"Navigate to the Etherscan page for the Contract Address If the code and ABI have been uploaded to Etherscan, you should be able to access the 'Write Contract' tab Click the connect with MetaMask button Follow the documentation provided by the Contract's author to complete your transaction.","title":"Interacting with Smart Contracts via Etherscan and MetaMask"},{"location":"using-ethereum/transactions/#interacting-with-smart-contracts-via-mycrypto","text":"Navigate to MyCrypto . Verify the SSL (little green lock next to URL) to avoid phishing sites. Click the 'Contracts' tab Enter the Ethereum address of your desired contract in the 'Contract Address' field Enter the 'ABI / JSON Interface' provided by the contract author into the 'Contract ABI' filed. The ABI allows MyCrypto to display named functions that are invokable for the provided contract address. This code can sometimes be found on the Etherscan page for the contract address under the 'Code' tab. Click 'Access' Follow the contract documentation provided by the contract author to use the desired contract function in the 'Read / Write Contract' dropdown. Follow the MyCrypto prompts to access your wallet in order to sign and submit your transaction.","title":"Interacting with Smart Contracts via MyCrypto"},{"location":"using-ethereum/transactions/#important-notes","text":"If you are experiencing troubles, be sure that you are using the 'Ethereum' (mainnet) from the dropdown in the top right hand corner It never hurts to cross reference the average gas limit and gas price on either Etherscan or EthGasStation","title":"Important notes"},{"location":"using-ethereum/transactions/#how-to-make-an-offline-transaction-via-mycrypto","text":"To learn how to generate, sign, and broadcast a transaction locally and offline via MyCrypto, see this guide .","title":"How To Make An Offline Transaction via MyCrypto"},{"location":"using-ethereum/transactions/#signing-verifying-messages-on-ethereum","text":"Ethereum private keys can be used to sign messages. Signatures can be used to verify that a given user owns an Ethereum address. To learn how to sign and verify signatures via MyCrypto, see this guide .","title":"Signing &amp; Verifying Messages on Ethereum"},{"location":"using-ethereum/transactions/#resources","text":"How does Ethereum work, anyway? EthGasStation","title":"Resources"},{"location":"using-ethereum/ethereum-clients/ethereumj/","text":"EthereumJ (Harmony) Summary EthereumJ is a pure-Java implementation of the Ethereum protocol. Harmony is the front end client software and runs on top of EthereumJ. It is capable of fully syncing both ropsten and mainnet and is compatible with the Constantinople hardfork. Resources EthereumJ Github Docs Harmony Github","title":"EthereumJ (Harmony)"},{"location":"using-ethereum/ethereum-clients/ethereumj/#ethereumj-harmony","text":"","title":"EthereumJ (Harmony)"},{"location":"using-ethereum/ethereum-clients/ethereumj/#summary","text":"EthereumJ is a pure-Java implementation of the Ethereum protocol. Harmony is the front end client software and runs on top of EthereumJ. It is capable of fully syncing both ropsten and mainnet and is compatible with the Constantinople hardfork.","title":"Summary"},{"location":"using-ethereum/ethereum-clients/ethereumj/#resources","text":"","title":"Resources"},{"location":"using-ethereum/ethereum-clients/ethereumj/#ethereumj","text":"Github Docs","title":"EthereumJ"},{"location":"using-ethereum/ethereum-clients/ethereumj/#harmony","text":"Github","title":"Harmony"},{"location":"using-ethereum/ethereum-clients/geth/","text":"Geth Summary Geth is the Golang implementation of the Ethereum protocol. It is fast, open source software that is actively maintained. Requirements Minimum: CPU with 2+ cores At least 80GB free storage space 4GB RAM minimum with a SSD, 8GB+ if you have an HDD 8 MBit/sec download Internet service Recommended: Fast CPU with 4+ cores. 16GB+ RAM. Fast SSD with at least 500GB free space. 25+ MBit/sec download Internet service. For light nodes, the requirements are much lower, as you will only be storing block headers and receive small state updates. Setup Download Geth from the official page Extract the compressed archive with your tool of choice There are no system dependencies if using an officially released geth binary, which ships for most architectures and operating systems. Running The first step in running an Ethereum node is synchronizing the Blockchian. There are a few options you can use to specify the sync mode of the geth client: --syncmode \"fast\" --syncmode \"full\" --syncmode \"light\" By default, geth will run in --syncmode \"fast\", this is the recommended option for running a complete Ethereum node. When using \"fast\" synchronization, the node will initially download blocks until it reaches the tip of the Blockchain without performing extensive validation steps. Once your node is in sync with the rest of the network, the node will validate transactions exactly like a full node. When using \"full\" synchronization, the node validates every transaction from downloaded blocks until it reaches the tip of the Blockchain. This is not advised, as it doesn't provide any benefits and can result in the node taking multiple days, or even weeks, to synchronize completely. Once the node is in sync, it will continue full validation of new transactions. When using \"light\" synchronization, the node only downloads a few recent block headers, making it a very quick sync. The drawback to this method is that the node is unable to perform reliable validation, as it doesn't have complete records of the Blockchain. If running on a device with low bandwidth or memory, the light node can be advantageous. The light node gets updated by full nodes once in a while with information on changes pertaining to relevant parts of the Blockchain. When offering services to users which might require complete records, the fast sync options are the best to use. A fast sync node can operate in light mode. Using In the folder extracted from the downloaded archive, the geth program can be run with the desired sync mode and other options. ./geth --syncmode option When using a light client, beware that it can take up to 10 minutes after the node's initialization before it starts receiving updates from the network. From then on, it is actively subscribed to updates by the full nodes. You can expect it to take anywhere from 3 to 12 hours to fast sync your Ethereum node depending on your hardware and whether your connection to the Internet is a bottleneck. A few interesting commands which will enhance your geth experience: ./geth account new : create an account, yields the address and location of the keystore file ./geth account list : list all accounts located in the keystore folder ./geth --cache VALUE : increase the amount of memory allocated to geth, default 1024 (MB) ./geth --maxpeers VALUE : set maximum number of full node peers, default 25 ./geth --lightpeers VALUE : set maximum number of light node peers, default 100 ./geth export FILEPATH : export a copy of the Blockchain data to FILEPATH ./geth import FILEPATH : import Blockchain data from FILEPATH Resources Github","title":"Geth"},{"location":"using-ethereum/ethereum-clients/geth/#geth","text":"","title":"Geth"},{"location":"using-ethereum/ethereum-clients/geth/#summary","text":"Geth is the Golang implementation of the Ethereum protocol. It is fast, open source software that is actively maintained.","title":"Summary"},{"location":"using-ethereum/ethereum-clients/geth/#requirements","text":"Minimum: CPU with 2+ cores At least 80GB free storage space 4GB RAM minimum with a SSD, 8GB+ if you have an HDD 8 MBit/sec download Internet service Recommended: Fast CPU with 4+ cores. 16GB+ RAM. Fast SSD with at least 500GB free space. 25+ MBit/sec download Internet service. For light nodes, the requirements are much lower, as you will only be storing block headers and receive small state updates.","title":"Requirements"},{"location":"using-ethereum/ethereum-clients/geth/#setup","text":"Download Geth from the official page Extract the compressed archive with your tool of choice There are no system dependencies if using an officially released geth binary, which ships for most architectures and operating systems.","title":"Setup"},{"location":"using-ethereum/ethereum-clients/geth/#running","text":"The first step in running an Ethereum node is synchronizing the Blockchian. There are a few options you can use to specify the sync mode of the geth client: --syncmode \"fast\" --syncmode \"full\" --syncmode \"light\" By default, geth will run in --syncmode \"fast\", this is the recommended option for running a complete Ethereum node. When using \"fast\" synchronization, the node will initially download blocks until it reaches the tip of the Blockchain without performing extensive validation steps. Once your node is in sync with the rest of the network, the node will validate transactions exactly like a full node. When using \"full\" synchronization, the node validates every transaction from downloaded blocks until it reaches the tip of the Blockchain. This is not advised, as it doesn't provide any benefits and can result in the node taking multiple days, or even weeks, to synchronize completely. Once the node is in sync, it will continue full validation of new transactions. When using \"light\" synchronization, the node only downloads a few recent block headers, making it a very quick sync. The drawback to this method is that the node is unable to perform reliable validation, as it doesn't have complete records of the Blockchain. If running on a device with low bandwidth or memory, the light node can be advantageous. The light node gets updated by full nodes once in a while with information on changes pertaining to relevant parts of the Blockchain. When offering services to users which might require complete records, the fast sync options are the best to use. A fast sync node can operate in light mode.","title":"Running"},{"location":"using-ethereum/ethereum-clients/geth/#using","text":"In the folder extracted from the downloaded archive, the geth program can be run with the desired sync mode and other options. ./geth --syncmode option When using a light client, beware that it can take up to 10 minutes after the node's initialization before it starts receiving updates from the network. From then on, it is actively subscribed to updates by the full nodes. You can expect it to take anywhere from 3 to 12 hours to fast sync your Ethereum node depending on your hardware and whether your connection to the Internet is a bottleneck. A few interesting commands which will enhance your geth experience: ./geth account new : create an account, yields the address and location of the keystore file ./geth account list : list all accounts located in the keystore folder ./geth --cache VALUE : increase the amount of memory allocated to geth, default 1024 (MB) ./geth --maxpeers VALUE : set maximum number of full node peers, default 25 ./geth --lightpeers VALUE : set maximum number of light node peers, default 100 ./geth export FILEPATH : export a copy of the Blockchain data to FILEPATH ./geth import FILEPATH : import Blockchain data from FILEPATH","title":"Using"},{"location":"using-ethereum/ethereum-clients/geth/#resources","text":"Github","title":"Resources"},{"location":"using-ethereum/ethereum-clients/pantheon/","text":"Pantheon Summary Pantheon is an open-source Ethereum client developed under the Apache 2.0 license and written in Java. It runs on the Ethereum public network, private networks, and test networks such as Rinkeby and Ropsten. Pantheon implements Proof of Work (Ethash) and Proof of Authority (Clique) consensus mechanisms. You can use Pantheon to develop enterprise applications requiring secure, high-performance transaction processing in a private network. Resources Github Docs","title":"Pantheon"},{"location":"using-ethereum/ethereum-clients/pantheon/#pantheon","text":"","title":"Pantheon"},{"location":"using-ethereum/ethereum-clients/pantheon/#summary","text":"Pantheon is an open-source Ethereum client developed under the Apache 2.0 license and written in Java. It runs on the Ethereum public network, private networks, and test networks such as Rinkeby and Ropsten. Pantheon implements Proof of Work (Ethash) and Proof of Authority (Clique) consensus mechanisms. You can use Pantheon to develop enterprise applications requiring secure, high-performance transaction processing in a private network.","title":"Summary"},{"location":"using-ethereum/ethereum-clients/pantheon/#resources","text":"Github Docs","title":"Resources"},{"location":"using-ethereum/ethereum-clients/parity/","text":"Parity Summary Parity is an implementation of the Ethereum protocol written in Rust, a systems programming language. It is developed and actively maintained by Parity Technologies. Requirements Full node: Multi-core CPU 4GB RAM SSD drive and at least 100GB free space A decent DSL connection is required Computers using HDD are advised to run a Light Node. Light node: Single-core CPU 512MB RAM 128MB free space on HDD Setup Download parity from the official Github releases page If on Linux, make the parity binary executable with chmod +x ./parity For running a compiled binary downloaded from the official Github releases page, no system dependencies are required. Running By default, the Parity client syncs the Ethereum Blockchain completely from a snapshot downloaded from peers and includes features such as auto-updating. To disable downloading a snapshot from peers, use --no-warp ; this saves a few GB of storage but takes longer to sync. If you wish to run a light node, simply specify the command line option --light to the program. Syncing can be faster by disregarding ancient blocks with --no-ancient-blocks ; costing only 20GB. The default sync with warp enabled occupies ~82GB of storage when completed (as of 15/10/2018). For a complete pruning archive, with complete state saved, run parity with --pruning archive (over 1TB disk space will be used). Using Many commands are available with the parity client. parity account new : asks for a password and yields an address parity account list : lists local addresses parity snapshot --at BLOCKNUMBER FILEPATH : save snapshot at BLOCKNUMBER to FILEPATH parity restore FILEPATH : restore Blockchain from snapshot located at FILEPATH Resources Github","title":"Parity"},{"location":"using-ethereum/ethereum-clients/parity/#parity","text":"","title":"Parity"},{"location":"using-ethereum/ethereum-clients/parity/#summary","text":"Parity is an implementation of the Ethereum protocol written in Rust, a systems programming language. It is developed and actively maintained by Parity Technologies.","title":"Summary"},{"location":"using-ethereum/ethereum-clients/parity/#requirements","text":"Full node: Multi-core CPU 4GB RAM SSD drive and at least 100GB free space A decent DSL connection is required Computers using HDD are advised to run a Light Node. Light node: Single-core CPU 512MB RAM 128MB free space on HDD","title":"Requirements"},{"location":"using-ethereum/ethereum-clients/parity/#setup","text":"Download parity from the official Github releases page If on Linux, make the parity binary executable with chmod +x ./parity For running a compiled binary downloaded from the official Github releases page, no system dependencies are required.","title":"Setup"},{"location":"using-ethereum/ethereum-clients/parity/#running","text":"By default, the Parity client syncs the Ethereum Blockchain completely from a snapshot downloaded from peers and includes features such as auto-updating. To disable downloading a snapshot from peers, use --no-warp ; this saves a few GB of storage but takes longer to sync. If you wish to run a light node, simply specify the command line option --light to the program. Syncing can be faster by disregarding ancient blocks with --no-ancient-blocks ; costing only 20GB. The default sync with warp enabled occupies ~82GB of storage when completed (as of 15/10/2018). For a complete pruning archive, with complete state saved, run parity with --pruning archive (over 1TB disk space will be used).","title":"Running"},{"location":"using-ethereum/ethereum-clients/parity/#using","text":"Many commands are available with the parity client. parity account new : asks for a password and yields an address parity account list : lists local addresses parity snapshot --at BLOCKNUMBER FILEPATH : save snapshot at BLOCKNUMBER to FILEPATH parity restore FILEPATH : restore Blockchain from snapshot located at FILEPATH","title":"Using"},{"location":"using-ethereum/ethereum-clients/parity/#resources","text":"Github","title":"Resources"},{"location":"using-ethereum/ethereum-clients/py-evm/","text":"Py-EVM (Trinity) Summary Py-EVM is a new implementation of the Ethereum Virtual Machine (EVM) written in Python. Trinity is the client software that connects to the Ethereum network and runs on top of Py-EVM. It is currently in active development but is quickly progressing through the test suite provided by ethereum/tests. Trinity and Py-EVM aim to replace existing Python Ethereum implementations to eventually become the defacto standard for the Python ecosystem. Resources Website Github Docs","title":"Py-EVM (Trinity)"},{"location":"using-ethereum/ethereum-clients/py-evm/#py-evm-trinity","text":"","title":"Py-EVM (Trinity)"},{"location":"using-ethereum/ethereum-clients/py-evm/#summary","text":"Py-EVM is a new implementation of the Ethereum Virtual Machine (EVM) written in Python. Trinity is the client software that connects to the Ethereum network and runs on top of Py-EVM. It is currently in active development but is quickly progressing through the test suite provided by ethereum/tests. Trinity and Py-EVM aim to replace existing Python Ethereum implementations to eventually become the defacto standard for the Python ecosystem.","title":"Summary"},{"location":"using-ethereum/ethereum-clients/py-evm/#resources","text":"Website Github Docs","title":"Resources"},{"location":"using-ethereum/wallets/desktop/","text":"Desktop Summary Desktop wallets are downloadable apps capable of operating on Windows, MacOS, or Linux that allow users to interact with their funds. Pros and Cons Pros If you're able to create/sign transactions offline, this is the most-secure method for interacting with the Ethereum blockchain. Non-custodial, and more private than most other methods of interacting with your funds. Cons May be more of a hassle when used offline than other methods of accessing your funds. Wallets MyCrypto - Open-source, client-side tool downloadable from https://download.mycrypto.com for generating Ethereum wallets, handling ERC-20 tokens, and interacting with the blockchain easily. Exodus - Closed-source wallet that allows for multi-currency interaction/transacting (requires you to be online to generate transactions). Mist - Browse and use Dapps on the Ethereum network Fetch - Desktop (and web) wallet supporting Ethereum and ERC-20 tokens. Integrated with 20 exchanges for real time trading rates and one-click trading. Tokenary - a macOS Ethereum and ERC-20 tokens wallet and Safari extension that lets you store your assets and interact with DApps. Resources Ethereum Developer Tools List","title":"Desktop"},{"location":"using-ethereum/wallets/desktop/#desktop","text":"","title":"Desktop"},{"location":"using-ethereum/wallets/desktop/#summary","text":"Desktop wallets are downloadable apps capable of operating on Windows, MacOS, or Linux that allow users to interact with their funds.","title":"Summary"},{"location":"using-ethereum/wallets/desktop/#pros-and-cons","text":"","title":"Pros and Cons"},{"location":"using-ethereum/wallets/desktop/#pros","text":"If you're able to create/sign transactions offline, this is the most-secure method for interacting with the Ethereum blockchain. Non-custodial, and more private than most other methods of interacting with your funds.","title":"Pros"},{"location":"using-ethereum/wallets/desktop/#cons","text":"May be more of a hassle when used offline than other methods of accessing your funds.","title":"Cons"},{"location":"using-ethereum/wallets/desktop/#wallets","text":"MyCrypto - Open-source, client-side tool downloadable from https://download.mycrypto.com for generating Ethereum wallets, handling ERC-20 tokens, and interacting with the blockchain easily. Exodus - Closed-source wallet that allows for multi-currency interaction/transacting (requires you to be online to generate transactions). Mist - Browse and use Dapps on the Ethereum network Fetch - Desktop (and web) wallet supporting Ethereum and ERC-20 tokens. Integrated with 20 exchanges for real time trading rates and one-click trading. Tokenary - a macOS Ethereum and ERC-20 tokens wallet and Safari extension that lets you store your assets and interact with DApps.","title":"Wallets"},{"location":"using-ethereum/wallets/desktop/#resources","text":"Ethereum Developer Tools List","title":"Resources"},{"location":"using-ethereum/wallets/hardware/","text":"Hardware Summary Hardware wallets are the most-secure method for accessing your funds while online, as they do not expose your private key to the internet when signing transactions. Pros and Cons Pros Most-secure method for accessing your funds while online Non-custodial, and private than most other methods of interacting with your funds. Cons Cost money Wallets Trezor - The original hardware wallet Ledger - Support for multiple cryptocurrencies and tokens KeepKey - The simple hardware wallet Resources Consensys's ethereum-developer-tools-list","title":"Hardware"},{"location":"using-ethereum/wallets/hardware/#hardware","text":"","title":"Hardware"},{"location":"using-ethereum/wallets/hardware/#summary","text":"Hardware wallets are the most-secure method for accessing your funds while online, as they do not expose your private key to the internet when signing transactions.","title":"Summary"},{"location":"using-ethereum/wallets/hardware/#pros-and-cons","text":"","title":"Pros and Cons"},{"location":"using-ethereum/wallets/hardware/#pros","text":"Most-secure method for accessing your funds while online Non-custodial, and private than most other methods of interacting with your funds.","title":"Pros"},{"location":"using-ethereum/wallets/hardware/#cons","text":"Cost money","title":"Cons"},{"location":"using-ethereum/wallets/hardware/#wallets","text":"Trezor - The original hardware wallet Ledger - Support for multiple cryptocurrencies and tokens KeepKey - The simple hardware wallet","title":"Wallets"},{"location":"using-ethereum/wallets/hardware/#resources","text":"Consensys's ethereum-developer-tools-list","title":"Resources"},{"location":"using-ethereum/wallets/mobile/","text":"Mobile Summary Phone and other mobile device-based wallets are mobile alternatives to desktop and web wallets. Pros and Cons Pros Most mobile method of accessing your funds. Cons Rely on the security of your mobile device. Wallets Coinbase Wallet Status - A free open-source, mobile OS for Ethereum Trust - Mobile wallet for ERC tokens imToken - Feature-rich digital asset mobile wallet enabling multi-chain asset management, DApp browsing and secure, private exchange of value. Balance - A Mobile Ethereum wallet for iOS and Android. Coinomi - Multicurrency wallet Argent - No transaction fee wallet Cypher - Mobile Dapp explorer WallETH - Native Android Ethereum Wallet. Jaxx - Both a mobile and a desktop wallet. Has integrated Shapeshift support. eth-wallet-light - Lightweight JS Wallet optimized for mobile Tokenary \u2014 Native iOS wallet and DApp explorer and browser with cross-device synchronization and macOS support. Resources Consensys's ethereum-developer-tools-list","title":"Mobile"},{"location":"using-ethereum/wallets/mobile/#mobile","text":"","title":"Mobile"},{"location":"using-ethereum/wallets/mobile/#summary","text":"Phone and other mobile device-based wallets are mobile alternatives to desktop and web wallets.","title":"Summary"},{"location":"using-ethereum/wallets/mobile/#pros-and-cons","text":"","title":"Pros and Cons"},{"location":"using-ethereum/wallets/mobile/#pros","text":"Most mobile method of accessing your funds.","title":"Pros"},{"location":"using-ethereum/wallets/mobile/#cons","text":"Rely on the security of your mobile device.","title":"Cons"},{"location":"using-ethereum/wallets/mobile/#wallets","text":"Coinbase Wallet Status - A free open-source, mobile OS for Ethereum Trust - Mobile wallet for ERC tokens imToken - Feature-rich digital asset mobile wallet enabling multi-chain asset management, DApp browsing and secure, private exchange of value. Balance - A Mobile Ethereum wallet for iOS and Android. Coinomi - Multicurrency wallet Argent - No transaction fee wallet Cypher - Mobile Dapp explorer WallETH - Native Android Ethereum Wallet. Jaxx - Both a mobile and a desktop wallet. Has integrated Shapeshift support. eth-wallet-light - Lightweight JS Wallet optimized for mobile Tokenary \u2014 Native iOS wallet and DApp explorer and browser with cross-device synchronization and macOS support.","title":"Wallets"},{"location":"using-ethereum/wallets/mobile/#resources","text":"Consensys's ethereum-developer-tools-list","title":"Resources"},{"location":"using-ethereum/wallets/multisignature/","text":"MultiSig Summary Multisignature Wallets (multisig wallets) are wallets created with signatures from several private keys. Multisignatures require signatures from a majority of the original signing keys (commonly referred to as n-of-m keys) in order to interact with the wallet. Ideally, the signing keys of a multisignature wallet should be comprised of several different types of wallets in order to reduce the risk of any one key from compromising the security of the multi-signature wallet. Multisignature wallets where the keys are properly distributd also reduce the risk of losing the keys to your funds due to unforeseen circumstances. For example, if a multisignature wallet included keys stored on a hardware wallet, a mobile wallet, and a desktop wallet and your mobile phone is stolen, you could still access your multisignature wallet using the hardware and desktop wallets. Pros and Cons Pros Can be secured by several types of wallet keys (desktop, hardware, mobile, etc.) for added security Can be configured to be recovered by a portion of the original signing keys (n-of-m keys) Non-custodial, more private than most other methods of interacting with your funds. Cons Inconvenience of requiring access to multiple keys to interact with the wallet Wallets Gnosis MultiSigWallet - The original Gnosis multisig wallet Gnosis Safe - An improved version of Gnosis MultiSigWallet BitGo Multi-Sig Wallet v2 Grid+'s hardware agent called Lattice1 also uses multisignature wallets to allow end users and merchants to securely store their funds using a combination of an arbitrary amount of smart cards or Safe Cards and your mobile phone. Resources Grid+ Lattice1 - Enterprise-grade hardware terminal for multisig wallets Consensys's ethereum-developer-tools-list","title":"Multi Signature"},{"location":"using-ethereum/wallets/multisignature/#multisig","text":"","title":"MultiSig"},{"location":"using-ethereum/wallets/multisignature/#summary","text":"Multisignature Wallets (multisig wallets) are wallets created with signatures from several private keys. Multisignatures require signatures from a majority of the original signing keys (commonly referred to as n-of-m keys) in order to interact with the wallet. Ideally, the signing keys of a multisignature wallet should be comprised of several different types of wallets in order to reduce the risk of any one key from compromising the security of the multi-signature wallet. Multisignature wallets where the keys are properly distributd also reduce the risk of losing the keys to your funds due to unforeseen circumstances. For example, if a multisignature wallet included keys stored on a hardware wallet, a mobile wallet, and a desktop wallet and your mobile phone is stolen, you could still access your multisignature wallet using the hardware and desktop wallets.","title":"Summary"},{"location":"using-ethereum/wallets/multisignature/#pros-and-cons","text":"","title":"Pros and Cons"},{"location":"using-ethereum/wallets/multisignature/#pros","text":"Can be secured by several types of wallet keys (desktop, hardware, mobile, etc.) for added security Can be configured to be recovered by a portion of the original signing keys (n-of-m keys) Non-custodial, more private than most other methods of interacting with your funds.","title":"Pros"},{"location":"using-ethereum/wallets/multisignature/#cons","text":"Inconvenience of requiring access to multiple keys to interact with the wallet","title":"Cons"},{"location":"using-ethereum/wallets/multisignature/#wallets","text":"Gnosis MultiSigWallet - The original Gnosis multisig wallet Gnosis Safe - An improved version of Gnosis MultiSigWallet BitGo Multi-Sig Wallet v2 Grid+'s hardware agent called Lattice1 also uses multisignature wallets to allow end users and merchants to securely store their funds using a combination of an arbitrary amount of smart cards or Safe Cards and your mobile phone.","title":"Wallets"},{"location":"using-ethereum/wallets/multisignature/#resources","text":"Grid+ Lattice1 - Enterprise-grade hardware terminal for multisig wallets Consensys's ethereum-developer-tools-list","title":"Resources"},{"location":"using-ethereum/wallets/web/","text":"Web Summary Web wallets are wallets hosted on a website, they may be custodial or act as an interface for users to generate and interact with their accounts. Pros and Cons Pros Highly Available and Accessible. Cons Rely on each provider to provide good security and to respect your privacy. Wallets Metamask - Chrome extension Ether wallet with ERC tokens support MyEtherWallet - Open-source tool for interacting with the blockchains easily securely MyCrypto - Open-source, client-side tool for generating ether wallets, handling ERC-20 tokens, and interacting with the blockchain more easily Portis - Web-based wallet for easy user on-boarding to your DApp Eth lightwallet - Lightweight JS Wallet for Node and the browser SpankCard - An in-browser Ethereum wallet with support for payment channels Mnemonic generator - generate word mnemonic and associated public/private key pairs. Select \"Ethereum\" as coin to generate Ethereum addresses. Useful for truffle-hd-wallet. Fetch - Web-based (and desktop) wallet supporting Ethereum and ERC-20 tokens. Integrated with 20 exchanges for real time trading rates and one-click trading. Zerion - Web-based wallet interface with native DeFi integrations for trading, borrowing and investing. Features historical portfolio, Metamask, WalletConnect and Uniswap integrations. Tokenary - macOS Safari extension that enables interaction with DApps. Resources Consensys's ethereum-developer-tools-list","title":"Web"},{"location":"using-ethereum/wallets/web/#web","text":"","title":"Web"},{"location":"using-ethereum/wallets/web/#summary","text":"Web wallets are wallets hosted on a website, they may be custodial or act as an interface for users to generate and interact with their accounts.","title":"Summary"},{"location":"using-ethereum/wallets/web/#pros-and-cons","text":"","title":"Pros and Cons"},{"location":"using-ethereum/wallets/web/#pros","text":"Highly Available and Accessible.","title":"Pros"},{"location":"using-ethereum/wallets/web/#cons","text":"Rely on each provider to provide good security and to respect your privacy.","title":"Cons"},{"location":"using-ethereum/wallets/web/#wallets","text":"Metamask - Chrome extension Ether wallet with ERC tokens support MyEtherWallet - Open-source tool for interacting with the blockchains easily securely MyCrypto - Open-source, client-side tool for generating ether wallets, handling ERC-20 tokens, and interacting with the blockchain more easily Portis - Web-based wallet for easy user on-boarding to your DApp Eth lightwallet - Lightweight JS Wallet for Node and the browser SpankCard - An in-browser Ethereum wallet with support for payment channels Mnemonic generator - generate word mnemonic and associated public/private key pairs. Select \"Ethereum\" as coin to generate Ethereum addresses. Useful for truffle-hd-wallet. Fetch - Web-based (and desktop) wallet supporting Ethereum and ERC-20 tokens. Integrated with 20 exchanges for real time trading rates and one-click trading. Zerion - Web-based wallet interface with native DeFi integrations for trading, borrowing and investing. Features historical portfolio, Metamask, WalletConnect and Uniswap integrations. Tokenary - macOS Safari extension that enables interaction with DApps.","title":"Wallets"},{"location":"using-ethereum/wallets/web/#resources","text":"Consensys's ethereum-developer-tools-list","title":"Resources"}]}